{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The goal of this course is not to turn you into a master JavaScript developer. In fact, coming out of this course, we're really just scratching the surface, which is precisely the point. Mastering the ability to code is a career-long journey, but getting project-ready , where you are able to create real applications to see the results of your work doesn't have to be difficult. Most guides and tutorials out there tend to overload beginners with unnecessary details that distract them from the core concepts in the beginning. By following through with this program, you will be able to go from \"zero\" (absolute beginner) to \"project-ready\" in the fastest way possible. Sometimes, there will be links to additional readings, but the core material is focused on getting rid of distracting details so that we can focus on building and experimenting. Guiding Philosophies and Strategic Shortcuts Hands-On Learning Going through readings and videos can help build a basic understanding of code, but you're not going to fully \"get it\" without carefully working through exercises and examples. Each reading aligns to coding exercises for you to complete in your assignment repository. You will need to make sure to import the correct assignment code prior to beginning your readings . Content for each section builds on knowledge from prior sections. So, it's important to fully understand each section before moving to the next. Emphasis on Vocabulary Learning technical vocabulary is super important for a number of reasons: Being able to speak using precise terms shows a high level of understanding. Knowing the right terms will help when you're asking for help, whether that be on the internet or from a person. We'll call out key terms in each section and link to a terminology table. Avoid Pitfalls Here are a list of common mistakes that many introductory coding students make. Try to follow these guidelines to maximize your learning: Code in small chunks and test along the way. This will help you identify and fix errors early, before they get difficult to find. When your code doesn't work, follow the scientific method: Hypothesize, test, learn, repeat. Do NOT copy-paste code. If you're receiving help online, make sure to read, understand, and then write it yourself. The point in the beginning is to get as much practice as you can, and copy-pasting is simply robbing yourself of this practice. Choose variable names that represent the data well. Avoid general names like a and b . Embrace reading documentation. Most professionals rely on documentation more than any other resource. What's being simplified One tool for every job We won't show you all of the different ways to copmlete a task in code. We'll show you the one way that is the best option 90% of the time. One equality operator Although we'll introduce the difference, we will not be using the == operator in this course, and we don't use it much in the real world, either. Stick to === . JQuery for DOM manipulation and HTTP requests We've tried teaching \"Vanilla JavaScript\", but it's quite difficult to get the hang of in the beginning. Instead, we've opted to use JQuery because it simplifies a lot of concepts in DOM Manipulation and HTTP requests, which are concepts that can be difficult to understand as it is. However, it is recommended to learn how to work without JQuery after you are comfortable with the concepts, and we will include resources for you to learn that after the course concludes. External Resources Sometimes, you will be directed to utilize external resources for learning. Generally, this happens when another resource already does a good job of simplifying the information and concisely teaching a topic. Note about ChatGPT Do NOT ask ChatGPT to code for you in this coursee. It will not help you at this stage of your learning. You can , however, ask it to help explain concepts to you or find additional resources for you. There's 2 main reasons why you shouldn't realy on ChatGPT just yet to help you with coding: 1. Hinders Learning Do you know what your main job as a programmer is? It's not actually coding. It's problem solving using code. That being said, if you don't go through the motions of writing code on your own in the beginning, you'll never develop the skills of problem solving and logic, which will cause enormous issues for you when you actually try to get a job. 2. ChatGPT Sucks at Coding Seriously. Sometimes, ChatGPT will come up with some good code. But usually it comes up with code that is not optimal, efficient, or, worse, even correct! As a beginner, you won't have the experience to recognize these issues, leading to learning and developing poor coding practices. \"But, professional developers say they use ChatGPT for work!\" . Yes, it's true. Many professional developers do in fact use ChatGPT at work, and it can improve their work efficiency. However . You are not a professional developer (not yet, anyways). The real reason why professionals use ChatGPT is because it can write code really fast , not because the code is of good quality . ChatGPT can write a lot of very simple boilerplate code very quickly, which a developer can then come back and implement the more difficult portions of. Conclusion Don't use ChatGPT to code just yet. You can use it to ask questions about concepts, or ask for advice on where to find resources. However, asking ChatGPT to code for you will only hinder your learning and cause you to come up with bad code. Also, it's pretty obvious to any professional developer when we see AI-generated code.","title":"Home"},{"location":"#introduction","text":"The goal of this course is not to turn you into a master JavaScript developer. In fact, coming out of this course, we're really just scratching the surface, which is precisely the point. Mastering the ability to code is a career-long journey, but getting project-ready , where you are able to create real applications to see the results of your work doesn't have to be difficult. Most guides and tutorials out there tend to overload beginners with unnecessary details that distract them from the core concepts in the beginning. By following through with this program, you will be able to go from \"zero\" (absolute beginner) to \"project-ready\" in the fastest way possible. Sometimes, there will be links to additional readings, but the core material is focused on getting rid of distracting details so that we can focus on building and experimenting.","title":"Introduction"},{"location":"#guiding-philosophies-and-strategic-shortcuts","text":"","title":"Guiding Philosophies and Strategic Shortcuts"},{"location":"#hands-on-learning","text":"Going through readings and videos can help build a basic understanding of code, but you're not going to fully \"get it\" without carefully working through exercises and examples. Each reading aligns to coding exercises for you to complete in your assignment repository. You will need to make sure to import the correct assignment code prior to beginning your readings . Content for each section builds on knowledge from prior sections. So, it's important to fully understand each section before moving to the next.","title":"Hands-On Learning"},{"location":"#emphasis-on-vocabulary","text":"Learning technical vocabulary is super important for a number of reasons: Being able to speak using precise terms shows a high level of understanding. Knowing the right terms will help when you're asking for help, whether that be on the internet or from a person. We'll call out key terms in each section and link to a terminology table.","title":"Emphasis on Vocabulary"},{"location":"#avoid-pitfalls","text":"Here are a list of common mistakes that many introductory coding students make. Try to follow these guidelines to maximize your learning: Code in small chunks and test along the way. This will help you identify and fix errors early, before they get difficult to find. When your code doesn't work, follow the scientific method: Hypothesize, test, learn, repeat. Do NOT copy-paste code. If you're receiving help online, make sure to read, understand, and then write it yourself. The point in the beginning is to get as much practice as you can, and copy-pasting is simply robbing yourself of this practice. Choose variable names that represent the data well. Avoid general names like a and b . Embrace reading documentation. Most professionals rely on documentation more than any other resource.","title":"Avoid Pitfalls"},{"location":"#whats-being-simplified","text":"","title":"What's being simplified"},{"location":"#one-tool-for-every-job","text":"We won't show you all of the different ways to copmlete a task in code. We'll show you the one way that is the best option 90% of the time.","title":"One tool for every job"},{"location":"#one-equality-operator","text":"Although we'll introduce the difference, we will not be using the == operator in this course, and we don't use it much in the real world, either. Stick to === .","title":"One equality operator"},{"location":"#jquery-for-dom-manipulation-and-http-requests","text":"We've tried teaching \"Vanilla JavaScript\", but it's quite difficult to get the hang of in the beginning. Instead, we've opted to use JQuery because it simplifies a lot of concepts in DOM Manipulation and HTTP requests, which are concepts that can be difficult to understand as it is. However, it is recommended to learn how to work without JQuery after you are comfortable with the concepts, and we will include resources for you to learn that after the course concludes.","title":"JQuery for DOM manipulation and HTTP requests"},{"location":"#external-resources","text":"Sometimes, you will be directed to utilize external resources for learning. Generally, this happens when another resource already does a good job of simplifying the information and concisely teaching a topic.","title":"External Resources"},{"location":"#note-about-chatgpt","text":"Do NOT ask ChatGPT to code for you in this coursee. It will not help you at this stage of your learning. You can , however, ask it to help explain concepts to you or find additional resources for you. There's 2 main reasons why you shouldn't realy on ChatGPT just yet to help you with coding:","title":"Note about ChatGPT"},{"location":"#1-hinders-learning","text":"Do you know what your main job as a programmer is? It's not actually coding. It's problem solving using code. That being said, if you don't go through the motions of writing code on your own in the beginning, you'll never develop the skills of problem solving and logic, which will cause enormous issues for you when you actually try to get a job.","title":"1. Hinders Learning"},{"location":"#2-chatgpt-sucks-at-coding","text":"Seriously. Sometimes, ChatGPT will come up with some good code. But usually it comes up with code that is not optimal, efficient, or, worse, even correct! As a beginner, you won't have the experience to recognize these issues, leading to learning and developing poor coding practices. \"But, professional developers say they use ChatGPT for work!\" . Yes, it's true. Many professional developers do in fact use ChatGPT at work, and it can improve their work efficiency. However . You are not a professional developer (not yet, anyways). The real reason why professionals use ChatGPT is because it can write code really fast , not because the code is of good quality . ChatGPT can write a lot of very simple boilerplate code very quickly, which a developer can then come back and implement the more difficult portions of.","title":"2. ChatGPT Sucks at Coding"},{"location":"#conclusion","text":"Don't use ChatGPT to code just yet. You can use it to ask questions about concepts, or ask for advice on where to find resources. However, asking ChatGPT to code for you will only hinder your learning and cause you to come up with bad code. Also, it's pretty obvious to any professional developer when we see AI-generated code.","title":"Conclusion"},{"location":"bonus/PREP/","text":"Problem Solving and Algorithms with PREP PREP Many coding problems you encounter will involve writing functions to perform specific tasks. PREP is a mnemonic to guide you through methodically tackling these problems. The letters in P.R.E.P. stand for Parameters, Return, Example, Pseudocode. Let's practice using PREP through this example problem: Write a function that accepts a sentence and returns the longest word. \"P\" is for Parameters In this step we are thinking about our function's inputs: What parameters will our function accept? What type will each of our parameters have? What are meaningful names for our parameters? Look for keywords like \"accepts\" or \"takes in\" in the problem description to guide you. The statement \u201caccepts a sentence\u201d tells you that the function should accept a single String parameter. You could name this parameter sentenceString to make the type crystal clear, but it's pretty obvious that just sentence implies a String, and it's more concise. Since this is your first step, you also need to think of a meaningful name for your function itself. In your case, longestWord is both concise and descriptive. Now that you've decided this, you can write the shell for your function like this: function longestWord(sentence){ } \"R\" is for Return What data type does this function return? Is it a number? A boolean? A string? Remember: the value a function returns is not the same as what it might display in a print/log statement. Once again, you can look at the problem statement for clarification. \"Returns the longest word\" tells you that you're returning a word, and you know that words are strings. Let's make this crystal clear by creating a variable to represent this return value and rigging up your function to return it. Even though you aren't returning the correct answer yet, you're set up to return the correct type. You have created a placeholder that will make the next steps easier. function longestWord(sentence){ let word = 'placeholder'; return word; } \"E\" is for Example Even for expert developers, static code is harder to understand than running code. You want to make your code runnable and \u201calive\u201d as soon as possible. You can breathe life into your function with an example test invocation. You know that if your function accepts the sentence, 'I saw a hippopotamus', it should return the string 'hippopotamus' once it's properly working. But for now, you just want to see your placeholder value from the last step to confirm your code is runnable and setup correctly. function longestWord(sentence){ let word = 'placeholder'; return word; } console.log(longestWord('I saw a hippopotamus')); Last \"P\" is for Pseudocode While it's tempting to just dive in and start coding now, it would be too easy to get caught up in a detail that could distract you from the bigger picture. You need to devise a strategy first, and pseudocoding is just the tactic for this. Pseudocode is a series of precise statements written in spoken language comments that describe what you need to do. function longestWord(sentence){ // Use a variable to keep track of the longest word so far. let word = 'placeholder'; // Convert the sentence into an array of words, so we can easily // iterate over each word. // Loop through each of the words. // If the length of the current word is greater than the longest // so far, update our variable tracking the longest word. // After we've looked at every word, return the tracking variable. return word; } // This should log \"hippopotamus\" once our function is working // correctly. Currently, it logs \"placeholder\" console.log(longestWord('I saw a hippopotamus')); You've finished PREP. Now you can code! The four steps in PREP helped you clearly frame the problem and think about how to solve it. In truth, accurate framing is half the battle. At this point, your goal is to just write code that will make your examples and tests pass. You'll do this by encoding each of your pseudocode steps. You know you've got a working solution when you can run your code and see the correct output. function longestWord(sentence){ // Use a variable to keep track of the longest word so far. let longestWordSoFar = \"\"; // Convert the sentence into an array of words, so we can easily // iterate over each word. let wordArray = sentence.split(\" \"); let currentWord; // Loop through each of the words. for (let i = 0; i < wordArray.length; i++){ currentWord = wordArray[i]; // If the length of the current word is greater than the longest // so far, update our variable tracking the longest word. if (currentWord.length > longestWordSoFar.length){ longestWordSoFar = currentWord; } } // after we've looked at every word, return the tracking variable return longestWordSoFar; } // This should log \"hippopotamus\" once our function is working // correctly. console.log(longestWord('I saw a hippopotamus'));","title":"PREP"},{"location":"bonus/PREP/#problem-solving-and-algorithms-with-prep","text":"","title":"Problem Solving and Algorithms with PREP"},{"location":"bonus/PREP/#prep","text":"Many coding problems you encounter will involve writing functions to perform specific tasks. PREP is a mnemonic to guide you through methodically tackling these problems. The letters in P.R.E.P. stand for Parameters, Return, Example, Pseudocode. Let's practice using PREP through this example problem: Write a function that accepts a sentence and returns the longest word.","title":"PREP"},{"location":"bonus/PREP/#p-is-for-parameters","text":"In this step we are thinking about our function's inputs: What parameters will our function accept? What type will each of our parameters have? What are meaningful names for our parameters? Look for keywords like \"accepts\" or \"takes in\" in the problem description to guide you. The statement \u201caccepts a sentence\u201d tells you that the function should accept a single String parameter. You could name this parameter sentenceString to make the type crystal clear, but it's pretty obvious that just sentence implies a String, and it's more concise. Since this is your first step, you also need to think of a meaningful name for your function itself. In your case, longestWord is both concise and descriptive. Now that you've decided this, you can write the shell for your function like this: function longestWord(sentence){ }","title":"\"P\" is for Parameters"},{"location":"bonus/PREP/#r-is-for-return","text":"What data type does this function return? Is it a number? A boolean? A string? Remember: the value a function returns is not the same as what it might display in a print/log statement. Once again, you can look at the problem statement for clarification. \"Returns the longest word\" tells you that you're returning a word, and you know that words are strings. Let's make this crystal clear by creating a variable to represent this return value and rigging up your function to return it. Even though you aren't returning the correct answer yet, you're set up to return the correct type. You have created a placeholder that will make the next steps easier. function longestWord(sentence){ let word = 'placeholder'; return word; }","title":"\"R\" is for Return"},{"location":"bonus/PREP/#e-is-for-example","text":"Even for expert developers, static code is harder to understand than running code. You want to make your code runnable and \u201calive\u201d as soon as possible. You can breathe life into your function with an example test invocation. You know that if your function accepts the sentence, 'I saw a hippopotamus', it should return the string 'hippopotamus' once it's properly working. But for now, you just want to see your placeholder value from the last step to confirm your code is runnable and setup correctly. function longestWord(sentence){ let word = 'placeholder'; return word; } console.log(longestWord('I saw a hippopotamus'));","title":"\"E\" is for Example"},{"location":"bonus/PREP/#last-p-is-for-pseudocode","text":"While it's tempting to just dive in and start coding now, it would be too easy to get caught up in a detail that could distract you from the bigger picture. You need to devise a strategy first, and pseudocoding is just the tactic for this. Pseudocode is a series of precise statements written in spoken language comments that describe what you need to do. function longestWord(sentence){ // Use a variable to keep track of the longest word so far. let word = 'placeholder'; // Convert the sentence into an array of words, so we can easily // iterate over each word. // Loop through each of the words. // If the length of the current word is greater than the longest // so far, update our variable tracking the longest word. // After we've looked at every word, return the tracking variable. return word; } // This should log \"hippopotamus\" once our function is working // correctly. Currently, it logs \"placeholder\" console.log(longestWord('I saw a hippopotamus'));","title":"Last \"P\" is for Pseudocode"},{"location":"bonus/PREP/#youve-finished-prep-now-you-can-code","text":"The four steps in PREP helped you clearly frame the problem and think about how to solve it. In truth, accurate framing is half the battle. At this point, your goal is to just write code that will make your examples and tests pass. You'll do this by encoding each of your pseudocode steps. You know you've got a working solution when you can run your code and see the correct output. function longestWord(sentence){ // Use a variable to keep track of the longest word so far. let longestWordSoFar = \"\"; // Convert the sentence into an array of words, so we can easily // iterate over each word. let wordArray = sentence.split(\" \"); let currentWord; // Loop through each of the words. for (let i = 0; i < wordArray.length; i++){ currentWord = wordArray[i]; // If the length of the current word is greater than the longest // so far, update our variable tracking the longest word. if (currentWord.length > longestWordSoFar.length){ longestWordSoFar = currentWord; } } // after we've looked at every word, return the tracking variable return longestWordSoFar; } // This should log \"hippopotamus\" once our function is working // correctly. console.log(longestWord('I saw a hippopotamus'));","title":"You've finished PREP. Now you can code!"},{"location":"bonus/next-steps/","text":"Next Steps If you've made it this far and successfully completed the program, congratulations! At this point you can call yourself \"Code Literate\" and \"Project Ready\" but there is much, much more to learn in the world of programming if you want to take your skills further. The good news is that there are tons of resources available for you to keep learning. Your next steps from this point depend on your goals. Here are a few recommendations: Keep coding! Coding is very much a \"use it or lose it\" skill, so it's extremely important to keep up the practice. CodeWars is a free site loaded with programming challenges, and it's an amazing resources for keeping up the practice. Challenges range from easy to extremely difficult, and when you solve a problem you'll be shown solutions from the community - studying these solutions is an excellent way to sharpen your skills. Customize your Visual Studio Code. Take a deep dive on the settings and tools made available to you through this tool. It's an extremely popular code editor for both personal and professional purposes, so investing time into understanding VS Code better is a worthwhile endeavor. Learn React. If front-end development is feeling more interesting to you so far, you should consider learning React. React is an extremely popular framework for building front-end applications, and there are lot of great tutorials. This one is a nice place to start. Learn Node. If you're fascinated by back-end development, you've got a lot of options. You'll inevitably need to learn SQL for interfacing with databases, and you'll be well poised to start working with Node (server-side JavaScript). Express is a node-based API for building APIs. Build your own project! One of the most rewarding ways to learn is through building an application you are excited about. The key is to start with small attainable goals and incrementally work up from there. For inspiration, here is a list of free APIs you can leverage to incorporate real data into your project. Consider joining a coding school! There are plenty of options, and not all of them are equal, but having a structured curriculum and community of similar learners and instructors around you can accelerate your learning process. Of course, self-learning programming is still a great option. If you want to go down the self-learning route, find a structured curriculum to stick to, such as the Odin Project . Don't stop learning! The field of programming is constantly evolving. You will never run out of new things to learn, and this is a good thing! Becoming a developer opens you up to a world of opportunity -- as long as you're constantly learning new things.","title":"Next Steps"},{"location":"bonus/next-steps/#next-steps","text":"If you've made it this far and successfully completed the program, congratulations! At this point you can call yourself \"Code Literate\" and \"Project Ready\" but there is much, much more to learn in the world of programming if you want to take your skills further. The good news is that there are tons of resources available for you to keep learning. Your next steps from this point depend on your goals. Here are a few recommendations: Keep coding! Coding is very much a \"use it or lose it\" skill, so it's extremely important to keep up the practice. CodeWars is a free site loaded with programming challenges, and it's an amazing resources for keeping up the practice. Challenges range from easy to extremely difficult, and when you solve a problem you'll be shown solutions from the community - studying these solutions is an excellent way to sharpen your skills. Customize your Visual Studio Code. Take a deep dive on the settings and tools made available to you through this tool. It's an extremely popular code editor for both personal and professional purposes, so investing time into understanding VS Code better is a worthwhile endeavor. Learn React. If front-end development is feeling more interesting to you so far, you should consider learning React. React is an extremely popular framework for building front-end applications, and there are lot of great tutorials. This one is a nice place to start. Learn Node. If you're fascinated by back-end development, you've got a lot of options. You'll inevitably need to learn SQL for interfacing with databases, and you'll be well poised to start working with Node (server-side JavaScript). Express is a node-based API for building APIs. Build your own project! One of the most rewarding ways to learn is through building an application you are excited about. The key is to start with small attainable goals and incrementally work up from there. For inspiration, here is a list of free APIs you can leverage to incorporate real data into your project. Consider joining a coding school! There are plenty of options, and not all of them are equal, but having a structured curriculum and community of similar learners and instructors around you can accelerate your learning process. Of course, self-learning programming is still a great option. If you want to go down the self-learning route, find a structured curriculum to stick to, such as the Odin Project . Don't stop learning! The field of programming is constantly evolving. You will never run out of new things to learn, and this is a good thing! Becoming a developer opens you up to a world of opportunity -- as long as you're constantly learning new things.","title":"Next Steps"},{"location":"capstone/creative-opportunities/","text":"Creative Opportunities and Extended Functionality Now that you've completed the project, it's time to make it your own! Check out the next section to see some ideas of what you can do to customize this project! Extended Functionality Ideas This is the creative part of programming! Once you have the basic functionality working, it's up to you where you take it! Here's a few ideas to get you started: Customize the look and feel of the application with your own CSS. Add a custom header above the grid and/or footer below the grid. Add additional search criteria above the grid (Like \"keyword\"). Work them into your API requests. Add the ability to click from any individual movie's poster to that movie's official page on The Movie DB's website. Every movie's page is available at: https://www.themoviedb.org/movie/MOVIE_ID_HERE (just replace MOVIE_ID_HERE with the id of the movie that was clicked) Automatically update to the movie list whenever the user changes a value, so you don't need to use the \"Search!\" button. Allow the user to choose how many results they want to see (up to 20).","title":"Creative Opportunities"},{"location":"capstone/creative-opportunities/#creative-opportunities-and-extended-functionality","text":"Now that you've completed the project, it's time to make it your own! Check out the next section to see some ideas of what you can do to customize this project!","title":"Creative Opportunities and Extended Functionality"},{"location":"capstone/creative-opportunities/#extended-functionality-ideas","text":"This is the creative part of programming! Once you have the basic functionality working, it's up to you where you take it! Here's a few ideas to get you started: Customize the look and feel of the application with your own CSS. Add a custom header above the grid and/or footer below the grid. Add additional search criteria above the grid (Like \"keyword\"). Work them into your API requests. Add the ability to click from any individual movie's poster to that movie's official page on The Movie DB's website. Every movie's page is available at: https://www.themoviedb.org/movie/MOVIE_ID_HERE (just replace MOVIE_ID_HERE with the id of the movie that was clicked) Automatically update to the movie list whenever the user changes a value, so you don't need to use the \"Search!\" button. Allow the user to choose how many results they want to see (up to 20).","title":"Extended Functionality Ideas"},{"location":"capstone/top9/","text":"Project: Top Nine Movies For this project, we will be building a website that finds and displays the 9 most popular movies for a specific category and year. It would be a good idea to be familiar with: Reading and Understanding HTML and CSS files. Implementing and Calling functions that return values. Getting and editing elements using the DOM. Event handling with forms using the DOM. Calling APIs using fetch and the standard API Promise Chain. Constructing API URLs with multiple query parameters. Authenticating API Calls with an API Key Prerequisite: API key from TMDB This project will require that you have a working API key from TMDB. If you don't currently have one, you can follow this guide to get one. To authenticate your API calls, we will add the API key in your API URL as a query parameter. API Reference Check out this documentation for the TMDB API that you will be using. You don't need to look at all the possible query parameters, but try to take note on how you can filter by genre and year . Initial State Initially appears with a grid of 9 placeholder images in 3 rows. Above the grid, there is a dropdown (select) menu for selecting a Genre. This dropdown defaults to \"Action\". Above the grid, there is also a text input for entering a Release Year. This is an optional input with no default value. There is also a button labeled \"Search!\", which will trigger the search. Expected Result After a user enters search criteria and clicks the \"Search!\" button, the application should query TMDB's Discover API for movies that match the criteria. The movies should be returned in order of decreasing popularity, with the most popular movies returned first. The 9 placeholder images in the grid should be replaced with cover images of the top 9 movies matching the provided criteria. Instructions Part 0: Inspect the provided starter files and add your API Key The first step in any project where there is starter code is to make sure you understand what the current code contains and what it is doing. Read through index.html and styles.css and get a good idea of what they contain. Pay special attention to the HTML elements in the \"movies\" <div> , the \"genre\" <select> , and the \"year\" text <input> . Inspect script.js and look at the unimplemented functions. Take note that at the top, the BASE_URL for the API is given to you. Read through all of the comments that explain what each function should do. Replace the apiKey=\"PASTE_API_KEY_HERE\" with your actual API key from your TMDB account. The BASE_URL is built with this apiKey , so you won't have to do this with each API call yourself. Open index.html in Live Server, and move on to Part 1. Need to change up the instructions below to use JQuery Part 1: Calling the API We want to incrementally add functionality so that we can test and make sure everything works as we go. The first thing that we will do is make sure that our API calls are working before doing things like adding event listeners and query parameters. Implement the getMovies function with the standard API Promise Chain. Log the response to the console. Make sure that we are using the url parameter instead of the BASE_URL inside the function implementation. Underneath the getMovies implementation call getMovies with the BASE_URL . Save your code, and check to see that you see something simliar in your browser's Developer Console: Part 2: Attaching the Event Listener Since the API works properly, let's make it so that whenever the \"query\" form is submitted, we call our API using the function above. Delete the getMovies call we wrote in the last part. Add a \"submit\" event listener to the \"query\" form, and provide it with an event handler function that calls the getMovies function whenever the form is submitted. Don't forget to prevent the default behavior of submitting a form! Otherwise, the website will refresh every time you submit the form, and you won't see any output in the Developer Console! Save your code, and check to make sure that every time you click the \"Search!\" button, a new line appears in your Developer Console. In this example, I clicked the button 3 times: Part 3: Set Movie Posters using Response After testing the above functionality, let's utilize the API data to change the placeholder images that we are displaying on the web page. Implement the setMoviePosters function so that it loops over the first 9 results in movies and changes the corresponding <img> element's src attribute to the poster URL. Take note that: The image url to set the movie poster image isn't fully stored in each movie object. Instead, a poster_path property contains the end portion of the URL. For more information on how this works, check out this documentation about it. Make sure to check out the comments above the setMoviePosters function to get a bit of pseudocode and explanation on how to implement it. Edit getMovies so that instead of logging the data to the console, we get the results array of movies it contains, and pass that array to the setMoviePosters function to display the movie posters. Ensure that when you click the \"Search!\" button, you see 9 movies on your screen: Since we haven't implemented any query parameters yet, if you click the \"Search!\" button multiple times, you will see the same results. Part 4: Add the \"Genre\" Query Parameter Pressing \"Search!\" and getting the exact same results every time isn't very useful to the user, so let's introduce the \"Genre\" Query Parameter. From the API Documentation at the top, you should have seen that there is a query parameter \"with_genres\", which takes a list of genre ID values. To save you the trouble, here's the list of Genre IDs we use in the select box: Action = 28 Adventure = 12 Animation = 16 Comedy = 35 Crime = 80 Documentary = 99 Drama = 18 Family = 10751 Fantasy = 14 History = 36 Horror = 27 Music = 10402 In index.html , the dropdown selection already maps each genre name to genre ID. But, if you'd like, you can look at the list of genres here by clicking \"Try It!\". Remember that to add query parameters to our API URL, we need to add a \"?\" to the end of our base URL first: \"https://example.com/api/?query=value\" Scroll to the bottom and look at the constructURL function, which takes a genre and year , and constructs a URL with them. Implement constructURL so that it appends the genre query parameter to the BASE_URL and returns it. Take note that in the <select> dropdown, there is no \"Any\" option, which means that selecting a genre is REQUIRED. Do you need a conditional to check if genre is an empty string? Verify that the function is working correctly by uncommenting the 2 example console.log statements for Part 4, and inspecting the output in the Developer Console. Once you have verified that it is correct, re-comment the example calls: In the \"submit\" event handler, get the genre selection from the DOM, and save it to a variable. Call constructURL with this variable, and save it to a new variable. Instead of calling getMovies with the BASE_URL , call it with the result of constructURL above. Save your code, and in Live Server, select some genres from the dropdown and click \"Search!\". Finally, select \"Music\" as your genre, and make sure that the result looks like this: Part 5: Add the \"Year\" Query Parameter Finally, we want to allow our user to filter movies not only by genre, but optionally the Release Year of the movie, as well. Back in the documentation link, you should have seen a parameter called \"primary_release_year\". This is the query parameter we will be using. Remember that to add multiple query parameters, we need to separate them using \"&\" symbols: \"https://example.com/api/?query1=value1&query2=value2&...\" Head back to constructURL , and re-implement it by adding in the release year as well. Note that since \"Year Released\" is a text box and can be left empty, it is NOT required, which means that we will need to check if it exists prior to adding it in. Verify that the function is working correctly by uncommenting the 2 example console.log statements for Part 5, and inspecting the output in the Developer Console. Once you have verified that it is correct, re-comment the example calls: In the \"submit\" event handler, get the value of the \"Year Released\" text input, and save that to a variable as well. Now, pass both the genre and year to the constructURl call. Save, and test your code. Provide several different genres and release years to test on your own, then, provide \"Fantasy\" as the genre, and \"2011\" as the release year:","title":"Top 9 Movies"},{"location":"capstone/top9/#project-top-nine-movies","text":"For this project, we will be building a website that finds and displays the 9 most popular movies for a specific category and year. It would be a good idea to be familiar with: Reading and Understanding HTML and CSS files. Implementing and Calling functions that return values. Getting and editing elements using the DOM. Event handling with forms using the DOM. Calling APIs using fetch and the standard API Promise Chain. Constructing API URLs with multiple query parameters. Authenticating API Calls with an API Key","title":"Project: Top Nine Movies"},{"location":"capstone/top9/#prerequisite-api-key-from-tmdb","text":"This project will require that you have a working API key from TMDB. If you don't currently have one, you can follow this guide to get one. To authenticate your API calls, we will add the API key in your API URL as a query parameter.","title":"Prerequisite: API key from TMDB"},{"location":"capstone/top9/#api-reference","text":"Check out this documentation for the TMDB API that you will be using. You don't need to look at all the possible query parameters, but try to take note on how you can filter by genre and year .","title":"API Reference"},{"location":"capstone/top9/#initial-state","text":"Initially appears with a grid of 9 placeholder images in 3 rows. Above the grid, there is a dropdown (select) menu for selecting a Genre. This dropdown defaults to \"Action\". Above the grid, there is also a text input for entering a Release Year. This is an optional input with no default value. There is also a button labeled \"Search!\", which will trigger the search.","title":"Initial State"},{"location":"capstone/top9/#expected-result","text":"After a user enters search criteria and clicks the \"Search!\" button, the application should query TMDB's Discover API for movies that match the criteria. The movies should be returned in order of decreasing popularity, with the most popular movies returned first. The 9 placeholder images in the grid should be replaced with cover images of the top 9 movies matching the provided criteria.","title":"Expected Result"},{"location":"capstone/top9/#instructions","text":"","title":"Instructions"},{"location":"capstone/top9/#part-0-inspect-the-provided-starter-files-and-add-your-api-key","text":"The first step in any project where there is starter code is to make sure you understand what the current code contains and what it is doing. Read through index.html and styles.css and get a good idea of what they contain. Pay special attention to the HTML elements in the \"movies\" <div> , the \"genre\" <select> , and the \"year\" text <input> . Inspect script.js and look at the unimplemented functions. Take note that at the top, the BASE_URL for the API is given to you. Read through all of the comments that explain what each function should do. Replace the apiKey=\"PASTE_API_KEY_HERE\" with your actual API key from your TMDB account. The BASE_URL is built with this apiKey , so you won't have to do this with each API call yourself. Open index.html in Live Server, and move on to Part 1.","title":"Part 0: Inspect the provided starter files and add your API Key"},{"location":"capstone/top9/#need-to-change-up-the-instructions-below-to-use-jquery","text":"","title":"Need to change up the instructions below to use JQuery"},{"location":"capstone/top9/#part-1-calling-the-api","text":"We want to incrementally add functionality so that we can test and make sure everything works as we go. The first thing that we will do is make sure that our API calls are working before doing things like adding event listeners and query parameters. Implement the getMovies function with the standard API Promise Chain. Log the response to the console. Make sure that we are using the url parameter instead of the BASE_URL inside the function implementation. Underneath the getMovies implementation call getMovies with the BASE_URL . Save your code, and check to see that you see something simliar in your browser's Developer Console:","title":"Part 1: Calling the API"},{"location":"capstone/top9/#part-2-attaching-the-event-listener","text":"Since the API works properly, let's make it so that whenever the \"query\" form is submitted, we call our API using the function above. Delete the getMovies call we wrote in the last part. Add a \"submit\" event listener to the \"query\" form, and provide it with an event handler function that calls the getMovies function whenever the form is submitted. Don't forget to prevent the default behavior of submitting a form! Otherwise, the website will refresh every time you submit the form, and you won't see any output in the Developer Console! Save your code, and check to make sure that every time you click the \"Search!\" button, a new line appears in your Developer Console. In this example, I clicked the button 3 times:","title":"Part 2: Attaching the Event Listener"},{"location":"capstone/top9/#part-3-set-movie-posters-using-response","text":"After testing the above functionality, let's utilize the API data to change the placeholder images that we are displaying on the web page. Implement the setMoviePosters function so that it loops over the first 9 results in movies and changes the corresponding <img> element's src attribute to the poster URL. Take note that: The image url to set the movie poster image isn't fully stored in each movie object. Instead, a poster_path property contains the end portion of the URL. For more information on how this works, check out this documentation about it. Make sure to check out the comments above the setMoviePosters function to get a bit of pseudocode and explanation on how to implement it. Edit getMovies so that instead of logging the data to the console, we get the results array of movies it contains, and pass that array to the setMoviePosters function to display the movie posters. Ensure that when you click the \"Search!\" button, you see 9 movies on your screen: Since we haven't implemented any query parameters yet, if you click the \"Search!\" button multiple times, you will see the same results.","title":"Part 3: Set Movie Posters using Response"},{"location":"capstone/top9/#part-4-add-the-genre-query-parameter","text":"Pressing \"Search!\" and getting the exact same results every time isn't very useful to the user, so let's introduce the \"Genre\" Query Parameter. From the API Documentation at the top, you should have seen that there is a query parameter \"with_genres\", which takes a list of genre ID values. To save you the trouble, here's the list of Genre IDs we use in the select box: Action = 28 Adventure = 12 Animation = 16 Comedy = 35 Crime = 80 Documentary = 99 Drama = 18 Family = 10751 Fantasy = 14 History = 36 Horror = 27 Music = 10402 In index.html , the dropdown selection already maps each genre name to genre ID. But, if you'd like, you can look at the list of genres here by clicking \"Try It!\". Remember that to add query parameters to our API URL, we need to add a \"?\" to the end of our base URL first: \"https://example.com/api/?query=value\" Scroll to the bottom and look at the constructURL function, which takes a genre and year , and constructs a URL with them. Implement constructURL so that it appends the genre query parameter to the BASE_URL and returns it. Take note that in the <select> dropdown, there is no \"Any\" option, which means that selecting a genre is REQUIRED. Do you need a conditional to check if genre is an empty string? Verify that the function is working correctly by uncommenting the 2 example console.log statements for Part 4, and inspecting the output in the Developer Console. Once you have verified that it is correct, re-comment the example calls: In the \"submit\" event handler, get the genre selection from the DOM, and save it to a variable. Call constructURL with this variable, and save it to a new variable. Instead of calling getMovies with the BASE_URL , call it with the result of constructURL above. Save your code, and in Live Server, select some genres from the dropdown and click \"Search!\". Finally, select \"Music\" as your genre, and make sure that the result looks like this:","title":"Part 4: Add the \"Genre\" Query Parameter"},{"location":"capstone/top9/#part-5-add-the-year-query-parameter","text":"Finally, we want to allow our user to filter movies not only by genre, but optionally the Release Year of the movie, as well. Back in the documentation link, you should have seen a parameter called \"primary_release_year\". This is the query parameter we will be using. Remember that to add multiple query parameters, we need to separate them using \"&\" symbols: \"https://example.com/api/?query1=value1&query2=value2&...\" Head back to constructURL , and re-implement it by adding in the release year as well. Note that since \"Year Released\" is a text box and can be left empty, it is NOT required, which means that we will need to check if it exists prior to adding it in. Verify that the function is working correctly by uncommenting the 2 example console.log statements for Part 5, and inspecting the output in the Developer Console. Once you have verified that it is correct, re-comment the example calls: In the \"submit\" event handler, get the value of the \"Year Released\" text input, and save that to a variable as well. Now, pass both the genre and year to the constructURl call. Save, and test your code. Provide several different genres and release years to test on your own, then, provide \"Fantasy\" as the genre, and \"2011\" as the release year:","title":"Part 5: Add the \"Year\" Query Parameter"},{"location":"guides/scheduling-coaching-session/","text":"Scheduling a Coaching Session Scheduling a coaching session is really easy. You can simply go to the link below, and create a Calendly reservation: 1 : 1 Coaching Session Just make sure to schedule at most one per week . I have the most availability on Sundays, and limited availability Monday - Friday (excluding workshop days). Prepare for your session The coaching sessions are where you'll be able to get past any difficulties you're having, so come prepared with any questions! If you have questions with code, make sure to have your VS Code open with the things you're struggling with. Other than helping you through difficulties, the coaching sessions are where I'll be able to review your progress with the assignments and workshops and provide personalized advice or guidance with your code. During our final session we'll do a final review and I'll be able to provide you with steps on what to do next to reach your goals with coding.","title":"Scheduling a Coaching Session"},{"location":"guides/scheduling-coaching-session/#scheduling-a-coaching-session","text":"Scheduling a coaching session is really easy. You can simply go to the link below, and create a Calendly reservation: 1 : 1 Coaching Session Just make sure to schedule at most one per week . I have the most availability on Sundays, and limited availability Monday - Friday (excluding workshop days).","title":"Scheduling a Coaching Session"},{"location":"guides/scheduling-coaching-session/#prepare-for-your-session","text":"The coaching sessions are where you'll be able to get past any difficulties you're having, so come prepared with any questions! If you have questions with code, make sure to have your VS Code open with the things you're struggling with. Other than helping you through difficulties, the coaching sessions are where I'll be able to review your progress with the assignments and workshops and provide personalized advice or guidance with your code. During our final session we'll do a final review and I'll be able to provide you with steps on what to do next to reach your goals with coding.","title":"Prepare for your session"},{"location":"guides/starting-an-assignment/","text":"Starting an Assignment Steps to follow before each individual assignment. Only work on ONE assignment at a time, otherwise things can get messed up very quickly. This guide seems long, but after you get used to the workflow, it will take you 30 seconds to start an assignment. Introduction At AcquirEdge, you're going to learn a workflow used by almost every professional developer out there. This workflow is commonly referred to as the GitHub Flow . Key Concepts A handful of terms and concepts are important to understand while starting an assignment: files - Individual pieces of data stored on a computer, like .html documents, .jpg images, or .mp3 audio. directories - Commonly referred to as \"folders\" because of the icons used to represent them. Used to group together files and other directories . git - The command line version control tool used to manage our assignment solutions. repository - A collection of files and directories that git can manage. commit - A snapshot of a repository at some point in time. branch - An isolated timeline of commits GitHub - A web application built to let developers manage their repositories online and collaborate with others. pull - Download one or more commits from GitHub to your computer. Avoid these Mistakes Git is hard . Any profesional software developer would agree. But, as with many other things, Git is a necessary \"evil\" that will actually make your life easier -- as long as you're using it correctly. Here are some common mistakes you can avoid while practicing the GitHub flow and working on assignment solutions. If you can avoid these, your life will be easier. Don't rush or skip any steps outlined for you. Don't start working on more than one assignment solution at a time. Don't ignore the terminal output. Read carefully and ask questions if you don't understand something. Don't try random \"fixes\" for git that you find on Google before confirming with an instructor first. You are normally encouraged to figure things out on your own, but if you follow these steps properly, you won't need to \"fix\" any git problems. Don't make any changes to files on the GitHub website. Only change your files in VS Code. Don't forget that you can come back to this guide and re-read it anytime. Instructions Let's get started with starting an assignment. You should have received or have access to a .zip or .tar.gz file containing your assignment files prior to beginning these instructions. Detailed Instructions Note : Windows and MacOS are going to be using different shell applications, with MacOS using Terminal and Windows using Git Bash , which you installed during the onboarding guide. If you are a Windows user and see Terminal in the instructions, you can assume I mean Git Bash for you. Note : There is one set of instructions for both MacOS and Windows. Assume that Enter and Return are interchangable. Note : These steps might be confusing at first because your branch , solution directory , and assignment have the same name, but don't forget that directories and branches are NOT the same thing! (See above). Note : If you receive an error in your terminal, the first thing to check is if you made a typo . You can scroll up in your terminal to see your last command. Open your solutions repository in VS code . (This was covered in the onboarding guide ) Open the Integrated Terminal in VS Code by pressing CTRL + ` OR CMD + J . Switch to the main branch of your solutions repository with the following command. Type this command into the terminal and press ENTER . You should receive no errors. git switch main Pull any commits merged into the main branch on GitHub . For your first assignment, there won't be any. But do it anyways to start practicing. Type this command into the terminal and press Enter . You should recieve no errors, although you may be given a summary of the changes that were pulled if any. git pull origin main Create and switch to a new branch for the assignment you are doing. Your branch name should be the exact same name as the assignment itself. Run the below command and replace name-of-assignment with the name of the assignment. For example, if we're doing the \"example\" assignment, the name-of-assignment should be replaced with example . Or, if we're doing the \"variables-and-data\" assignment, replace it with variables-and-data instead. git checkout -b name-of-assignment Confirm that your new branch was created and that you are currently checked out to your new branch by running the command below. You should see a \" * \" symbol next to your newly created branch name. git branch Note: If you made a typo, use git branch -D name-of-branch to delete the bad branch, and start over from step 5. Locate the .zip or .tar.gz file provided by your instructor for the assignment you're attempting to start. Extract the folder and starter files . Follow the instructions below depending on your operating System. For macOS : Find the downloaded .zip or .tar.gz file (Usually in Downloads folder if you didn't move it) Double-click the file to extract it. A new folder with the name of the assignment will be created. Drag the new assignment folder into the Bottom of the left column in Visual Studio Code to copy the starter files into your solutions repository. For Windows : Find the downloaded .zip or .tar.gz file (Usually in Downloads folder if you didn't move it) Right-click the file to bring up the context menu. If you have 7zip downloaded, you should see an option to \"Extract all...\". (On Windows 11, you may need to click \"Show more options\" first). Click this option, and 7zip should offer to extract the folder to the same location as the original compreessed file. Click OK . A new folder with the name of the assignment will be created. You may need to scroll around your file Explorer to find it Drag the new assignment folder into the Bottom of the left column in Visual Studio Code to copy the starter files into your solutions repository. If you get the option to either \"Add Folder to Workspace\" or \"Copy Folder\", select the \"Copy Folder\" option. The new assignment files in your VS Code should turn green . Back in the Integrated terminal, run the following 2 commands to take a snapshot of your assignment before beginning. This will ensure that even if you forget to save some code and your computer crashes, you at least won't have to go through the setup instructions again. Replace name-of-assignment with the name of your current assignment. git add . git commit -m \"name-of-assignment initial commit\" Carefully read the Learning Objectives section of an assignment before beginning. These are your learning objectives, and you will be asked quiz questions at the end of the assignment on these objectives. Complete the assignment according to the instructions. Make sure to extract the files into your solutions repository , which you set up in your onboarding instructions.","title":"Starting an Assignment"},{"location":"guides/starting-an-assignment/#starting-an-assignment","text":"Steps to follow before each individual assignment. Only work on ONE assignment at a time, otherwise things can get messed up very quickly. This guide seems long, but after you get used to the workflow, it will take you 30 seconds to start an assignment.","title":"Starting an Assignment"},{"location":"guides/starting-an-assignment/#introduction","text":"At AcquirEdge, you're going to learn a workflow used by almost every professional developer out there. This workflow is commonly referred to as the GitHub Flow .","title":"Introduction"},{"location":"guides/starting-an-assignment/#key-concepts","text":"A handful of terms and concepts are important to understand while starting an assignment: files - Individual pieces of data stored on a computer, like .html documents, .jpg images, or .mp3 audio. directories - Commonly referred to as \"folders\" because of the icons used to represent them. Used to group together files and other directories . git - The command line version control tool used to manage our assignment solutions. repository - A collection of files and directories that git can manage. commit - A snapshot of a repository at some point in time. branch - An isolated timeline of commits GitHub - A web application built to let developers manage their repositories online and collaborate with others. pull - Download one or more commits from GitHub to your computer.","title":"Key Concepts"},{"location":"guides/starting-an-assignment/#avoid-these-mistakes","text":"Git is hard . Any profesional software developer would agree. But, as with many other things, Git is a necessary \"evil\" that will actually make your life easier -- as long as you're using it correctly. Here are some common mistakes you can avoid while practicing the GitHub flow and working on assignment solutions. If you can avoid these, your life will be easier. Don't rush or skip any steps outlined for you. Don't start working on more than one assignment solution at a time. Don't ignore the terminal output. Read carefully and ask questions if you don't understand something. Don't try random \"fixes\" for git that you find on Google before confirming with an instructor first. You are normally encouraged to figure things out on your own, but if you follow these steps properly, you won't need to \"fix\" any git problems. Don't make any changes to files on the GitHub website. Only change your files in VS Code. Don't forget that you can come back to this guide and re-read it anytime.","title":"Avoid these Mistakes"},{"location":"guides/starting-an-assignment/#instructions","text":"Let's get started with starting an assignment. You should have received or have access to a .zip or .tar.gz file containing your assignment files prior to beginning these instructions.","title":"Instructions"},{"location":"guides/starting-an-assignment/#detailed-instructions","text":"Note : Windows and MacOS are going to be using different shell applications, with MacOS using Terminal and Windows using Git Bash , which you installed during the onboarding guide. If you are a Windows user and see Terminal in the instructions, you can assume I mean Git Bash for you. Note : There is one set of instructions for both MacOS and Windows. Assume that Enter and Return are interchangable. Note : These steps might be confusing at first because your branch , solution directory , and assignment have the same name, but don't forget that directories and branches are NOT the same thing! (See above). Note : If you receive an error in your terminal, the first thing to check is if you made a typo . You can scroll up in your terminal to see your last command. Open your solutions repository in VS code . (This was covered in the onboarding guide ) Open the Integrated Terminal in VS Code by pressing CTRL + ` OR CMD + J . Switch to the main branch of your solutions repository with the following command. Type this command into the terminal and press ENTER . You should receive no errors. git switch main Pull any commits merged into the main branch on GitHub . For your first assignment, there won't be any. But do it anyways to start practicing. Type this command into the terminal and press Enter . You should recieve no errors, although you may be given a summary of the changes that were pulled if any. git pull origin main Create and switch to a new branch for the assignment you are doing. Your branch name should be the exact same name as the assignment itself. Run the below command and replace name-of-assignment with the name of the assignment. For example, if we're doing the \"example\" assignment, the name-of-assignment should be replaced with example . Or, if we're doing the \"variables-and-data\" assignment, replace it with variables-and-data instead. git checkout -b name-of-assignment Confirm that your new branch was created and that you are currently checked out to your new branch by running the command below. You should see a \" * \" symbol next to your newly created branch name. git branch Note: If you made a typo, use git branch -D name-of-branch to delete the bad branch, and start over from step 5. Locate the .zip or .tar.gz file provided by your instructor for the assignment you're attempting to start. Extract the folder and starter files . Follow the instructions below depending on your operating System. For macOS : Find the downloaded .zip or .tar.gz file (Usually in Downloads folder if you didn't move it) Double-click the file to extract it. A new folder with the name of the assignment will be created. Drag the new assignment folder into the Bottom of the left column in Visual Studio Code to copy the starter files into your solutions repository. For Windows : Find the downloaded .zip or .tar.gz file (Usually in Downloads folder if you didn't move it) Right-click the file to bring up the context menu. If you have 7zip downloaded, you should see an option to \"Extract all...\". (On Windows 11, you may need to click \"Show more options\" first). Click this option, and 7zip should offer to extract the folder to the same location as the original compreessed file. Click OK . A new folder with the name of the assignment will be created. You may need to scroll around your file Explorer to find it Drag the new assignment folder into the Bottom of the left column in Visual Studio Code to copy the starter files into your solutions repository. If you get the option to either \"Add Folder to Workspace\" or \"Copy Folder\", select the \"Copy Folder\" option. The new assignment files in your VS Code should turn green . Back in the Integrated terminal, run the following 2 commands to take a snapshot of your assignment before beginning. This will ensure that even if you forget to save some code and your computer crashes, you at least won't have to go through the setup instructions again. Replace name-of-assignment with the name of your current assignment. git add . git commit -m \"name-of-assignment initial commit\" Carefully read the Learning Objectives section of an assignment before beginning. These are your learning objectives, and you will be asked quiz questions at the end of the assignment on these objectives. Complete the assignment according to the instructions. Make sure to extract the files into your solutions repository , which you set up in your onboarding instructions.","title":"Detailed Instructions"},{"location":"guides/submitting-an-assignment/","text":"Submitting an Assignment Steps to follow after each individual assignment. Only work on ONE assignment at a time, otherwise things can get messed up pretty quickly. This guide seems long, but after you get used to the workflow, it should go past pretty quickly. Key Concepts A handful of terms and concepts that are important to understand while submitting an assignment: Pull Request : A request to merge code changes from one branch into another, often reviewed by other developers. origin : The default nickname for the remote repository where your local repository is connected to. Staging a file : Preparing a file for commit by adding it to the staging area. Tracked files : Files that Git is monitoring for changes. commit : A snapshot of a repository at some point in time. Instructions Note : There is one set of instructions for both MacOS and Windows. Assume that Enter and Return are interchangable. Note : These steps might be confusing at first because your branch , solution directory , and assignment have the same name, but don't forget that directories and branches are NOT the same thing! (See above). Note : If you receive an error in your terminal, the first thing to check is if you made a typo . You can scroll up in your terminal to see your last command. Take a screenshot or record a screen capture demonstrating your solution if you have not already. Depending on the nature of the assignment, make sure to take a screenshot of the developer console or webpage. Until we reach the HTML and CSS Assignment, most of the time you will be screenshotting the developer console. How to take a screenshot: Mac , Windows Open the Integrated Terminal in VS Code by pressing CTRL + ` OR CMD + J . In the terminal, verify that your prompt ends with the name of your solutions repository. It should look something like this: .../fundamentals-first-solutions-YOUR_GITHUB_USERNAME (name-of-assignment) $ If your prompt does not say the branch name in the () parentheses, then you skipped a step during the starting-an-assignment guide. Careful! You can fix it now if needed. Otherwise, if the branch name is correct, go to the next step. switch to the main branch of your repository. git switch main Create a new branch for the assignment For example, if your solution is for the example assignment, then run the following command. git branch example switch to the new branch for the assignment For example, if your solution is for the example assignment, then run the following command. git switch example Your terminal prompt should now show the correct branch name in the () parentheses. Stage your solution directory for commit. The git status command should list your solution directory as Untracked or modified . Run the following command to check. git status Stage the solutions by running git add . This is not adding a branch, this is adding ALL untracked files in the repository. git add . Note : Do not forget the . in the command git add . . The . means \"all changed files\", so we are staging all changed files with this command. Double-check the staged files before committing . Your new solution's files should be the only files listed under Changes to be committed: . git status Commit your changes with a meaningful message. If you receive an error message while committing, read it very carefully before asking for help. You might be able to figure out what it means. **If the error requires you to change any of your files, repeat the saving and git add steps above before committing again. For example, if your solution is for the example assignment, then your commit message should be \"Completed example assignment.\" . Note : The quotation marks must match. If your commit appears to get \"stuck\" due to mismatched quotes, press Ctrl + C to cancel. git commit -m \"Completed example assignment\" If the commit succeeds and prints a summary of your added lines of code, then close all open code files in Visual Studio Code. Each file has a tab with an x at the top of the window. Leave VS Code open, but close any code files that you have open. Push the new commit to your repository in GitHub. This will upload your new files. For example, if your solution is for the example assignment, then you will push to the example branch on origin . git push -u origin example You should see a message that says something like: \"Branch example set up to track remote branch example from origin. \u26a0\ufe0f Reminder! Be sure to close open tabs in VS Code before continuing. Open a Pull Request on GitHub by visiting your solutions repository on github.com . Your repository is on your personal profile. Locate the Pull Requests tab near the top of your repository page and click it. Click the New Pull Request button. Set main as the base branch and your assignment branch as the compare branch by clicking the dropdowns. Click the Create Pull Request button. Give your Pull Request a title that makes it easy to identify who it's from and which assignment it's for. For example, if your name is Michael Jenkins , and the assignment is called example , then your Pull Request title should be \"example - Michael Jenkins\". IMPORTANT : When submitting code from a workshop, just click Merge pull request now, and move on to step 12. ONLY DO THIS IF IT CODE FROM A WORKSHOP . Your instructor won't be reviewing your workshop code. Click the \u2699\ufe0f next to Assignees on the right hand side, and click on your instructor's name to add them to this Pull Request . Do not forget this, or your instructor will not be able to review your changes and provide feedback. Attach the screenshot(s) or screen capture(s) of your working solution to the Pull Request. This can be accomplished by either dragging the image into the comment box or by clicking the bar at the bottom of the comment box to attach files. Click the Create Pull Request button to confirm BUT DO NOT MERGE THE PULL REQUEST when you see the button for merging. Wait to receive an approval review before merging the Pull Request \u26a0\ufe0f Reminder! Be sure to close the open tabs in VS Code before continuing. Back in Visual Studio Code's integrated terminal, return to the main branch of your repository with git switch . git switch main Note: Your exercise folder may seem to \"disappear\" from Visual Studio Code. This is normal. This is happening because your commit was not made to the main branch, but to the name-of-assignment branch that you created when you worked on the assignment. After the Pull Request you made above is reviewed, approved, and merged, you can run git pull on the main branch and you will see your assignment files re-appear. Done! \ud83d\udc4d Your solution has been submitted for review. Wait to recieve a review before merging your Pull Request. If you have another assignment to work on, you can go ahead and work on that now. Getting Feedback Now that your solution has been submitted, you will eventually receive feedback from an instructor. There are two possible outcomes for your submission. The Pull Request is Approved , in which case you would return to your Pull Request, and click Merge pull request . Your instructor will not merge this for you. You receive some feedback comments on your code changes. In this case, you would need to go back, make the requested changes, and complete Steps 5 - 9 above to commit and push them. You can use a different commit message like \"Updated example assignment\" . You do not need to open a new Pull Request. Step 9 will update your existing Pull Request. Once you are done, send a Discord Message to your instructor to notify them of your changes.","title":"Submitting an Assignment"},{"location":"guides/submitting-an-assignment/#submitting-an-assignment","text":"Steps to follow after each individual assignment. Only work on ONE assignment at a time, otherwise things can get messed up pretty quickly. This guide seems long, but after you get used to the workflow, it should go past pretty quickly.","title":"Submitting an Assignment"},{"location":"guides/submitting-an-assignment/#key-concepts","text":"A handful of terms and concepts that are important to understand while submitting an assignment: Pull Request : A request to merge code changes from one branch into another, often reviewed by other developers. origin : The default nickname for the remote repository where your local repository is connected to. Staging a file : Preparing a file for commit by adding it to the staging area. Tracked files : Files that Git is monitoring for changes. commit : A snapshot of a repository at some point in time.","title":"Key Concepts"},{"location":"guides/submitting-an-assignment/#instructions","text":"Note : There is one set of instructions for both MacOS and Windows. Assume that Enter and Return are interchangable. Note : These steps might be confusing at first because your branch , solution directory , and assignment have the same name, but don't forget that directories and branches are NOT the same thing! (See above). Note : If you receive an error in your terminal, the first thing to check is if you made a typo . You can scroll up in your terminal to see your last command. Take a screenshot or record a screen capture demonstrating your solution if you have not already. Depending on the nature of the assignment, make sure to take a screenshot of the developer console or webpage. Until we reach the HTML and CSS Assignment, most of the time you will be screenshotting the developer console. How to take a screenshot: Mac , Windows Open the Integrated Terminal in VS Code by pressing CTRL + ` OR CMD + J . In the terminal, verify that your prompt ends with the name of your solutions repository. It should look something like this: .../fundamentals-first-solutions-YOUR_GITHUB_USERNAME (name-of-assignment) $ If your prompt does not say the branch name in the () parentheses, then you skipped a step during the starting-an-assignment guide. Careful! You can fix it now if needed. Otherwise, if the branch name is correct, go to the next step. switch to the main branch of your repository. git switch main Create a new branch for the assignment For example, if your solution is for the example assignment, then run the following command. git branch example switch to the new branch for the assignment For example, if your solution is for the example assignment, then run the following command. git switch example Your terminal prompt should now show the correct branch name in the () parentheses. Stage your solution directory for commit. The git status command should list your solution directory as Untracked or modified . Run the following command to check. git status Stage the solutions by running git add . This is not adding a branch, this is adding ALL untracked files in the repository. git add . Note : Do not forget the . in the command git add . . The . means \"all changed files\", so we are staging all changed files with this command. Double-check the staged files before committing . Your new solution's files should be the only files listed under Changes to be committed: . git status Commit your changes with a meaningful message. If you receive an error message while committing, read it very carefully before asking for help. You might be able to figure out what it means. **If the error requires you to change any of your files, repeat the saving and git add steps above before committing again. For example, if your solution is for the example assignment, then your commit message should be \"Completed example assignment.\" . Note : The quotation marks must match. If your commit appears to get \"stuck\" due to mismatched quotes, press Ctrl + C to cancel. git commit -m \"Completed example assignment\" If the commit succeeds and prints a summary of your added lines of code, then close all open code files in Visual Studio Code. Each file has a tab with an x at the top of the window. Leave VS Code open, but close any code files that you have open. Push the new commit to your repository in GitHub. This will upload your new files. For example, if your solution is for the example assignment, then you will push to the example branch on origin . git push -u origin example You should see a message that says something like: \"Branch example set up to track remote branch example from origin. \u26a0\ufe0f Reminder! Be sure to close open tabs in VS Code before continuing. Open a Pull Request on GitHub by visiting your solutions repository on github.com . Your repository is on your personal profile. Locate the Pull Requests tab near the top of your repository page and click it. Click the New Pull Request button. Set main as the base branch and your assignment branch as the compare branch by clicking the dropdowns. Click the Create Pull Request button. Give your Pull Request a title that makes it easy to identify who it's from and which assignment it's for. For example, if your name is Michael Jenkins , and the assignment is called example , then your Pull Request title should be \"example - Michael Jenkins\". IMPORTANT : When submitting code from a workshop, just click Merge pull request now, and move on to step 12. ONLY DO THIS IF IT CODE FROM A WORKSHOP . Your instructor won't be reviewing your workshop code. Click the \u2699\ufe0f next to Assignees on the right hand side, and click on your instructor's name to add them to this Pull Request . Do not forget this, or your instructor will not be able to review your changes and provide feedback. Attach the screenshot(s) or screen capture(s) of your working solution to the Pull Request. This can be accomplished by either dragging the image into the comment box or by clicking the bar at the bottom of the comment box to attach files. Click the Create Pull Request button to confirm BUT DO NOT MERGE THE PULL REQUEST when you see the button for merging. Wait to receive an approval review before merging the Pull Request \u26a0\ufe0f Reminder! Be sure to close the open tabs in VS Code before continuing. Back in Visual Studio Code's integrated terminal, return to the main branch of your repository with git switch . git switch main Note: Your exercise folder may seem to \"disappear\" from Visual Studio Code. This is normal. This is happening because your commit was not made to the main branch, but to the name-of-assignment branch that you created when you worked on the assignment. After the Pull Request you made above is reviewed, approved, and merged, you can run git pull on the main branch and you will see your assignment files re-appear. Done! \ud83d\udc4d Your solution has been submitted for review. Wait to recieve a review before merging your Pull Request. If you have another assignment to work on, you can go ahead and work on that now.","title":"Instructions"},{"location":"guides/submitting-an-assignment/#getting-feedback","text":"Now that your solution has been submitted, you will eventually receive feedback from an instructor. There are two possible outcomes for your submission. The Pull Request is Approved , in which case you would return to your Pull Request, and click Merge pull request . Your instructor will not merge this for you. You receive some feedback comments on your code changes. In this case, you would need to go back, make the requested changes, and complete Steps 5 - 9 above to commit and push them. You can use a different commit message like \"Updated example assignment\" . You do not need to open a new Pull Request. Step 9 will update your existing Pull Request. Once you are done, send a Discord Message to your instructor to notify them of your changes.","title":"Getting Feedback"},{"location":"unit-0/example/","text":"Example Assignment This assignment is to help you understand the workflow of an assignment in this program. Before you begin \u26a0\ufe0fComplete the Onboarding Guide First\u26a0\ufe0f If you haven't already, you MUST complete the onboarding guide prior to the technology check. Follow the Assignment Start Guide You should have received an example.zip file from your instructor which contains the required files for this exercise. Make sure to follow the starting an exercise guide to begin this exercise. Exercise Instructions Part 1: Inspect the File Structure Most of your assignments will contain the same, or very similar structures as this example assignment. You will have: 1 directory named \"examples\" where you can play around with HTML, CSS, and JavaScript code. This \"examples\" directory will not be reviewed in your Pull Request when you submit an assignment, so make sure to use it to test code from our examples or just play around with some testing code. 1 or more directories containing HTML, CSS, and JavaScript code. These directories will be where you complete exercises for the assignments. 1 file called quiz.md which contains some basic details and the quiz questions to complete while or after you complete the assignment. Open quiz.md in VS Code. Part 2: Technology Check For this section, we'll be doing a quick technology check to make sure you have everything set up properly. In these instructions, you will be asked to take several screenshots. Make sure to save these screenshots, since you will need to attach them to your Pull Request when submitting the assignment . Open up Google Chrome and head to github.com while logged in to your account and with your profile page open. Take a screenshot of your profile page. Open Terminal (MacOS) or Git Bash (Windows) and run the command below. If you get an error, let your instructor know immediately or send them a message on Discord. After running this command, take a screenshot of the Terminal or Git Bash window with the output. Open the Discord App on your computer and head to the Fundamentals First Server. You should see a category called \" COHORT-XXXX \", which contains a channel called \" discussion \". In the discussion channel, send an introduction message including your name, favorite hobby, and why you want to learn to code. Only your instructor and cohort-mates will see this message. Open your solutions repository in Visual Studio Code , and complete the following: Verify that you see a \ud83d\udda5\ufe0f symbol at the bottom left corner instead of a \u2699\ufe0f symbol. Open up the Extensions on the menu on the left, and verify that the following extensions are installed: HTML CSS Support HTML Snippets Live Preview Live Server Prettier - Code formatter Finally, take a screenshot of your Visual Studio Code window with the Extensions tab still open. Windows users only : Open 7zip and take a screenshot of the window that opens. Part 3: Quiz and Verification The questions in quiz.md are pretty simple this time. Just to make sure that you've completed the technology check and are used to taking screenshots for your pull requests . Open the quiz.md file in Visual Studio Code, and answer the applicable questions. Submitting The Assignment To submit your assignment, we will continue to use GitHub to create a Pull Request , which your instructor will review before you merge your code into the main branch of your solutions repository . Follow the instructions for submitting an assignment Note: When you reach Step 11 and are instructed to attach the screenshots of your working solution, attach all of the screenshots you took in Part 2 above.","title":"Example"},{"location":"unit-0/example/#example-assignment","text":"This assignment is to help you understand the workflow of an assignment in this program.","title":"Example Assignment"},{"location":"unit-0/example/#before-you-begin","text":"","title":"Before you begin"},{"location":"unit-0/example/#complete-the-onboarding-guide-first","text":"If you haven't already, you MUST complete the onboarding guide prior to the technology check.","title":"\u26a0\ufe0fComplete the Onboarding Guide First\u26a0\ufe0f"},{"location":"unit-0/example/#follow-the-assignment-start-guide","text":"You should have received an example.zip file from your instructor which contains the required files for this exercise. Make sure to follow the starting an exercise guide to begin this exercise.","title":"Follow the Assignment Start Guide"},{"location":"unit-0/example/#exercise-instructions","text":"","title":"Exercise Instructions"},{"location":"unit-0/example/#part-1-inspect-the-file-structure","text":"Most of your assignments will contain the same, or very similar structures as this example assignment. You will have: 1 directory named \"examples\" where you can play around with HTML, CSS, and JavaScript code. This \"examples\" directory will not be reviewed in your Pull Request when you submit an assignment, so make sure to use it to test code from our examples or just play around with some testing code. 1 or more directories containing HTML, CSS, and JavaScript code. These directories will be where you complete exercises for the assignments. 1 file called quiz.md which contains some basic details and the quiz questions to complete while or after you complete the assignment. Open quiz.md in VS Code.","title":"Part 1: Inspect the File Structure"},{"location":"unit-0/example/#part-2-technology-check","text":"For this section, we'll be doing a quick technology check to make sure you have everything set up properly. In these instructions, you will be asked to take several screenshots. Make sure to save these screenshots, since you will need to attach them to your Pull Request when submitting the assignment . Open up Google Chrome and head to github.com while logged in to your account and with your profile page open. Take a screenshot of your profile page. Open Terminal (MacOS) or Git Bash (Windows) and run the command below. If you get an error, let your instructor know immediately or send them a message on Discord. After running this command, take a screenshot of the Terminal or Git Bash window with the output. Open the Discord App on your computer and head to the Fundamentals First Server. You should see a category called \" COHORT-XXXX \", which contains a channel called \" discussion \". In the discussion channel, send an introduction message including your name, favorite hobby, and why you want to learn to code. Only your instructor and cohort-mates will see this message. Open your solutions repository in Visual Studio Code , and complete the following: Verify that you see a \ud83d\udda5\ufe0f symbol at the bottom left corner instead of a \u2699\ufe0f symbol. Open up the Extensions on the menu on the left, and verify that the following extensions are installed: HTML CSS Support HTML Snippets Live Preview Live Server Prettier - Code formatter Finally, take a screenshot of your Visual Studio Code window with the Extensions tab still open. Windows users only : Open 7zip and take a screenshot of the window that opens.","title":"Part 2: Technology Check"},{"location":"unit-0/example/#part-3-quiz-and-verification","text":"The questions in quiz.md are pretty simple this time. Just to make sure that you've completed the technology check and are used to taking screenshots for your pull requests . Open the quiz.md file in Visual Studio Code, and answer the applicable questions.","title":"Part 3: Quiz and Verification"},{"location":"unit-0/example/#submitting-the-assignment","text":"To submit your assignment, we will continue to use GitHub to create a Pull Request , which your instructor will review before you merge your code into the main branch of your solutions repository . Follow the instructions for submitting an assignment Note: When you reach Step 11 and are instructed to attach the screenshots of your working solution, attach all of the screenshots you took in Part 2 above.","title":"Submitting The Assignment"},{"location":"unit-1/conditional-logic/","text":"Conditional Logic Objectives Use a conditional statement to make decisions based on data Use a prompt to collect input from a user Write a simple program that accepts user input and provides a response based on the user's input Utilize AND ( && ), OR ( || ), and NOT( ! ) Logical Operators Describe what is meant by a \"code block\" Key Terms prompt() a built-in function that asks the user to enter some text. let answer = prompt(\"What is your favorite color?\"); if...else statement a conditional statement to help you make decisions in code. It lets you run one code block if an if condition is true, or another code block if the if condition is false if condition an expression that evaluates to truthy or falsy, used to determine if a code block will be executed afterwards or not. if( skyColor === \"blue\") code block code between a { and } . One place where these are used are after an if condition, where a code block is executed if the preceding condition was truthy. if( skyColor === \"blue\") { console.log(\"no rain today\"); } && (AND) logical operator performs an AND operation between two boolean expressions and returns either true or false || (OR) logical operator performs an OR operation between two boolean expressions and returns either true or false ! (NOT) logical operator performs a NOT operation on a boolean expression and inverts it Conditional Logic Assignment Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. Conditionals Background Most programs are designed to perform different actions based on data. These \"conditional\" actions can be defined by if...else statements . The general format of these statements look like this: if ( FIRST CONDITION ) { FIRST CODE BLOCK } else if ( SECOND CONDITION ) { SECOND CODE BLOCK } else { DEFAULT CODE BLOCK IF ALL ABOVE CONDITIONS ARE FALSE } Each if or else if expression is made up of 2 parts: The if condition: The condition will contain a value or expression that evaluates to a boolean value. Often times, this will contain comparison or equality operators. The code block: Each if condition is associated with a code block, enclosed by curly braces {} . IMPORTANT: only one condition in an if...else block will be executed when your program runs. Even if multiple conditions are true, only the FIRST condition that returns true will execute its associated code block. ALSO IMPORTANT: notice that the else section is different because it doesn't include an associated condition. This is because the else clause acts like a \"catch-all\" so that when none of the conditions are true, the else code block will be executed. Let's take a look at an example. This code snippet will make one of 3 animal sounds based on the animal variable: let animal = \"cat\"; if (animal === \"dog\"){ console.log(\"WOOF!\"); } else if (animal === \"cat\"){ console.log(\"MEOW!\"); } else { console.log(\"...oink?\"); } Since we set the animal variable to \"cat\" this time, we're going to only see \"MEOW!\" on the console. If we had set the animal variable to \"frog\", there's no condition that matches \"frog\" , so the else clause would execute as the \"catch-all\" or default, and we'd see \"...oink?\" logged to the console. Conditional Logic Exercise Open index.html in Live Server and read the HTML code. Open up the Developer Console. Open script.js in VS Code. Declare a variable age and assign the number value representing your age to the variable. Below the age variable you declared, declare a variable isAdult , and do not assign to it any value. Below the isAdult variable declaration, use an if and else statement to check if age is less than 18 . If the parameter age is less than 18 , assign the boolean value false to isAdult , otherwise assign the value true to isAdult . Directly after the if...else statement, log the value of isAdult and check the console to see the value you returned from the function. Declare a new variable named score , and assign to it a value between 1 and 105 . Below the score variable you declared, declare a variable grade , and assign the value null to it. Using if and else , conduct the following checks on score : if score is less than 60 , assign the string \"F\" to score . if score is less than 70 , assign the string \"D\" to score . if score is less than 80 , assign the string \"C\" to score . if score is less than 90 , assign the string \"B\" to score . if score is less than 100 , assign the string \"A\" to score . Otherwise, assign the string \"A++\" to score . Directly after the above if...else statement, log score and grade to the console in this format: \"[score] : [grade]\". For example: 75:C Logical Operators and Prompts Background Prompts Prompts are a way that we can receive answers or input from the user. This is important when we want our program to react to a user's actions. Sometimes, we will want to ask for input from the user instead of hard-coding data into our programs. To get input from the user, we can use the prompt() function. The prompt() function takes a question in the form of a string , which we provide between the parentheses () , just like the console.log() function. Generally, we want to capture the user's response to a prompt, and we can do this by assigning the prompt call to a variable like this: let answer = prompt(\"Hi. What is your name?\"); console.log(\"Hello \" + answer + \"!\"); If the user responds with \"Bill\", then our console would log \"Hello Bill!\" in this case. Note: Prompts will ALWAYS return a string value for the user's answer, so sometimes if you want a number value, you would need to call parseInt to convert the string to a number. Combining this with what we know about conditional logic , we can now execute different code based on a user's input: // Prompt the user to enter their age let age = prompt(\"Please enter your age:\"); // Convert the input to a number age = parseInt(age); // Check the age and log the appropriate message if (age >= 65) { console.log(\"You are a senior.\"); } else if (age >= 18) { console.log(\"You are an adult.\"); } else { console.log(\"You are a minor.\"); } In the above example, we store the user's response in age , and then convert age to a number using parseInt with the next code statement. Then, based on the age of the user, we print whether they are a senior , adult , or minor . Note: Notice how we convert age to a number type using parseInt in this example, since prompt() will by default return a string type. Note: Try running this code and inputting 70 to the prompt. What do you see in the console? Although the number 70 is both greater than or equal to 65 and greater than or equal to 18 , you only see \"You are a senior.\" in the output because only the FIRST true condition executes it's code block. Now, let's move on to logical operators. Often times in our code, we will want to take an action based on more than one boolean condition. We can accomplish this by using Logical Operators . AND Operator For example, we can guess what type of animal we've encountered based on a combination of how many feet it stands on AND whether or not it can jump high. The logical AND ( && ) operator can help us here. Let's start by asking the user a question and storing their response. let twoFeetAnswer = prompt(\"Does this animal usually stand on two feet? Enter true or false\"); let standsOnTwoFeet = (twoFeetAnswer === \"true\"); standsOnTwoFeet will be a boolean with the value of true if the user's string response was \"true\" and false otherwise. Now, let's add a second question. let twoFeetAnswer = prompt(\"Does this animal usually stand on two feet? Enter true or false\"); let standsOnTwoFeet = (twoFeetAnswer === \"true\"); let jumpAnswer = prompt(\"Can this animal jump high? Enter true of false\"); let canItJumpHigh = (jumpAnswer === \"true\"); After the user responds to these prompts, we'll have two boolean values. If we use the && operator on these two values, we'll get a boolean result. The table below diagrams all the possibilities, as well as the what the result of performing a logical AND would give us. standsOnTwoFeet canItJumpHigh standsOnTwoFeet && canItJumpHigh true true true true false false false true false false false false As we can see in the table, we will only get a value of true for standsOnTwoFeet && canItJumpHigh if both of these variable are true . Knowing this, let's extend our code a bit. let twoFeetAnswer = prompt(\"Does this animal usually stand on two feet? Enter true or false\"); let standsOnTwoFeet = (twoFeetAnswer === \"true\"); let jumpAnswer = prompt(\"Can this animal jump high? Enter true of false\"); let canItJumpHigh = (jumpAnswer === \"true\"); if (standsOnTwoFeet && canItJumpHigh){ console.log(\"This might be a KANGAROO!\"); } else { console.log(\"This is definitely not a kangaroo.\"); } Using conditional logic, we're able to make an educated guess! But, what if we wanted to make this a bit more sophisticated? NOT Operator The NOT operator takes the form of ! in code, and it works slightly different than the AND operator, because it's used on only a single value at a time. For example, if we wanted to only concern ourselves with animals that do NOT stand on two feet, we could make another boolean value like this: let doesNotStandOnTwoFeet = !standsOnTwoFeet; Here is a table that shows possibilities of what doesNotStandOnTwoFeet will be, based on what standsOnTwoFeet is to start with. standsOnTwoFeet !standsOnTwoFeet true false false true The NOT operator just \"flips\" the boolean value to the opposite of what it was before. So, here's a version of our program that is now a bit more sophisticated: let twoFeetAnswer = prompt(\"Does this animal usually stand on two feet? Enter true or false\"); let standsOnTwoFeet = (twoFeetAnswer === \"true\"); let jumpAnswer = prompt(\"Can this animal jump high? Enter true of false\"); let canItJumpHigh = (jumpAnswer === \"true\"); let doesNotStandOnTwoFeet = !standsOnTwoFeet; if (standsOnTwoFeet && canItJumpHigh) { console.log(\"This might be a KANGAROO!\"); } else if (doesNotStandOnTwoFeet && canItJumpHigh) { console.log(\"This might be a FROG!\"); } else { console.log(\"This is definitely not a frog or a kangaroo.\"); } OR Operator The third and final logical operator we'll cover is the logical OR operator. Like the AND operatir, it requires two values, and it gives us a true value if at least one of the input values is true. The OR operator takes the form of || in our code. Let's imagine we wanted to write a slightly different program that would tell us whether or not an animal could jump high, based on the name of the animal: let animal = prompt(\"What is the name of your animal?\"); let isKangaroo = (animal === \"kangaroo\"); let isFrog = (animal === \"frog\"); if (isKangaroo || isFrog){ console.log(\"Your animal can definitely jump high!\"); } else { console.log(\"I am not sure if this animal can jump high or not.\"); } Here is a table showing all of the possibilities: isKangaroo isFrog isKangaroo OR isFrog true true true true false true false true true false false false As you can see, we'll get a value of true for isKangaroo || isFrog as long as at least one of the input values is true. Truth Table The rules for these 3 boolean operators are often described in a standard Truth Table . In this table, simply consider p and q to be two boolean values. p q !p p OR q p AND q true true false true true true false false true false false true true true false false false true false false Complete the Logical Operators and Prompts Exercise before moving forward. Logical Operators and Prompts Exercise Make sure that index.html is still opened with Live Server and open script.js in VS Code if it isn't already. Use prompt() to ask the user \"What season is it currently?\" and capture the answer in a newly declared variable named currentSeason . Using if and else , conduct the following checks on currentSeason : if currentSeason is equal to \"summer\" , log \"It's hot today.\" to the console. if currentSeason is equal to \"spring\" , log \"The flowers are blooming.\" to the console. if currentSeason is equal to \"fall\" , log \"The leaves are changing colors.\" to the console. if currentSeason is equal to \"winter\" , log \"It's cold today\" to the console. Otherwise, log \"Please enter a valid season next time.\" to the console. Save your code and refresh your browser. You should see a prompt asking you what the current season is. Answer the prompt, and check the console to see if the correct message was logged. Use prompt() to ask the user \"What day of the week is it?\" and capture the answer in a newly declared variable named dayOfTheWeek . Hint: If the first prompt that asks you about the season keeps coming up, consider commenting it out until you complete the rest of the exercise. Using if...else statement and logical operators, check to see if dayOfTheWeek is equal to \"saturday\" OR equal to \"sunday\" . if dayOfTheWeek is equal to \"saturday\" OR \"sunday\" , log \"Have a good weekend!\" to the console otherwise, log \"It's a weekday!\" to the console. Save your code and refresh your browser, and answer the two prompts with a valid season and day of the week, respectively. Take a screenshot of the console output. It should look something like this: Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Conditional Logic"},{"location":"unit-1/conditional-logic/#conditional-logic","text":"","title":"Conditional Logic"},{"location":"unit-1/conditional-logic/#objectives","text":"Use a conditional statement to make decisions based on data Use a prompt to collect input from a user Write a simple program that accepts user input and provides a response based on the user's input Utilize AND ( && ), OR ( || ), and NOT( ! ) Logical Operators Describe what is meant by a \"code block\"","title":"Objectives"},{"location":"unit-1/conditional-logic/#key-terms","text":"prompt() a built-in function that asks the user to enter some text. let answer = prompt(\"What is your favorite color?\"); if...else statement a conditional statement to help you make decisions in code. It lets you run one code block if an if condition is true, or another code block if the if condition is false if condition an expression that evaluates to truthy or falsy, used to determine if a code block will be executed afterwards or not. if( skyColor === \"blue\") code block code between a { and } . One place where these are used are after an if condition, where a code block is executed if the preceding condition was truthy. if( skyColor === \"blue\") { console.log(\"no rain today\"); } && (AND) logical operator performs an AND operation between two boolean expressions and returns either true or false || (OR) logical operator performs an OR operation between two boolean expressions and returns either true or false ! (NOT) logical operator performs a NOT operation on a boolean expression and inverts it","title":"Key Terms"},{"location":"unit-1/conditional-logic/#conditional-logic-assignment","text":"Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"Conditional Logic Assignment"},{"location":"unit-1/conditional-logic/#conditionals-background","text":"Most programs are designed to perform different actions based on data. These \"conditional\" actions can be defined by if...else statements . The general format of these statements look like this: if ( FIRST CONDITION ) { FIRST CODE BLOCK } else if ( SECOND CONDITION ) { SECOND CODE BLOCK } else { DEFAULT CODE BLOCK IF ALL ABOVE CONDITIONS ARE FALSE } Each if or else if expression is made up of 2 parts: The if condition: The condition will contain a value or expression that evaluates to a boolean value. Often times, this will contain comparison or equality operators. The code block: Each if condition is associated with a code block, enclosed by curly braces {} . IMPORTANT: only one condition in an if...else block will be executed when your program runs. Even if multiple conditions are true, only the FIRST condition that returns true will execute its associated code block. ALSO IMPORTANT: notice that the else section is different because it doesn't include an associated condition. This is because the else clause acts like a \"catch-all\" so that when none of the conditions are true, the else code block will be executed. Let's take a look at an example. This code snippet will make one of 3 animal sounds based on the animal variable: let animal = \"cat\"; if (animal === \"dog\"){ console.log(\"WOOF!\"); } else if (animal === \"cat\"){ console.log(\"MEOW!\"); } else { console.log(\"...oink?\"); } Since we set the animal variable to \"cat\" this time, we're going to only see \"MEOW!\" on the console. If we had set the animal variable to \"frog\", there's no condition that matches \"frog\" , so the else clause would execute as the \"catch-all\" or default, and we'd see \"...oink?\" logged to the console.","title":"Conditionals Background"},{"location":"unit-1/conditional-logic/#conditional-logic-exercise","text":"Open index.html in Live Server and read the HTML code. Open up the Developer Console. Open script.js in VS Code. Declare a variable age and assign the number value representing your age to the variable. Below the age variable you declared, declare a variable isAdult , and do not assign to it any value. Below the isAdult variable declaration, use an if and else statement to check if age is less than 18 . If the parameter age is less than 18 , assign the boolean value false to isAdult , otherwise assign the value true to isAdult . Directly after the if...else statement, log the value of isAdult and check the console to see the value you returned from the function. Declare a new variable named score , and assign to it a value between 1 and 105 . Below the score variable you declared, declare a variable grade , and assign the value null to it. Using if and else , conduct the following checks on score : if score is less than 60 , assign the string \"F\" to score . if score is less than 70 , assign the string \"D\" to score . if score is less than 80 , assign the string \"C\" to score . if score is less than 90 , assign the string \"B\" to score . if score is less than 100 , assign the string \"A\" to score . Otherwise, assign the string \"A++\" to score . Directly after the above if...else statement, log score and grade to the console in this format: \"[score] : [grade]\". For example: 75:C","title":"Conditional Logic Exercise"},{"location":"unit-1/conditional-logic/#logical-operators-and-prompts-background","text":"","title":"Logical Operators and Prompts Background"},{"location":"unit-1/conditional-logic/#prompts","text":"Prompts are a way that we can receive answers or input from the user. This is important when we want our program to react to a user's actions. Sometimes, we will want to ask for input from the user instead of hard-coding data into our programs. To get input from the user, we can use the prompt() function. The prompt() function takes a question in the form of a string , which we provide between the parentheses () , just like the console.log() function. Generally, we want to capture the user's response to a prompt, and we can do this by assigning the prompt call to a variable like this: let answer = prompt(\"Hi. What is your name?\"); console.log(\"Hello \" + answer + \"!\"); If the user responds with \"Bill\", then our console would log \"Hello Bill!\" in this case. Note: Prompts will ALWAYS return a string value for the user's answer, so sometimes if you want a number value, you would need to call parseInt to convert the string to a number. Combining this with what we know about conditional logic , we can now execute different code based on a user's input: // Prompt the user to enter their age let age = prompt(\"Please enter your age:\"); // Convert the input to a number age = parseInt(age); // Check the age and log the appropriate message if (age >= 65) { console.log(\"You are a senior.\"); } else if (age >= 18) { console.log(\"You are an adult.\"); } else { console.log(\"You are a minor.\"); } In the above example, we store the user's response in age , and then convert age to a number using parseInt with the next code statement. Then, based on the age of the user, we print whether they are a senior , adult , or minor . Note: Notice how we convert age to a number type using parseInt in this example, since prompt() will by default return a string type. Note: Try running this code and inputting 70 to the prompt. What do you see in the console? Although the number 70 is both greater than or equal to 65 and greater than or equal to 18 , you only see \"You are a senior.\" in the output because only the FIRST true condition executes it's code block. Now, let's move on to logical operators. Often times in our code, we will want to take an action based on more than one boolean condition. We can accomplish this by using Logical Operators .","title":"Prompts"},{"location":"unit-1/conditional-logic/#and-operator","text":"For example, we can guess what type of animal we've encountered based on a combination of how many feet it stands on AND whether or not it can jump high. The logical AND ( && ) operator can help us here. Let's start by asking the user a question and storing their response. let twoFeetAnswer = prompt(\"Does this animal usually stand on two feet? Enter true or false\"); let standsOnTwoFeet = (twoFeetAnswer === \"true\"); standsOnTwoFeet will be a boolean with the value of true if the user's string response was \"true\" and false otherwise. Now, let's add a second question. let twoFeetAnswer = prompt(\"Does this animal usually stand on two feet? Enter true or false\"); let standsOnTwoFeet = (twoFeetAnswer === \"true\"); let jumpAnswer = prompt(\"Can this animal jump high? Enter true of false\"); let canItJumpHigh = (jumpAnswer === \"true\"); After the user responds to these prompts, we'll have two boolean values. If we use the && operator on these two values, we'll get a boolean result. The table below diagrams all the possibilities, as well as the what the result of performing a logical AND would give us. standsOnTwoFeet canItJumpHigh standsOnTwoFeet && canItJumpHigh true true true true false false false true false false false false As we can see in the table, we will only get a value of true for standsOnTwoFeet && canItJumpHigh if both of these variable are true . Knowing this, let's extend our code a bit. let twoFeetAnswer = prompt(\"Does this animal usually stand on two feet? Enter true or false\"); let standsOnTwoFeet = (twoFeetAnswer === \"true\"); let jumpAnswer = prompt(\"Can this animal jump high? Enter true of false\"); let canItJumpHigh = (jumpAnswer === \"true\"); if (standsOnTwoFeet && canItJumpHigh){ console.log(\"This might be a KANGAROO!\"); } else { console.log(\"This is definitely not a kangaroo.\"); } Using conditional logic, we're able to make an educated guess! But, what if we wanted to make this a bit more sophisticated?","title":"AND Operator"},{"location":"unit-1/conditional-logic/#not-operator","text":"The NOT operator takes the form of ! in code, and it works slightly different than the AND operator, because it's used on only a single value at a time. For example, if we wanted to only concern ourselves with animals that do NOT stand on two feet, we could make another boolean value like this: let doesNotStandOnTwoFeet = !standsOnTwoFeet; Here is a table that shows possibilities of what doesNotStandOnTwoFeet will be, based on what standsOnTwoFeet is to start with. standsOnTwoFeet !standsOnTwoFeet true false false true The NOT operator just \"flips\" the boolean value to the opposite of what it was before. So, here's a version of our program that is now a bit more sophisticated: let twoFeetAnswer = prompt(\"Does this animal usually stand on two feet? Enter true or false\"); let standsOnTwoFeet = (twoFeetAnswer === \"true\"); let jumpAnswer = prompt(\"Can this animal jump high? Enter true of false\"); let canItJumpHigh = (jumpAnswer === \"true\"); let doesNotStandOnTwoFeet = !standsOnTwoFeet; if (standsOnTwoFeet && canItJumpHigh) { console.log(\"This might be a KANGAROO!\"); } else if (doesNotStandOnTwoFeet && canItJumpHigh) { console.log(\"This might be a FROG!\"); } else { console.log(\"This is definitely not a frog or a kangaroo.\"); }","title":"NOT Operator"},{"location":"unit-1/conditional-logic/#or-operator","text":"The third and final logical operator we'll cover is the logical OR operator. Like the AND operatir, it requires two values, and it gives us a true value if at least one of the input values is true. The OR operator takes the form of || in our code. Let's imagine we wanted to write a slightly different program that would tell us whether or not an animal could jump high, based on the name of the animal: let animal = prompt(\"What is the name of your animal?\"); let isKangaroo = (animal === \"kangaroo\"); let isFrog = (animal === \"frog\"); if (isKangaroo || isFrog){ console.log(\"Your animal can definitely jump high!\"); } else { console.log(\"I am not sure if this animal can jump high or not.\"); } Here is a table showing all of the possibilities: isKangaroo isFrog isKangaroo OR isFrog true true true true false true false true true false false false As you can see, we'll get a value of true for isKangaroo || isFrog as long as at least one of the input values is true.","title":"OR Operator"},{"location":"unit-1/conditional-logic/#truth-table","text":"The rules for these 3 boolean operators are often described in a standard Truth Table . In this table, simply consider p and q to be two boolean values. p q !p p OR q p AND q true true false true true true false false true false false true true true false false false true false false Complete the Logical Operators and Prompts Exercise before moving forward.","title":"Truth Table"},{"location":"unit-1/conditional-logic/#logical-operators-and-prompts-exercise","text":"Make sure that index.html is still opened with Live Server and open script.js in VS Code if it isn't already. Use prompt() to ask the user \"What season is it currently?\" and capture the answer in a newly declared variable named currentSeason . Using if and else , conduct the following checks on currentSeason : if currentSeason is equal to \"summer\" , log \"It's hot today.\" to the console. if currentSeason is equal to \"spring\" , log \"The flowers are blooming.\" to the console. if currentSeason is equal to \"fall\" , log \"The leaves are changing colors.\" to the console. if currentSeason is equal to \"winter\" , log \"It's cold today\" to the console. Otherwise, log \"Please enter a valid season next time.\" to the console. Save your code and refresh your browser. You should see a prompt asking you what the current season is. Answer the prompt, and check the console to see if the correct message was logged. Use prompt() to ask the user \"What day of the week is it?\" and capture the answer in a newly declared variable named dayOfTheWeek . Hint: If the first prompt that asks you about the season keeps coming up, consider commenting it out until you complete the rest of the exercise. Using if...else statement and logical operators, check to see if dayOfTheWeek is equal to \"saturday\" OR equal to \"sunday\" . if dayOfTheWeek is equal to \"saturday\" OR \"sunday\" , log \"Have a good weekend!\" to the console otherwise, log \"It's a weekday!\" to the console. Save your code and refresh your browser, and answer the two prompts with a valid season and day of the week, respectively. Take a screenshot of the console output. It should look something like this:","title":"Logical Operators and Prompts Exercise"},{"location":"unit-1/conditional-logic/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-1/introduction/","text":"Introduction Learning some basic concepts we need before diving into JavaScript coding. Objectives After completing this assignment, you will be able to: Understand basic HTML Create an HTML Skeleton Use the Developer Console of your web browser Run JavaScript code on your web browser Write a JavaScript comment Print data to the Developer Console using JavaScript Key Terms HTML Stands for H yper T ext M arkup L anguage. Used to define \"things\" on a webpage, like buttons, links, paragraphs, and headings. HTML Element A single building block of a web page that tells the web browser what to show. <h1></h1> HTML opening tag The start of an HTML element. <h1> HTML closing tag The end of an HTML element. </h1> h1 tag \"heading 1\", the largest (or most important) heading section on a web page. <h1>Heading 1</h1> HTML script element A script element is use din HTML to add or link to JavaScript code, allowing you to run JavaScript on an HTML page. <script src=\"script.js\"></script> Developer console The developer console is a tool in the web browser where you can see messages, errors, and run JavaScript code to test and debug your web pages. This is where we will find our \"console\" in console.log() . JavaScript A programming language that allows for web pages to be interactive and dynamic. JavaScript comment A note written in a JavaScript file that is not seen as code. Typically used by developers to explain something about code or prevent some code from running. built-in function provided functions like console.log() that you can call using their name and () . console.log() a built-in function that accepts a value to output to the console. console.log(\"Hello World!\"); Introduction Assignment Make sure to go through the guide to starting an assignment before continuing. HTML Basics This course is primarily focused on programming in JavaScript, which usually runs in web browsers. Because of this, it's necessary to understand a few basic concepts in HTML to understand how a webpage works, and how JavaScript is run on a webpage. For HTML Basics, read the following 2 pages of documentation: HTML Introduction HTML Basics Then, complete the Introduction Exercise: HTML Skeleton below. Introduction Exercise: HTML Skeleton Double check that you are on the correct branch before continuing. git status should say that you are on branch introduction . Open the exercise directory, where you will find 2 files: index.html and script.js . Currently, both of these files are empty, and you will fill them out throughout the exercises in this assignment. Open index.html , and create an HTML skeleton that includes the following: a <!DOCTYPE> declaration a <html> element a <head> element a <title> element that says \"HTML Skeleton Exercise\" a <body> element Add the text Introduction Assignment to the <title> tag. Add an <h1> element within the <body> that contains the text This is an HTML Skeleton . Save your file, then right click index.html in the VS Code File Explorer on the left, and select \"Open in Live Server\". This will open your index.html file in a new web browser tab. Verify that the title and heading are displaying properly. Example image below: After verifying, take a screenshot of your HTML Skeleton in the web browser and continue to the next section. HTML Script Tag and Basic JavaScript The HTML script tag is how we can load JavaScript code into an HTML document so that it runs in the web browser. For this section, read the following documentation before moving on to the next exercise: HTML script tag : Read above the \"Attributes\" section on this page. HTML script tag src attribute console.log() method HTML Console Object JavaScript Comments Then, complete the Introduction Exercise: Add JavaScript below. Introduction Exercise: Add JavaScript Back in the index.html file you worked on in the HTML Skeleton Exercise , add a <script> element within the <body> that has a src attribute of script.js . Note: Technically you can add JavaScript code directly inside the <script> element, but we won't be doing that in this course, since that's not the recommended way to write JavaScript. Open script.js , and add a console.log() statement which prints out the message \"I have added a script file using the src attribute!\" and save the file. On the next line, add a single line comment that says: // This is a single-line JavaScript comment Afterwards, add a multi-line comment with the following text: /* This is a multi-line comment. I can write as many lines of text as I want here. And none of it will be seen as JavaScript code. */ Finally, add a single line comment with code: // console.log(\"This should not print out since it's in a comment\"); Open index.html using Live Server (just like Step 6 in the HTML Skeleton Exercise above) if it's not already open. Anywhere on the page, right click and select the inspect option from the menu. Click on the console tag in the inspector. This is your Developer Console , and this is where you will view output from your JavaScript programs. Confirm that the console log message from above is showing in the your Developer Console. Note : You may see some error messages highlighted in red or yellow, such as \"Failed to load resource\". Don't worry. This should not affect your code. You should only worry if you see a JavaScript related error that points to your script.js file, like \"Uncaught TypeError\". Note : The shortcut to open the last-opened panel is F12 . So, since your last-opened panel should now be the console tab, you can use the F12 shortcut to open directly to the console tab next time. When your output matches the example below, you are ready to submit the exercise. Take a screenshot of your Developer Console before submitting your solution. Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Introduction"},{"location":"unit-1/introduction/#introduction","text":"Learning some basic concepts we need before diving into JavaScript coding.","title":"Introduction"},{"location":"unit-1/introduction/#objectives","text":"After completing this assignment, you will be able to: Understand basic HTML Create an HTML Skeleton Use the Developer Console of your web browser Run JavaScript code on your web browser Write a JavaScript comment Print data to the Developer Console using JavaScript","title":"Objectives"},{"location":"unit-1/introduction/#key-terms","text":"HTML Stands for H yper T ext M arkup L anguage. Used to define \"things\" on a webpage, like buttons, links, paragraphs, and headings. HTML Element A single building block of a web page that tells the web browser what to show. <h1></h1> HTML opening tag The start of an HTML element. <h1> HTML closing tag The end of an HTML element. </h1> h1 tag \"heading 1\", the largest (or most important) heading section on a web page. <h1>Heading 1</h1> HTML script element A script element is use din HTML to add or link to JavaScript code, allowing you to run JavaScript on an HTML page. <script src=\"script.js\"></script> Developer console The developer console is a tool in the web browser where you can see messages, errors, and run JavaScript code to test and debug your web pages. This is where we will find our \"console\" in console.log() . JavaScript A programming language that allows for web pages to be interactive and dynamic. JavaScript comment A note written in a JavaScript file that is not seen as code. Typically used by developers to explain something about code or prevent some code from running. built-in function provided functions like console.log() that you can call using their name and () . console.log() a built-in function that accepts a value to output to the console. console.log(\"Hello World!\");","title":"Key Terms"},{"location":"unit-1/introduction/#introduction-assignment","text":"Make sure to go through the guide to starting an assignment before continuing.","title":"Introduction Assignment"},{"location":"unit-1/introduction/#html-basics","text":"This course is primarily focused on programming in JavaScript, which usually runs in web browsers. Because of this, it's necessary to understand a few basic concepts in HTML to understand how a webpage works, and how JavaScript is run on a webpage. For HTML Basics, read the following 2 pages of documentation: HTML Introduction HTML Basics Then, complete the Introduction Exercise: HTML Skeleton below.","title":"HTML Basics"},{"location":"unit-1/introduction/#introduction-exercise-html-skeleton","text":"Double check that you are on the correct branch before continuing. git status should say that you are on branch introduction . Open the exercise directory, where you will find 2 files: index.html and script.js . Currently, both of these files are empty, and you will fill them out throughout the exercises in this assignment. Open index.html , and create an HTML skeleton that includes the following: a <!DOCTYPE> declaration a <html> element a <head> element a <title> element that says \"HTML Skeleton Exercise\" a <body> element Add the text Introduction Assignment to the <title> tag. Add an <h1> element within the <body> that contains the text This is an HTML Skeleton . Save your file, then right click index.html in the VS Code File Explorer on the left, and select \"Open in Live Server\". This will open your index.html file in a new web browser tab. Verify that the title and heading are displaying properly. Example image below: After verifying, take a screenshot of your HTML Skeleton in the web browser and continue to the next section.","title":"Introduction Exercise: HTML Skeleton"},{"location":"unit-1/introduction/#html-script-tag-and-basic-javascript","text":"The HTML script tag is how we can load JavaScript code into an HTML document so that it runs in the web browser. For this section, read the following documentation before moving on to the next exercise: HTML script tag : Read above the \"Attributes\" section on this page. HTML script tag src attribute console.log() method HTML Console Object JavaScript Comments Then, complete the Introduction Exercise: Add JavaScript below.","title":"HTML Script Tag and Basic JavaScript"},{"location":"unit-1/introduction/#introduction-exercise-add-javascript","text":"Back in the index.html file you worked on in the HTML Skeleton Exercise , add a <script> element within the <body> that has a src attribute of script.js . Note: Technically you can add JavaScript code directly inside the <script> element, but we won't be doing that in this course, since that's not the recommended way to write JavaScript. Open script.js , and add a console.log() statement which prints out the message \"I have added a script file using the src attribute!\" and save the file. On the next line, add a single line comment that says: // This is a single-line JavaScript comment Afterwards, add a multi-line comment with the following text: /* This is a multi-line comment. I can write as many lines of text as I want here. And none of it will be seen as JavaScript code. */ Finally, add a single line comment with code: // console.log(\"This should not print out since it's in a comment\"); Open index.html using Live Server (just like Step 6 in the HTML Skeleton Exercise above) if it's not already open. Anywhere on the page, right click and select the inspect option from the menu. Click on the console tag in the inspector. This is your Developer Console , and this is where you will view output from your JavaScript programs. Confirm that the console log message from above is showing in the your Developer Console. Note : You may see some error messages highlighted in red or yellow, such as \"Failed to load resource\". Don't worry. This should not affect your code. You should only worry if you see a JavaScript related error that points to your script.js file, like \"Uncaught TypeError\". Note : The shortcut to open the last-opened panel is F12 . So, since your last-opened panel should now be the console tab, you can use the F12 shortcut to open directly to the console tab next time. When your output matches the example below, you are ready to submit the exercise. Take a screenshot of your Developer Console before submitting your solution.","title":"Introduction Exercise: Add JavaScript"},{"location":"unit-1/introduction/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-1/variables-and-data/","text":"Variables and Data Objectives After completing this assignment, you will be able to: Understand the difference between variable declaration and variable assignment Assign and re-assign values to variables Describe the differences between strings, numbers, and booleans Understand the difference between null and undefined Use JavaScript to find a data value's type Convert a string into a number Perform arithmetic on a number Use comparison operators to create booleans in a program Key Terms data information stored digitally on a computer value one specific piece of data, like a name or a number variable a labeled reference to a data value operator a symbol or word that performs an action on one or more values, like adding numbers or comparing them expression a piece of code that calculates to a value, typically involving one or more operators variable assignment an expression that attaches a value to a variable x = 5 variable declaration the creation of a variable let x type the classification of a data value typeof operator a JavaScript operator that finds out the data type of a value or variable typeof \"this is a string\" typeof x string data type used for values that contains text \"hello world\" number data type used for values that contain numbers 5 concatenate joining together multiple strings using the + operator. \"hello\" + \"world!\" parseInt() built-in function to convert a string value to a number value parseInt(\"5\") boolean data type used to represent a condition. Can only have the values true or false true null data type used to represent nothing or no value. Has only one value null null undefined data type used for values that haven't been set yet or don't exist yet. Has only one value undefined undefined comparison operator produces a boolean value based on the relationship between two values x >= 5 strict equality operator The triple === sign; produces a boolean value based on if two values have the same data value AND data type. Recommended to use strict equality whenever you can. x === 5 loose equality operator The double == sign; produces a boolean value based on if two values have the same data value. Recommended to avoid loose equality whenever you can. x == 5 assignment operator The single = sign, used for assigning values to variables name = \"Alice\" primitive data types The most basic types of data values that can't be broken down into simpler parts. These include numbers, strings (text), booleans (condition), null (nothing), or undefined (no value set) Variables and Data Assignment In this assignment, we'll go over the basics of variables and data types in JavaScript. Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. Variables and Data Values Background A variable is a label you can reference in your code that points to a value. In this first set of examples all of our values are going to be strings. We'll talk more about strings shortly, but for now just know that strings are sets of characters contained by quotes. \"Hello World\" You can shoose just about any name you like for variables in your program by declaring them. For example, you could declare a variable called firstName like this: let firstName; All we're doing here is: \"a variable called firstName now exists\" in the program. Rules and Conventions for variable naming: The first character must be a letter or underscore( _ ) variable names can not contain spaces, symbols, or punctuation marks variable names are case sensitive; variables can not be named certain \"reserved keywords\" that are a part of the JavaScript language, such as \"let\", \"for\", or \"if\" the convention for naming variables is to use camelCase , which means the first letter of the first word in the variable is lowercase , and any following words are capitalized After you have declared a variable, you can assign it to any value you'd like by using the = operator. let firstName; firstName = \"Allan\"; The above example declares the variable on the first line and assigns it to the value \"Allan\" on the second line. The declaration and assignment can also be done together in a single line: let firstName = \"Allan\"; If we were to now console.log the variable called \"firstName\", our output would say \"Allan\" let firstName = \"Allan\"; // This will log \"Allan\" to the console console.log(firstName); Using console.log() is a handy way to \"look into\" our program and see what values our variables are holding while the program is running. You'll be using this trick a lot. Note: You only need to use the let reserved keyword when you are initially declaring a variable. After a variable has been declared, you can re-assign it to a different value at any point and no longer need to use the let keyword. // Declares firstName and assigns it to \"Allan\" let firstName = \"Allan\"; // Logs \"Allan\" console.log(firstName); // Re-assigns firstName to \"Chris\" firstName = \"Chris\"; // Logs \"Chris\" now console.log(firstName); Now, complete the Variables and Data Exercise: Values and Variables before moving forward. Variables and Data Exercise: Values and Variables Open index.html in Live Server and read the HTML code. Open up the Developer Console. Head to script.js . Declare a variable called fullName using let and assign it a string containing the text of your full name. Add a console.log() below your variable declaration that logs the value of fullName to the console. Save your code and take a look at your developer console. Strings and Numbers Background Every value in JavaScript has an associated data type. You can see a value's type by using the typeof operator like this. console.log(typoef \"Hello World\"); // logs \"string\" So far, all the values we've worked with have been of the type string . Strings are great when we want to keep track of text as values, but what about when we're dealing with numbers? let x = \"10\"; let y = \"3\"; console.log(x + y); // logs \"103\" You might expect the program above to log 13 , but it actually logs \"103\" . This is because the variables x and y point to string values, which we've indicated with the quotes \"\" . For string values, using the + operator between them will simply combine them together like two words. In programming, this is called string concatenation . IF we want to actually treat these two values like numbers, we need to remove the quotes: let x = 10; let y = 3; console.log(x + y); // logs 13 console.log(x - y); // logs 7 console.log(x * y); // logs 30 console.log(x / y); // logs 3.333333... console.log(x % y); // logs 1 console.log(x ** y) // logs 1000 The symbols between x and y above are called operators . The full statements x + y or x / y are called expressions , which calculate to a value when they are evaluated . Specifically, the ones I used above are called arithmetic operators , since they do math operations. Here's a table of all the arithmetic operators in JavaScript and what they do: Operator Description Usage + Addition : Adds two numbers or concatenates two strings x + y - Subtraction : Subtracts the second number from the first x - y * Multiplication : Multiplies two numbers x * y / Division : Divides the first number by the second x / y % Modulus : Calculates the remainder when the first number is divided by the second x % y ** Exponentiation : Takes the first number to the power of the second number x ** y ++ Increment : Adds 1 to a number x++ -- Decrement : Subtracts 1 from a number y-- Sometimes you will need to convert a value from one type to another. For example, consider the below example: let age = \"60\"; let laterAge = age + 4; console.log(\"In 4 years, you will be \" + laterAge); This program would log a statement that says \"In 4 years, you will be 604\" Clearly, this is not what we intended here. If we want JavaScript to actually add our two numbers, we need to convert our string to a number using the parseInt() function like this: let age = \"60\"; let laterAge = parseInt(age) + 4; console.log(\"In 4 years, you will be \" + laterAge); This time, we log the correct statement that says \"In 4 years, you will be 64\" Complete the Variables and Data Exercise: Strings and Numbers before moving forward. Variables and Data Exercise: Strings and Numbers Make sure that index.html is still opened with Live Server and open script.js in VS Code if it isn't already. Add another console.log statement below the previous one which logs the typoef the fullName variable, and confirm that when you refresh the page a second statement appears in the console that says \"string\" . Read about toUpperCase() and toLowerCase() . Add 2 more console.log statements below. One with fullName in all upper case, and the other with fullName in all lower case. Verify that the developer console contains the expected output. Declare another variable called stringAge and assign it your current age AS A STRING . Declare a new variable ageIn2Years and assign to it stringAge + 2 . Write a console.log statement that prints out the value of ageIn2Years . Then write another console.log statement underneath that prints out the typeof ageIn2Years . Save your file and refresh the browser. Does it correctly log your age in 2 years? On the next line, re-assign ageIn2Years using parseInt so that it now contains a number that represents your age in 2 years. Write a console.log statement to log the new value of ageIn2Years , then write another console.log statement to log the new typeof ageIn2Years . Save your code and refresh the browser. Does it now show your correct age in 2 years? Complete this task with what you know about arithmetic operators: Declare 2 variables named charge and payment and assign each of them a number value. payment should be a smaller number than charge . Subtract payment from charge and assign the result to a new variable named remaining . log the value of remaining to the console log the typeof remaning to the console Complete this task with what you know about arithmetic operators Declare 3 variables named tests , assignments and final and assign each of them a number value. Calculate the average of test , assignments , and final in one expression and assign the result to a new variable named grade . Hint: () parentheses can be used to group sub-expressions . log the value of grade to the console log the typoef grade to the console Booleans and Comparison Operators Background A 3rd type we haven't discussed yet is the boolean . A boolean type represents a condition of some sort, like whether it's raining outside, or whether a number is even. A boolean data type can only hold one of two values: true or false . We can assign a variable to a boolean like this: let isRaining = true; let is Snowing = false; Note: We do NOT use quotations like we do with strings. Booleans are often used to describe \"binary\" states of being, meaning there are only two possible choices. Either it is raining, or it is not at any given moment. Either a number is even, or it is odd. Comparison operators are symbols that are used for comparing two values, and they evaluate , or calculate, to boolean values. Here's a partial list, assuming that x = 5 : Operator Description Comparing Returns == loosely equal to (only equal value) x == 8 false x == 5 true x == \"5\" true === strictly equal to (equal value and type) x === 5 true x === \"5\" false != not loosly equal to x != 8 true !== not strictly equal to x !== 5 false x !== \"5\" true x !== 8 true > greater than x > 8 false < less than x < 8 true >= greater than or equal to x >= 8 false <= less than or equal to x <= 8 true Note : Notice that === has a completely different meaning from = by itself. === is a comparison operator that evaluates to true or false based on if two values are exactly equal, while = is used for assignment to a variable only, as you've seen so far. IMPORTANT : Take note of the difference between loose equality ( == ) and strict equality ( === ). == checks just the data value, whereas === checks both the data type and the data value. For our course, and when you code beyond this course, it's recommended to ONLY USE THE === operator . It's much safer and more precise to use. Assume that whenever we refer to checking equality, we mean strict equality. Additional Info: To read more about strict and loose quality, visit this link . Using these comparison operators, we can define boolean variables like this: let x = 1; let y = 2; let areEqual = (x === y); console.log(areEqual); // false let xGreater = (x > y); console.log(areEqual); // false let xLesser = (x < y); console.log(areEqual); // true Booleans also concatenate onto strings just like numbers do: let isFriday = false; console.log(\"Is today Friday? \" + isFriday); // Logs \"Is today Friday? false\" Complete the Variables and Data Exercise: Booleans and Comparison Operators before moving forward. Variables and Data Exercise: Booleans and Comparison Operators Continue working in script.js with index.html opened with Live Server. Declare a variable likesVegetables and assign to it a boolean that represents whether you like vegetables or not. On the next 2 lines, log the value of likesVegetables and the typeof likesVegetables to the console. Complete this task using what you know about booleans and comparison operators: Declare a variable named pH and assign it a number value between 0 and 14 . Use a less-than comparison operator to compare pH to 7 and assign the result to a new variable isAcidic . Something is considered acidic if its pH level is below 7. log the value of isAcidc to the console log the typeof isAcidic to the console Complete this task using what you know about booleans and comparison operators: Declare a variable numberOfSoldiers and assign it a number value. Use equality comparison to compare numberOfSoldiers to the number 300 and assign the result to a new variable named isSparta . Sparta had 300 soldiers in the battle of Thermopylae. log the value of isSparta to the console log the typeof isSparta to the console. Take a screenshot of your Developer Console. It should look something like this: Null and Undefined Background There are 2 more data types that we will go over today: null and undefined . Both of these data types have only one associated value, null , and undefined , respectively. These two data types are often confused with one another, since they mean close to the same thing, but not exactly. null represents nothing or an empty value. It is used when we want to specifically assign the value \"nothing\" to a variable. For example, this is how you would use null to represent someone with no middle name: let middleName = null; console.log(middleName); // Logs \"null undefined represents a data value that hasn't been set yet or doesn't exist. It could be set later or not. Because of the uncertainty of undefined , it's best to avoid this data type whenever possible. This is the default value a variable holds when it is declared , but not assigned any data: let middleName; console.log(middleName); // Logs \"undefined\" Analogy for Null vs Undefined Let's say that you're in a public library, and you're searching for a book to check out. You ask the librarian where the book you're looking for is, and he points you to a spot in the back of the library. When you get there, you see a book in the spot that the librarian pointed you to. You pick it up, open it, and realize that the book is empty. There's no title, no table of contents, and it's filled with empty pages. This is like the null data type. There's a book there, but it's clearly been filled with nothing on purpose. Now, let's say that when you get to where the book is supposed to be, you see that the shelf is empty. There's no book. You can see that there is supposed to be a book there, but there's no book in sight. You can't be sure what happened to the book. Did someone check it out already? Will it be returned later? Did it never exist in the first place? This is more like undefined . There's no book at all, and you can't be sure if it was on purpose or not. Answer the questions in quiz.md about null and undefined . Primitive Data Types In the above sections, we discussed 5 different data types: string , number , boolean , null , and undefined . These are known as JavaScript's primitive data types . There are also 3 more data types known as reference data types , which we will discuss in our later assignments. Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Variables and Data"},{"location":"unit-1/variables-and-data/#variables-and-data","text":"","title":"Variables and Data"},{"location":"unit-1/variables-and-data/#objectives","text":"After completing this assignment, you will be able to: Understand the difference between variable declaration and variable assignment Assign and re-assign values to variables Describe the differences between strings, numbers, and booleans Understand the difference between null and undefined Use JavaScript to find a data value's type Convert a string into a number Perform arithmetic on a number Use comparison operators to create booleans in a program","title":"Objectives"},{"location":"unit-1/variables-and-data/#key-terms","text":"data information stored digitally on a computer value one specific piece of data, like a name or a number variable a labeled reference to a data value operator a symbol or word that performs an action on one or more values, like adding numbers or comparing them expression a piece of code that calculates to a value, typically involving one or more operators variable assignment an expression that attaches a value to a variable x = 5 variable declaration the creation of a variable let x type the classification of a data value typeof operator a JavaScript operator that finds out the data type of a value or variable typeof \"this is a string\" typeof x string data type used for values that contains text \"hello world\" number data type used for values that contain numbers 5 concatenate joining together multiple strings using the + operator. \"hello\" + \"world!\" parseInt() built-in function to convert a string value to a number value parseInt(\"5\") boolean data type used to represent a condition. Can only have the values true or false true null data type used to represent nothing or no value. Has only one value null null undefined data type used for values that haven't been set yet or don't exist yet. Has only one value undefined undefined comparison operator produces a boolean value based on the relationship between two values x >= 5 strict equality operator The triple === sign; produces a boolean value based on if two values have the same data value AND data type. Recommended to use strict equality whenever you can. x === 5 loose equality operator The double == sign; produces a boolean value based on if two values have the same data value. Recommended to avoid loose equality whenever you can. x == 5 assignment operator The single = sign, used for assigning values to variables name = \"Alice\" primitive data types The most basic types of data values that can't be broken down into simpler parts. These include numbers, strings (text), booleans (condition), null (nothing), or undefined (no value set)","title":"Key Terms"},{"location":"unit-1/variables-and-data/#variables-and-data-assignment","text":"In this assignment, we'll go over the basics of variables and data types in JavaScript. Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"Variables and Data Assignment"},{"location":"unit-1/variables-and-data/#variables-and-data-values-background","text":"A variable is a label you can reference in your code that points to a value. In this first set of examples all of our values are going to be strings. We'll talk more about strings shortly, but for now just know that strings are sets of characters contained by quotes. \"Hello World\" You can shoose just about any name you like for variables in your program by declaring them. For example, you could declare a variable called firstName like this: let firstName; All we're doing here is: \"a variable called firstName now exists\" in the program. Rules and Conventions for variable naming: The first character must be a letter or underscore( _ ) variable names can not contain spaces, symbols, or punctuation marks variable names are case sensitive; variables can not be named certain \"reserved keywords\" that are a part of the JavaScript language, such as \"let\", \"for\", or \"if\" the convention for naming variables is to use camelCase , which means the first letter of the first word in the variable is lowercase , and any following words are capitalized After you have declared a variable, you can assign it to any value you'd like by using the = operator. let firstName; firstName = \"Allan\"; The above example declares the variable on the first line and assigns it to the value \"Allan\" on the second line. The declaration and assignment can also be done together in a single line: let firstName = \"Allan\"; If we were to now console.log the variable called \"firstName\", our output would say \"Allan\" let firstName = \"Allan\"; // This will log \"Allan\" to the console console.log(firstName); Using console.log() is a handy way to \"look into\" our program and see what values our variables are holding while the program is running. You'll be using this trick a lot. Note: You only need to use the let reserved keyword when you are initially declaring a variable. After a variable has been declared, you can re-assign it to a different value at any point and no longer need to use the let keyword. // Declares firstName and assigns it to \"Allan\" let firstName = \"Allan\"; // Logs \"Allan\" console.log(firstName); // Re-assigns firstName to \"Chris\" firstName = \"Chris\"; // Logs \"Chris\" now console.log(firstName); Now, complete the Variables and Data Exercise: Values and Variables before moving forward.","title":"Variables and Data Values Background"},{"location":"unit-1/variables-and-data/#variables-and-data-exercise-values-and-variables","text":"Open index.html in Live Server and read the HTML code. Open up the Developer Console. Head to script.js . Declare a variable called fullName using let and assign it a string containing the text of your full name. Add a console.log() below your variable declaration that logs the value of fullName to the console. Save your code and take a look at your developer console.","title":"Variables and Data Exercise: Values and Variables"},{"location":"unit-1/variables-and-data/#strings-and-numbers-background","text":"Every value in JavaScript has an associated data type. You can see a value's type by using the typeof operator like this. console.log(typoef \"Hello World\"); // logs \"string\" So far, all the values we've worked with have been of the type string . Strings are great when we want to keep track of text as values, but what about when we're dealing with numbers? let x = \"10\"; let y = \"3\"; console.log(x + y); // logs \"103\" You might expect the program above to log 13 , but it actually logs \"103\" . This is because the variables x and y point to string values, which we've indicated with the quotes \"\" . For string values, using the + operator between them will simply combine them together like two words. In programming, this is called string concatenation . IF we want to actually treat these two values like numbers, we need to remove the quotes: let x = 10; let y = 3; console.log(x + y); // logs 13 console.log(x - y); // logs 7 console.log(x * y); // logs 30 console.log(x / y); // logs 3.333333... console.log(x % y); // logs 1 console.log(x ** y) // logs 1000 The symbols between x and y above are called operators . The full statements x + y or x / y are called expressions , which calculate to a value when they are evaluated . Specifically, the ones I used above are called arithmetic operators , since they do math operations. Here's a table of all the arithmetic operators in JavaScript and what they do: Operator Description Usage + Addition : Adds two numbers or concatenates two strings x + y - Subtraction : Subtracts the second number from the first x - y * Multiplication : Multiplies two numbers x * y / Division : Divides the first number by the second x / y % Modulus : Calculates the remainder when the first number is divided by the second x % y ** Exponentiation : Takes the first number to the power of the second number x ** y ++ Increment : Adds 1 to a number x++ -- Decrement : Subtracts 1 from a number y-- Sometimes you will need to convert a value from one type to another. For example, consider the below example: let age = \"60\"; let laterAge = age + 4; console.log(\"In 4 years, you will be \" + laterAge); This program would log a statement that says \"In 4 years, you will be 604\" Clearly, this is not what we intended here. If we want JavaScript to actually add our two numbers, we need to convert our string to a number using the parseInt() function like this: let age = \"60\"; let laterAge = parseInt(age) + 4; console.log(\"In 4 years, you will be \" + laterAge); This time, we log the correct statement that says \"In 4 years, you will be 64\" Complete the Variables and Data Exercise: Strings and Numbers before moving forward.","title":"Strings and Numbers Background"},{"location":"unit-1/variables-and-data/#variables-and-data-exercise-strings-and-numbers","text":"Make sure that index.html is still opened with Live Server and open script.js in VS Code if it isn't already. Add another console.log statement below the previous one which logs the typoef the fullName variable, and confirm that when you refresh the page a second statement appears in the console that says \"string\" . Read about toUpperCase() and toLowerCase() . Add 2 more console.log statements below. One with fullName in all upper case, and the other with fullName in all lower case. Verify that the developer console contains the expected output. Declare another variable called stringAge and assign it your current age AS A STRING . Declare a new variable ageIn2Years and assign to it stringAge + 2 . Write a console.log statement that prints out the value of ageIn2Years . Then write another console.log statement underneath that prints out the typeof ageIn2Years . Save your file and refresh the browser. Does it correctly log your age in 2 years? On the next line, re-assign ageIn2Years using parseInt so that it now contains a number that represents your age in 2 years. Write a console.log statement to log the new value of ageIn2Years , then write another console.log statement to log the new typeof ageIn2Years . Save your code and refresh the browser. Does it now show your correct age in 2 years? Complete this task with what you know about arithmetic operators: Declare 2 variables named charge and payment and assign each of them a number value. payment should be a smaller number than charge . Subtract payment from charge and assign the result to a new variable named remaining . log the value of remaining to the console log the typeof remaning to the console Complete this task with what you know about arithmetic operators Declare 3 variables named tests , assignments and final and assign each of them a number value. Calculate the average of test , assignments , and final in one expression and assign the result to a new variable named grade . Hint: () parentheses can be used to group sub-expressions . log the value of grade to the console log the typoef grade to the console","title":"Variables and Data Exercise: Strings and Numbers"},{"location":"unit-1/variables-and-data/#booleans-and-comparison-operators-background","text":"A 3rd type we haven't discussed yet is the boolean . A boolean type represents a condition of some sort, like whether it's raining outside, or whether a number is even. A boolean data type can only hold one of two values: true or false . We can assign a variable to a boolean like this: let isRaining = true; let is Snowing = false; Note: We do NOT use quotations like we do with strings. Booleans are often used to describe \"binary\" states of being, meaning there are only two possible choices. Either it is raining, or it is not at any given moment. Either a number is even, or it is odd. Comparison operators are symbols that are used for comparing two values, and they evaluate , or calculate, to boolean values. Here's a partial list, assuming that x = 5 : Operator Description Comparing Returns == loosely equal to (only equal value) x == 8 false x == 5 true x == \"5\" true === strictly equal to (equal value and type) x === 5 true x === \"5\" false != not loosly equal to x != 8 true !== not strictly equal to x !== 5 false x !== \"5\" true x !== 8 true > greater than x > 8 false < less than x < 8 true >= greater than or equal to x >= 8 false <= less than or equal to x <= 8 true Note : Notice that === has a completely different meaning from = by itself. === is a comparison operator that evaluates to true or false based on if two values are exactly equal, while = is used for assignment to a variable only, as you've seen so far. IMPORTANT : Take note of the difference between loose equality ( == ) and strict equality ( === ). == checks just the data value, whereas === checks both the data type and the data value. For our course, and when you code beyond this course, it's recommended to ONLY USE THE === operator . It's much safer and more precise to use. Assume that whenever we refer to checking equality, we mean strict equality. Additional Info: To read more about strict and loose quality, visit this link . Using these comparison operators, we can define boolean variables like this: let x = 1; let y = 2; let areEqual = (x === y); console.log(areEqual); // false let xGreater = (x > y); console.log(areEqual); // false let xLesser = (x < y); console.log(areEqual); // true Booleans also concatenate onto strings just like numbers do: let isFriday = false; console.log(\"Is today Friday? \" + isFriday); // Logs \"Is today Friday? false\" Complete the Variables and Data Exercise: Booleans and Comparison Operators before moving forward.","title":"Booleans and Comparison Operators Background"},{"location":"unit-1/variables-and-data/#variables-and-data-exercise-booleans-and-comparison-operators","text":"Continue working in script.js with index.html opened with Live Server. Declare a variable likesVegetables and assign to it a boolean that represents whether you like vegetables or not. On the next 2 lines, log the value of likesVegetables and the typeof likesVegetables to the console. Complete this task using what you know about booleans and comparison operators: Declare a variable named pH and assign it a number value between 0 and 14 . Use a less-than comparison operator to compare pH to 7 and assign the result to a new variable isAcidic . Something is considered acidic if its pH level is below 7. log the value of isAcidc to the console log the typeof isAcidic to the console Complete this task using what you know about booleans and comparison operators: Declare a variable numberOfSoldiers and assign it a number value. Use equality comparison to compare numberOfSoldiers to the number 300 and assign the result to a new variable named isSparta . Sparta had 300 soldiers in the battle of Thermopylae. log the value of isSparta to the console log the typeof isSparta to the console. Take a screenshot of your Developer Console. It should look something like this:","title":"Variables and Data Exercise: Booleans and Comparison Operators"},{"location":"unit-1/variables-and-data/#null-and-undefined-background","text":"There are 2 more data types that we will go over today: null and undefined . Both of these data types have only one associated value, null , and undefined , respectively. These two data types are often confused with one another, since they mean close to the same thing, but not exactly. null represents nothing or an empty value. It is used when we want to specifically assign the value \"nothing\" to a variable. For example, this is how you would use null to represent someone with no middle name: let middleName = null; console.log(middleName); // Logs \"null undefined represents a data value that hasn't been set yet or doesn't exist. It could be set later or not. Because of the uncertainty of undefined , it's best to avoid this data type whenever possible. This is the default value a variable holds when it is declared , but not assigned any data: let middleName; console.log(middleName); // Logs \"undefined\"","title":"Null and Undefined Background"},{"location":"unit-1/variables-and-data/#analogy-for-null-vs-undefined","text":"Let's say that you're in a public library, and you're searching for a book to check out. You ask the librarian where the book you're looking for is, and he points you to a spot in the back of the library. When you get there, you see a book in the spot that the librarian pointed you to. You pick it up, open it, and realize that the book is empty. There's no title, no table of contents, and it's filled with empty pages. This is like the null data type. There's a book there, but it's clearly been filled with nothing on purpose. Now, let's say that when you get to where the book is supposed to be, you see that the shelf is empty. There's no book. You can see that there is supposed to be a book there, but there's no book in sight. You can't be sure what happened to the book. Did someone check it out already? Will it be returned later? Did it never exist in the first place? This is more like undefined . There's no book at all, and you can't be sure if it was on purpose or not. Answer the questions in quiz.md about null and undefined .","title":"Analogy for Null vs Undefined"},{"location":"unit-1/variables-and-data/#primitive-data-types","text":"In the above sections, we discussed 5 different data types: string , number , boolean , null , and undefined . These are known as JavaScript's primitive data types . There are also 3 more data types known as reference data types , which we will discuss in our later assignments.","title":"Primitive Data Types"},{"location":"unit-1/variables-and-data/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-2/arrays/","text":"Arrays Objectives Learn what an array is and how it works. Read MDN documentation to learn how to use pre-built array functions and access common properties. Use an array to store a list of items. Learn how to retrieve and change items in an array. Key Terms array a data structure used to store an ordered list of data. let colors = [\"red\", \"yellow\", \"green\"]; array index a numeric position an item is located at in an array; can be used to access that item let colors = [\"red\", \"yellow\", \"green\"]; console.log( colors[0] ); // Output => \"red\" array.length property available on arrays that returns the number of items in the array let colors = [\"red\", \"yellow\", \"green\"]; console.log( colors.length ); // Output => 3 square brackets [] symbols used to declare an array or access an item in an array by index Mozilla Developer Network resource for documentation on available built-in JavaScript functions (methods) You can learn about all the functions available for arrays here on MDN array.push() function that adds an item to the end of an array array.pop() function that removes the last item from an array mutating function particular type of function that modifies the object it is called on, rather than simply returning a value e.g. push and pop are both mutating functions return value data that a function \"gives back\" to the invoker, which can optionally be assigned to a variable e.g. the item previously at the end of an array if provided as a return value from the pop function Arrays Assignment In this assignment, you will learn about the basics of JavaScript arrays. Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. Arrays Background Arrays are used for storing ordered lists of items . Initializing This will create an array of three restaurants. let restaurants = [\"State Bird\", \"House of Prime Rib\", \"McDonalds\"]; Length To see how many items are in an array, we can use the length property. let restaurants = [\"State Bird\", \"House of Prime Rib\", \"McDonalds\"]; console.log(restaurants.length); Accessing Every item in an array has an index it can be accessed at. The first item is at index 0, the second is at index 1, and the third is at index 2. You can access an item by index using square brackets . let restaurants = [\"State Bird\", \"House of Prime Rib\", \"McDonalds\"]; console.log(\"first item: \" + restaurants[0]); console.log(\"second item: \" + restaurants[1]); Changing Items We can also use square brackets to update an item in an array. let restaurants = [\"State Bird\", \"House of Prime Rib\", \"McDonalds\"]; restaurants[0] = \"Burger King\"; console.log(\"first item: \" + restaurants[0]); The first item has been changed to \"Burger King\" (sorry, foodies). Array Documentation and Methods Background After doing some coding, you'll start to notice that many times you are performing the same tasks in your programs. Languages try to make your life easier by packaging these common tasks into functions or methods you can then use in your programs. You've already used at least two built-in functions already: console.log() and prompt() You also may have already noticed that when you are using ( invoking ) functions, parentheses are part of the syntax, and sometimes allows you put provide data between the parentheses as an input ( argument ) to the function. But how do you know if there is already a built-in function for what you want to do? The best way is to start getting comfortable reading the language documentation. For JavaScript, Mozilla Developer Network ( MDN ) is going to be your best resource. Remember, the goal is not to memorize all the array methods there are, but to get comfortable looking them up and reading about them when you need them. Let's take a look at two functions from the documentation that work specifically for arrays. push() push() is a convenient way add a single item to the end of an array. As the documentation shows, it must be called on an existing array (not out in the open like you can with console.log() or prompt() ). let fruits = [\"Apple\", \"Banana\"]; fruits.push(\"Mango\"); console.log(fruits); Previously, we had an array of two items. By calling fruits.push(\"Mango\") , we have added a third item to the end of the array. pop() pop() is the opposite of push(). Instead of adding a new item, pop() will remove the top item from the array. Note that push() and pop() will both actually modify the array you invoke them on. When a function modifies the object it's used on, we say that this is a mutating function . let fruits = [\"Apple\", \"Banana\"]; fruits.pop(); console.log(fruits); console.log(fruits.length); After running the code above, the mutated fruits array now has only 1 item left in it. In addition to mutating the array, you can also capture the result of the pop() function and assign it to a variable. let fruits = [\"Apple\", \"Banana\"]; let poppedItem = fruits.pop(); console.log(poppedItem); The value that a function gives you back (in this case, the popped item), is referred to as that function's return value. Complete Arrays Exercise before continuing Arrays Exercise Open index.html in Live Server and read the HTML code. Open up the Developer Console. Open script.js in VS Code. Declare a variable named languages , and assign to it an array that contains the following strings: \"HTML\" \"CSS\" \"JavaScript\" \"React\" \"Node\" \"SQL\" Log the languages array to the console. Declare a variable firstElement and assign to it the first element in the array. Remember to use the element's index number to do so. Call console.log with 2 inputs: \"The first element of the array is\" and firstElement , like this: console.log(\"The first element of the array is\", firstElement); Moving forward, we will refer to this format as \"labeling our message\". For example, the above instruction would be rewritten as: Log firstElement to the console with the label: \"The first element of the array is\" . Declare a variable thirdElement and assign to it the third element in the array. Log thirdElement to the console with the label: \"The third element of the array is\" . Declare a variable length and assign to it the length of the languages array. Use the array's built-in property for this step. Log length to the console with the label: \"The length of the array is\" . Declare a variable lastElement and assign to it the last element in the array. Use the length variable or the array's built-in length property for this step. Log lastElement to the console with the label: \"The last element of the array is\" . Reassign the fourth element of the array to the string \"Angular\" . Log the languages array to the console with the label: \"Final languages array: \" . Before moving on, read the documentation for 3 more commonly used Array methods: shift() : Like the opposite pop() . Removes an element from the beginning of an array and returns it. unshift() : The opposite of push() . Adds an element to the beginning of an array. indexOf() : Finds an element and returns its index number There may be a few questions on these methods on the quiz... Declare a new variable names and assign to it an array that contains following strings: \"Luke\" \"Leia\" \"Han\" \"Ron\" Using Array's push() , pop() , and index numbers, complete the following tasks: Log the names array to the console with the label: \"Initial names array:\" Remove \"Ron\" from the end of the names array, and assign it to a variable named popped Add \"Chewbacca\" to the end of the array. Add \"Anakin\" to the end of the array. Add \"Jar Jar\" to the end of the array. Replace \"Anakin\" with \"Darth Vader\" using the correct index number. (Hint: Use the indexOf() method to find the index number of \"Anakin\" ) Log the names array to the console with the label: \"Final names array:\" Log the popped variable to the console with the label: \"Popped:\" Take a screenshot of your Developer Console output. It should look similar to this: Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Arrays"},{"location":"unit-2/arrays/#arrays","text":"","title":"Arrays"},{"location":"unit-2/arrays/#objectives","text":"Learn what an array is and how it works. Read MDN documentation to learn how to use pre-built array functions and access common properties. Use an array to store a list of items. Learn how to retrieve and change items in an array.","title":"Objectives"},{"location":"unit-2/arrays/#key-terms","text":"array a data structure used to store an ordered list of data. let colors = [\"red\", \"yellow\", \"green\"]; array index a numeric position an item is located at in an array; can be used to access that item let colors = [\"red\", \"yellow\", \"green\"]; console.log( colors[0] ); // Output => \"red\" array.length property available on arrays that returns the number of items in the array let colors = [\"red\", \"yellow\", \"green\"]; console.log( colors.length ); // Output => 3 square brackets [] symbols used to declare an array or access an item in an array by index Mozilla Developer Network resource for documentation on available built-in JavaScript functions (methods) You can learn about all the functions available for arrays here on MDN array.push() function that adds an item to the end of an array array.pop() function that removes the last item from an array mutating function particular type of function that modifies the object it is called on, rather than simply returning a value e.g. push and pop are both mutating functions return value data that a function \"gives back\" to the invoker, which can optionally be assigned to a variable e.g. the item previously at the end of an array if provided as a return value from the pop function","title":"Key Terms"},{"location":"unit-2/arrays/#arrays-assignment","text":"In this assignment, you will learn about the basics of JavaScript arrays. Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"Arrays Assignment"},{"location":"unit-2/arrays/#arrays-background","text":"Arrays are used for storing ordered lists of items .","title":"Arrays Background"},{"location":"unit-2/arrays/#initializing","text":"This will create an array of three restaurants. let restaurants = [\"State Bird\", \"House of Prime Rib\", \"McDonalds\"];","title":"Initializing"},{"location":"unit-2/arrays/#length","text":"To see how many items are in an array, we can use the length property. let restaurants = [\"State Bird\", \"House of Prime Rib\", \"McDonalds\"]; console.log(restaurants.length);","title":"Length"},{"location":"unit-2/arrays/#accessing","text":"Every item in an array has an index it can be accessed at. The first item is at index 0, the second is at index 1, and the third is at index 2. You can access an item by index using square brackets . let restaurants = [\"State Bird\", \"House of Prime Rib\", \"McDonalds\"]; console.log(\"first item: \" + restaurants[0]); console.log(\"second item: \" + restaurants[1]);","title":"Accessing"},{"location":"unit-2/arrays/#changing-items","text":"We can also use square brackets to update an item in an array. let restaurants = [\"State Bird\", \"House of Prime Rib\", \"McDonalds\"]; restaurants[0] = \"Burger King\"; console.log(\"first item: \" + restaurants[0]); The first item has been changed to \"Burger King\" (sorry, foodies).","title":"Changing Items"},{"location":"unit-2/arrays/#array-documentation-and-methods-background","text":"After doing some coding, you'll start to notice that many times you are performing the same tasks in your programs. Languages try to make your life easier by packaging these common tasks into functions or methods you can then use in your programs. You've already used at least two built-in functions already: console.log() and prompt() You also may have already noticed that when you are using ( invoking ) functions, parentheses are part of the syntax, and sometimes allows you put provide data between the parentheses as an input ( argument ) to the function. But how do you know if there is already a built-in function for what you want to do? The best way is to start getting comfortable reading the language documentation. For JavaScript, Mozilla Developer Network ( MDN ) is going to be your best resource. Remember, the goal is not to memorize all the array methods there are, but to get comfortable looking them up and reading about them when you need them. Let's take a look at two functions from the documentation that work specifically for arrays.","title":"Array Documentation and Methods Background"},{"location":"unit-2/arrays/#push","text":"push() is a convenient way add a single item to the end of an array. As the documentation shows, it must be called on an existing array (not out in the open like you can with console.log() or prompt() ). let fruits = [\"Apple\", \"Banana\"]; fruits.push(\"Mango\"); console.log(fruits); Previously, we had an array of two items. By calling fruits.push(\"Mango\") , we have added a third item to the end of the array.","title":"push()"},{"location":"unit-2/arrays/#pop","text":"pop() is the opposite of push(). Instead of adding a new item, pop() will remove the top item from the array. Note that push() and pop() will both actually modify the array you invoke them on. When a function modifies the object it's used on, we say that this is a mutating function . let fruits = [\"Apple\", \"Banana\"]; fruits.pop(); console.log(fruits); console.log(fruits.length); After running the code above, the mutated fruits array now has only 1 item left in it. In addition to mutating the array, you can also capture the result of the pop() function and assign it to a variable. let fruits = [\"Apple\", \"Banana\"]; let poppedItem = fruits.pop(); console.log(poppedItem); The value that a function gives you back (in this case, the popped item), is referred to as that function's return value. Complete Arrays Exercise before continuing","title":"pop()"},{"location":"unit-2/arrays/#arrays-exercise","text":"Open index.html in Live Server and read the HTML code. Open up the Developer Console. Open script.js in VS Code. Declare a variable named languages , and assign to it an array that contains the following strings: \"HTML\" \"CSS\" \"JavaScript\" \"React\" \"Node\" \"SQL\" Log the languages array to the console. Declare a variable firstElement and assign to it the first element in the array. Remember to use the element's index number to do so. Call console.log with 2 inputs: \"The first element of the array is\" and firstElement , like this: console.log(\"The first element of the array is\", firstElement); Moving forward, we will refer to this format as \"labeling our message\". For example, the above instruction would be rewritten as: Log firstElement to the console with the label: \"The first element of the array is\" . Declare a variable thirdElement and assign to it the third element in the array. Log thirdElement to the console with the label: \"The third element of the array is\" . Declare a variable length and assign to it the length of the languages array. Use the array's built-in property for this step. Log length to the console with the label: \"The length of the array is\" . Declare a variable lastElement and assign to it the last element in the array. Use the length variable or the array's built-in length property for this step. Log lastElement to the console with the label: \"The last element of the array is\" . Reassign the fourth element of the array to the string \"Angular\" . Log the languages array to the console with the label: \"Final languages array: \" . Before moving on, read the documentation for 3 more commonly used Array methods: shift() : Like the opposite pop() . Removes an element from the beginning of an array and returns it. unshift() : The opposite of push() . Adds an element to the beginning of an array. indexOf() : Finds an element and returns its index number There may be a few questions on these methods on the quiz... Declare a new variable names and assign to it an array that contains following strings: \"Luke\" \"Leia\" \"Han\" \"Ron\" Using Array's push() , pop() , and index numbers, complete the following tasks: Log the names array to the console with the label: \"Initial names array:\" Remove \"Ron\" from the end of the names array, and assign it to a variable named popped Add \"Chewbacca\" to the end of the array. Add \"Anakin\" to the end of the array. Add \"Jar Jar\" to the end of the array. Replace \"Anakin\" with \"Darth Vader\" using the correct index number. (Hint: Use the indexOf() method to find the index number of \"Anakin\" ) Log the names array to the console with the label: \"Final names array:\" Log the popped variable to the console with the label: \"Popped:\" Take a screenshot of your Developer Console output. It should look similar to this:","title":"Arrays Exercise"},{"location":"unit-2/arrays/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-2/loops-and-iteration/","text":"Loops and Iteration Objectives Use a for loop to repeat an action several times Diagram the anatomy of a for loop Programmatically iterate over an array, and perform the same action to each item in the array. Key Terms loop a section of code that may execute multiple times before continuing on to the next line in the program for loop a loop with a special syntax for managing a \"loop variable\", a common looping scenario for (let i = 0; i <= 12; i = i + 2) { console.log(i); } Note: Using i for your loop variable is a common coding convention. for loop initialization part before the first ; that set any initial values for loop condition part after the first ; that executes before entering the loop body - if this condition is true, the loop will repeat for loop incrementing statement part after the second ; that executes after the loop body, usually used to increment or decrement a counter for loop body section of code between { } that repeats for each iteration of the loop iteration repetition of a procedure in a loop, often used in regards to performing operations on multiple item in an array let colors = [\"red\", \"yellow\", \"green\"]; for (let i = 0; i < colors.length; i++) { console.log(colors[i]); } Loops and Iteration Assignment In this assignment, you will learn about the basics of looping and iteration, a fundamental concept of programming. Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. For Loop Background Computers are really good at handling our repetitive tasks for us. One of the most common ways to tell JavaScript to do something for us several times is to use a For Loop. Here's an example for loop that will count up from 1 to 100 and log each number: for (let i = 1; i <= 100; i++) { console.log(i); } console.log(\"whew!\"); The top of the For Loop is composed of three parts separated by semicolons (NOT commas!) that you will customize based on the behavior you want. for ( INITIALIZATION; CONDITION; INCREMENTING STATEMENT ) INITIALIZATION : Where do we start? This is normally where you'll declare a new variable to use in the loop, and you'll also assign it an initial value. The initialization runs only once at the very beginning of the loop. CONDITION : When do we stop looping? This condition is checked before each iteration to determine whether or not to loop again. Once the condition is no longer true, the loop will end and JavaScript will move on to the next statement in your program. INCREMENTING STATEMENT : What should be done after each iteration of the loop? Should we increment a variable? Should we decrease it by 2? This section runs after every iteration to increment the loop variable in some way. Let's take a look at a simpler example, and break down exactly what happens in each iteration: for(let i = 0; i < 20; i++) { console.log(\"hello\", i); } Try running this in your example folder and see what comes out of the console. First Iteration i is initialized to the number value 0 with let i = 0 . This only happens on the first iteration . Check the condition ( i < 20 ). Since i is currently 0 , this is true . Since the condition above is true, we go into the loop body . On this iteration, we log \" hello 0 \" to the console since i = 0 . Execute the incrementing statement . In this case, i++ runs, and i becomes 1 . Second Iteration Since this is no longer the first iteration, we go straight to the condition. i is currently 1 , so i < 20 is still true . We go into the loop body again, and print out \" hello 1 \" this time, since i is 1 . Execute the incrementing statement again. i++ runs, and i becomes 2 . Third Iteration The condition i < 20 is still true because i is currently 2 . We go into the loop body again, and print out \" hello 2 \", since i is 2 . Execute the incrementing statement again. i++ runs, and i becomes 3 . Starting to see a pattern here? Let's skip to the end of the loop to the 19th iteration next. Nineteenth Iteration The condition i < 20 is true because i is currently 18 . We go into the loop body, and print out \" hello 18 \", since i is 18 . Execute the incrementing statement . i++ runs, and i becomes 19 . Twentieth Iteration The condition i < 20 is true because i is currently 19 . Note that this is the last number that will return true for the condition i < 20 . We go into the loop body, and print out \" hello 19 \", since i is 19 . Execute the incrementing statement . i++ runs, and i becomes 20 . Twenty First Iteration The condition i < 20 is false because i is currently 20 . The for loop ends. Iterating over Arrays Background Arrays and for loops are often used together so we can perform the same operations to every item in the array. This process of looping over arrays is called iteration . Here's an example of how we might iterate over an array of pet names and \"yell\" each one. let petNames = [\"Fluffy\", \"Fido\", \"Iggy\"]; for ( let i=0; i < petNames.length; i++ ){ let currentPetName = petNames[i]; console.log(currentPetName.toUpperCase()); } Notice above that we're using petNames[i] to access the current petName . This works because when we iterate over an array, the loop variable i represents the index number we are currently working with. For example, on the first loop i will be 0 , so petNames[i] becomes petNames[0] , which will give us \"Fluffy\" . Then, on the second loop, i will be 1 , so petNames[i] becomes petNames[1] , which will give us \"Fido\" . Complete the Loops and Iteration Exercise before continuing. Loops and Iteration Exercise Open index.html in Live Server and read the HTML code. Open up the Developer Console. Open script.js in VS Code. Note: For the first for loop below, I will provide you with many of the necessary components of the loop. For the next ones I ask you to write, you won't recieve as much guidance. Write a for loop that logs each number from 0 to 10 , including 10. Your for loop should have the following: initialization should be: let i = 0 since we're starting from 0 condition should be i <= 10 since we are including 10. If we were NOT including 10, we would use i < 10 . incrementing statement should be i++ or i += 1 since we are printing out each number . Hint: If we were printing out every other number , we would do i += 2 . loop body would be one line console.log(i) since we are simply logging each number for each iteration. Note : Feel free to comment out your completed loops as you go to reduce clutter in your console. Just be sure to uncomment them at the end before you submit so you can take a screenshot! Using the same logic as above, write 2 more for loops after the first: Write a for loop that logs every other number from 3 to 15 , including 15. Write a for loop that logs every fifth number from 0 to 50 , not including 50. Declare an array fruits that contains the following fruits: \"Apple\" \"Orange\" \"Pear\" \"Plum\" \"Banana\" Using a for loop, iterate over the fruits array, and print out each fruit. Declare an array presidents that contains the first 5 presidents of the United States: \"Washington\" \"Adams\" \"Jefferson\" \"Madison\" \"Monroe\" Using a for loop, iterate over the presidents array, and log each president to the console. Edit the previous for loop you wrote so that it iterates over the presidents array and logs each president with a label for the number president that they were . For example: 1: Washington . After you are done, take a screenshot of your Developer Console. This exercise has a lot of output. You may need more than one screenshot. The final one should look something like this: Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Loops and Iteration"},{"location":"unit-2/loops-and-iteration/#loops-and-iteration","text":"","title":"Loops and Iteration"},{"location":"unit-2/loops-and-iteration/#objectives","text":"Use a for loop to repeat an action several times Diagram the anatomy of a for loop Programmatically iterate over an array, and perform the same action to each item in the array.","title":"Objectives"},{"location":"unit-2/loops-and-iteration/#key-terms","text":"","title":"Key Terms"},{"location":"unit-2/loops-and-iteration/#loop","text":"a section of code that may execute multiple times before continuing on to the next line in the program","title":"loop"},{"location":"unit-2/loops-and-iteration/#for-loop","text":"a loop with a special syntax for managing a \"loop variable\", a common looping scenario for (let i = 0; i <= 12; i = i + 2) { console.log(i); } Note: Using i for your loop variable is a common coding convention.","title":"for loop"},{"location":"unit-2/loops-and-iteration/#for-loop-initialization","text":"part before the first ; that set any initial values","title":"for loop initialization"},{"location":"unit-2/loops-and-iteration/#for-loop-condition","text":"part after the first ; that executes before entering the loop body - if this condition is true, the loop will repeat","title":"for loop condition"},{"location":"unit-2/loops-and-iteration/#for-loop-incrementing-statement","text":"part after the second ; that executes after the loop body, usually used to increment or decrement a counter","title":"for loop incrementing statement"},{"location":"unit-2/loops-and-iteration/#for-loop-body","text":"section of code between { } that repeats for each iteration of the loop","title":"for loop body"},{"location":"unit-2/loops-and-iteration/#iteration","text":"repetition of a procedure in a loop, often used in regards to performing operations on multiple item in an array let colors = [\"red\", \"yellow\", \"green\"]; for (let i = 0; i < colors.length; i++) { console.log(colors[i]); }","title":"iteration"},{"location":"unit-2/loops-and-iteration/#loops-and-iteration-assignment","text":"In this assignment, you will learn about the basics of looping and iteration, a fundamental concept of programming. Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"Loops and Iteration Assignment"},{"location":"unit-2/loops-and-iteration/#for-loop-background","text":"Computers are really good at handling our repetitive tasks for us. One of the most common ways to tell JavaScript to do something for us several times is to use a For Loop. Here's an example for loop that will count up from 1 to 100 and log each number: for (let i = 1; i <= 100; i++) { console.log(i); } console.log(\"whew!\"); The top of the For Loop is composed of three parts separated by semicolons (NOT commas!) that you will customize based on the behavior you want.","title":"For Loop Background"},{"location":"unit-2/loops-and-iteration/#for-initialization-condition-incrementing-statement","text":"INITIALIZATION : Where do we start? This is normally where you'll declare a new variable to use in the loop, and you'll also assign it an initial value. The initialization runs only once at the very beginning of the loop. CONDITION : When do we stop looping? This condition is checked before each iteration to determine whether or not to loop again. Once the condition is no longer true, the loop will end and JavaScript will move on to the next statement in your program. INCREMENTING STATEMENT : What should be done after each iteration of the loop? Should we increment a variable? Should we decrease it by 2? This section runs after every iteration to increment the loop variable in some way. Let's take a look at a simpler example, and break down exactly what happens in each iteration: for(let i = 0; i < 20; i++) { console.log(\"hello\", i); } Try running this in your example folder and see what comes out of the console.","title":"for ( INITIALIZATION; CONDITION; INCREMENTING STATEMENT )"},{"location":"unit-2/loops-and-iteration/#first-iteration","text":"i is initialized to the number value 0 with let i = 0 . This only happens on the first iteration . Check the condition ( i < 20 ). Since i is currently 0 , this is true . Since the condition above is true, we go into the loop body . On this iteration, we log \" hello 0 \" to the console since i = 0 . Execute the incrementing statement . In this case, i++ runs, and i becomes 1 .","title":"First Iteration"},{"location":"unit-2/loops-and-iteration/#second-iteration","text":"Since this is no longer the first iteration, we go straight to the condition. i is currently 1 , so i < 20 is still true . We go into the loop body again, and print out \" hello 1 \" this time, since i is 1 . Execute the incrementing statement again. i++ runs, and i becomes 2 .","title":"Second Iteration"},{"location":"unit-2/loops-and-iteration/#third-iteration","text":"The condition i < 20 is still true because i is currently 2 . We go into the loop body again, and print out \" hello 2 \", since i is 2 . Execute the incrementing statement again. i++ runs, and i becomes 3 . Starting to see a pattern here? Let's skip to the end of the loop to the 19th iteration next.","title":"Third Iteration"},{"location":"unit-2/loops-and-iteration/#nineteenth-iteration","text":"The condition i < 20 is true because i is currently 18 . We go into the loop body, and print out \" hello 18 \", since i is 18 . Execute the incrementing statement . i++ runs, and i becomes 19 .","title":"Nineteenth Iteration"},{"location":"unit-2/loops-and-iteration/#twentieth-iteration","text":"The condition i < 20 is true because i is currently 19 . Note that this is the last number that will return true for the condition i < 20 . We go into the loop body, and print out \" hello 19 \", since i is 19 . Execute the incrementing statement . i++ runs, and i becomes 20 .","title":"Twentieth Iteration"},{"location":"unit-2/loops-and-iteration/#twenty-first-iteration","text":"The condition i < 20 is false because i is currently 20 . The for loop ends.","title":"Twenty First Iteration"},{"location":"unit-2/loops-and-iteration/#iterating-over-arrays-background","text":"Arrays and for loops are often used together so we can perform the same operations to every item in the array. This process of looping over arrays is called iteration . Here's an example of how we might iterate over an array of pet names and \"yell\" each one. let petNames = [\"Fluffy\", \"Fido\", \"Iggy\"]; for ( let i=0; i < petNames.length; i++ ){ let currentPetName = petNames[i]; console.log(currentPetName.toUpperCase()); } Notice above that we're using petNames[i] to access the current petName . This works because when we iterate over an array, the loop variable i represents the index number we are currently working with. For example, on the first loop i will be 0 , so petNames[i] becomes petNames[0] , which will give us \"Fluffy\" . Then, on the second loop, i will be 1 , so petNames[i] becomes petNames[1] , which will give us \"Fido\" . Complete the Loops and Iteration Exercise before continuing.","title":"Iterating over Arrays Background"},{"location":"unit-2/loops-and-iteration/#loops-and-iteration-exercise","text":"Open index.html in Live Server and read the HTML code. Open up the Developer Console. Open script.js in VS Code. Note: For the first for loop below, I will provide you with many of the necessary components of the loop. For the next ones I ask you to write, you won't recieve as much guidance. Write a for loop that logs each number from 0 to 10 , including 10. Your for loop should have the following: initialization should be: let i = 0 since we're starting from 0 condition should be i <= 10 since we are including 10. If we were NOT including 10, we would use i < 10 . incrementing statement should be i++ or i += 1 since we are printing out each number . Hint: If we were printing out every other number , we would do i += 2 . loop body would be one line console.log(i) since we are simply logging each number for each iteration. Note : Feel free to comment out your completed loops as you go to reduce clutter in your console. Just be sure to uncomment them at the end before you submit so you can take a screenshot! Using the same logic as above, write 2 more for loops after the first: Write a for loop that logs every other number from 3 to 15 , including 15. Write a for loop that logs every fifth number from 0 to 50 , not including 50. Declare an array fruits that contains the following fruits: \"Apple\" \"Orange\" \"Pear\" \"Plum\" \"Banana\" Using a for loop, iterate over the fruits array, and print out each fruit. Declare an array presidents that contains the first 5 presidents of the United States: \"Washington\" \"Adams\" \"Jefferson\" \"Madison\" \"Monroe\" Using a for loop, iterate over the presidents array, and log each president to the console. Edit the previous for loop you wrote so that it iterates over the presidents array and logs each president with a label for the number president that they were . For example: 1: Washington . After you are done, take a screenshot of your Developer Console. This exercise has a lot of output. You may need more than one screenshot. The final one should look something like this:","title":"Loops and Iteration Exercise"},{"location":"unit-2/loops-and-iteration/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-3/functions/","text":"Functions Objectives Use a function to write D.R.Y. code Diagram the anatomy of a function, including each of these parts: parameters, arguments, name, and return value Describe the difference between a function definition and a function invocation Use for loops inside of functions that return or print data Utilize the string split() function Key Terms D.R.Y. stands for \"Don't Repeat Yourself\", a core axiom behind writing good code. Using functions can help you write DRYer code function reusable sequence of code that typically processes a set of inputs to provide a particular output (return value) function doubleIt(someNumber){ return someNumber * 2; } function definition the written name, parameters, and body of the function; defining a function makes it possible for other code to invoke the method function doubleIt(someNumber){ return someNumber * 2; } function declaration syntax the standard and preferred way of defining named functions function name the name of our function. This is what we use to invoke or call our function after we define it function body the code block associated with a function. It's contained by {} and holds code that will be run each time the function is called. invoke / call using the functions name, followed by ( ) with any required parameters to cause the function to execute function doubleIt(someNumber){ return someNumber * 2; } doubleIt(5) // => returns 10 parameter a named \"input\" variable for a function; written in parenthesis on the function definition line someNumber in the example above argument value provided to \"fill in\" a parameter during a function's invocation 5 in the example above return value data that a given function gives back to the invoker 10 in the example above string.split(delimiter) returns an array of different parts of broken up string based on a provided delimiter (separator) string that it should be broken on Functions Assignment Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. Functions Background What is a Function? A function is a way to store and reuse code, allowing us to write more dynamic and DRY code. Box Analogy You can imagine a function as a box with two holes on opposing sides. The first hole in the box is for accepting an input of some kind. In the example above, our input is a number. On the other side of the box, we get an output based on our input. In this case, our input was the number 3, so our output was the number 9, since this function's job is simply to square our input. Built-in functions JavaScript comes with many common functions already built for you. For example, Math.round() is a function that: Accepts a decimal number as an input Returns an rounded integer as an output Let's try using it for a few values. let result = Math.round(5.333); console.log(result); // 5 result = Math.round(7.89); console.log(result); // 8 Can you think of other built-in functions you've already used? (Hint: One of them is used in the example above) Writing our own function Let's write our own function for squaring a number like in the image at the top. function square(x){ let output = x * x; return output; } Here's a detailed breakdown of the function declaration syntax : // [1] [2] [3] function example (parameter1, parameter2, parameter3, ...) { // [4] // JavaScript code statements // [5] // return; } // [6] There are a few very important terms to classify: The function keyword begins the function declaration syntax. The function name . In the square example, \"square\" is our function's name. A comma-separated list of zero or more parameters , surrounded by () parentheses. The square function has one parameter x . The start of the function body indicated by an { opening curly brace. An optional return statement . If your function doesn't need to output any values, you may not need a return statement. Our square function needs one since it is calculating and outputing the square of a number. Note: A return; on its own will simply end the function and return nothing. When we say return ___; Whatever the ___ is will be the output of our function. In the square function, we are returning/outputting the square of x . The end of the function body indicated by a } closing curly brace. Invoking a function If you just paste in the above function to a program and run it, you won't see any result. This is because all we have done so far is written the function definition . Defining a function is like writing a recipe: it doesn't give you anything to chew on until you actually \"use\" it! We use our functions by invoking them. Here is a program that invokes our square function 3 times and logs each result. function square(x){ let output = x * x; return output; } let result = square(5); console.log(result); // 25 console.log(square(6)); // 36 console.log(square(7)); // 49 Try running the above code, and notice that the three separate results logged to the screen. Parameters and Arguments Let's review the function call that we made above. I've simplified it down to just the first call of square(5) . If you run this code, nothing will happen, so no need to run this code to test it out: function square(x){ let output = x * x; return output; } square(5); // returns 25 We defined the function square with the parameter x . You can think of a parameter as a placeholder. It's a variable whose value is not known until we call or invoke the function and pass an argument . When the function is run, the parameter will be holding the value of the argument . So, when we call square(5) , the argument 5 is stored in the parameter x . Returning from a Function Whenever we reach a return statement inside of a function, a function will stop executing immediately. return statements are instructions to \"immediately stop the function and return this value\". It's important to remember this because you don't want to be adding any code statements after writing a return statement. function square(x){ let output = x * x; return output; console.log(\"The output is \" + output); // This line of code will never run } Why functions? Our example above is a short two-line function, but often in the real world, functions will invoke other functions that will perform complex calculations and potentially execute thousands of lines of code. For example, if we were writing the code for Amazon, we might have a function called processPayment() . Amazon needs to process payments in many different contexts, but by having a function that wraps this functionality, it's like a magic \"black box\" that can be do it all for us by simply invoking it. Being able to perform complex sequences of activities by simple invoking a function allows us to avoid repeating ourselves. Not repeating yourself is such an important part of writing good code that there's a popular acronym called DRY that programmers are taught to follow. DRY stands for Don't Repeat Yourself . Processing Arrays with Functions Functions can accept any type of value as a parameter. Depending on what we need, we might write a function that accepts a number, a string, an object, or even an array as an argument. Once you're \"inside\" the function, remember that you can treat your parameters exactly like you would any other variable. Suppose we are tasked with writing a function that accepts an array of numbers as input and returns the sum of all those numbers. Our solution might look like the following: function addAll(numbersArray){ // We'll use this variable to keep track of the total as we add everything. let total = 0; // Add each number in the array to the total for (let i = 0; i < numbersArray.length; i++){ total = total + numbersArray[i]; } // Return the total we've built up at the end. return total; } split() function for Strings split() is a handy built-in function you can use to divide a single string up into an array of strings. We can learn the details by reading the MDN documentation. The easiest way to get there is to Google \"MDN string split\". The first result should lead you here . The split() method splits a string into an array of strings by separating the string into substrings. MDN also tells us we can pass in a separator parameter that specifies what String we want to divide the string based on. Try out each these examples to get a feel for how split() works. let list = \"bread, peanut butter, jelly\".split(\",\"); console.log(list); let newList = \"eggs, avocados, salsa, chorizo\".split(\", \"); console.log(newList); let numberOfWords = \"eggs, avocados, salsa, chorizo\".split(\", \").length; console.log(numberOfWords); let secondWord = \"eggs, avocados, salsa, chorizo\".split(\", \")[1]; console.log(secondWord); let words = \"once upon a time\".split(\" \"); console.log(words); Complete the Functions Exercise before moving forward. Functions Exercise Open index.html in Live Server and read the HTML code. Open up the Developer Console. Open script.js in VS Code. There is already an example exercise completed in script.js for you to use as an example of what to do. Below, there are prompts for functions that you should write. For each of these functions, you must define and test them. You will be in charge of calling each function 2 times with different arguments to ensure that it's working properly. For example, this is how it was done for the example exercise: Prompt: - Define a function named `addTwoNumbers` - This function has 2 parameters: - num1 - the first number to add - num2 - the second number to add - The is function will add the numbers contained in the parameters and return the result Example call: addTwoNumbers(2, 2); Expected return value: 4 addAndMultiplyBy5 Define a function named addAndMultiplyBy5 This function has two parameter num1 - receives a number as an argument num2 - receives a number as an argument The purpose of this function is to add the two input numbers and multiply that result by 5 and return the result. Example Input: addAndMultiplyBy5(10, 5) Expected Output: 75 hoursToMinutes Define a function named hoursToMinutes This function has one parameter hours - receives a number as an argument The purpose of this function is to convert the number of hours received as an argument into minutes and return the result. Example Input: hoursToMinutes(2) Expected Output: 120 getGreeting Define a function named getGreeting This function has one parameter name - receives a string as an argument The purpose of this function is to use the argument contained in the name parameter to greet the person. Example Input: getGreeting(\"Joe\"); Expected Output: \"Hello Joe!\" giveMeBiggest Define a function named giveMeBiggest This function has two parameters num1 - receives a number as an argument num2 - receives a number as an argument The purpose of this function is to find the largest number contained in num1 and num2 and return it. Example Input: giveMeBiggest(100, 999) Expected Output: 999 getLast Define a function named getLast This function has one parameter arr - an array that contains at least 3 elements The purpose of this function is to find and return the last element of the input array referenced by the parameter arr . Example Input: getLast([67, 7, 1, 5]) Expected Output: 5 multiplyAll Define a function named multiplyAll This function has one parameter arr - an array of numbers that contains at least 4 elements The purpose of this function is to find the product of all the numbers in the arr array and return the product. Example Input: multiplyAll([1, 2, 3, 4]); Expected Output: 24 Hint: Similar to the addAll function we implemented in the examples. getLargest Define a function named getLargest This function has one parameter arr - an array of numbers that contains at least 5 elements The purpose of this function is to find and return the largest number in the array. Example Input: getLargest([7, 2, 7, 9, 3, 8, 12]) Expected Output: 12 Hint: Take a look at the longestWord example in the PREP lesson under the Bonus section. At the end, take a screenshot of your function outputs. It should look something like this (of course, the actual values will be different basd on your unique examples): Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Functions"},{"location":"unit-3/functions/#functions","text":"","title":"Functions"},{"location":"unit-3/functions/#objectives","text":"Use a function to write D.R.Y. code Diagram the anatomy of a function, including each of these parts: parameters, arguments, name, and return value Describe the difference between a function definition and a function invocation Use for loops inside of functions that return or print data Utilize the string split() function","title":"Objectives"},{"location":"unit-3/functions/#key-terms","text":"","title":"Key Terms"},{"location":"unit-3/functions/#dry","text":"stands for \"Don't Repeat Yourself\", a core axiom behind writing good code. Using functions can help you write DRYer code","title":"D.R.Y."},{"location":"unit-3/functions/#function","text":"reusable sequence of code that typically processes a set of inputs to provide a particular output (return value) function doubleIt(someNumber){ return someNumber * 2; }","title":"function"},{"location":"unit-3/functions/#function-definition","text":"the written name, parameters, and body of the function; defining a function makes it possible for other code to invoke the method function doubleIt(someNumber){ return someNumber * 2; }","title":"function definition"},{"location":"unit-3/functions/#function-declaration-syntax","text":"the standard and preferred way of defining named functions","title":"function declaration syntax"},{"location":"unit-3/functions/#function-name","text":"the name of our function. This is what we use to invoke or call our function after we define it","title":"function name"},{"location":"unit-3/functions/#function-body","text":"the code block associated with a function. It's contained by {} and holds code that will be run each time the function is called.","title":"function body"},{"location":"unit-3/functions/#invoke-call","text":"using the functions name, followed by ( ) with any required parameters to cause the function to execute function doubleIt(someNumber){ return someNumber * 2; } doubleIt(5) // => returns 10","title":"invoke / call"},{"location":"unit-3/functions/#parameter","text":"a named \"input\" variable for a function; written in parenthesis on the function definition line someNumber in the example above","title":"parameter"},{"location":"unit-3/functions/#argument","text":"value provided to \"fill in\" a parameter during a function's invocation 5 in the example above","title":"argument"},{"location":"unit-3/functions/#return-value","text":"data that a given function gives back to the invoker 10 in the example above","title":"return value"},{"location":"unit-3/functions/#stringsplitdelimiter","text":"returns an array of different parts of broken up string based on a provided delimiter (separator) string that it should be broken on","title":"string.split(delimiter)"},{"location":"unit-3/functions/#functions-assignment","text":"Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"Functions Assignment"},{"location":"unit-3/functions/#functions-background","text":"","title":"Functions Background"},{"location":"unit-3/functions/#what-is-a-function","text":"A function is a way to store and reuse code, allowing us to write more dynamic and DRY code.","title":"What is a Function?"},{"location":"unit-3/functions/#box-analogy","text":"You can imagine a function as a box with two holes on opposing sides. The first hole in the box is for accepting an input of some kind. In the example above, our input is a number. On the other side of the box, we get an output based on our input. In this case, our input was the number 3, so our output was the number 9, since this function's job is simply to square our input.","title":"Box Analogy"},{"location":"unit-3/functions/#built-in-functions","text":"JavaScript comes with many common functions already built for you. For example, Math.round() is a function that: Accepts a decimal number as an input Returns an rounded integer as an output Let's try using it for a few values. let result = Math.round(5.333); console.log(result); // 5 result = Math.round(7.89); console.log(result); // 8 Can you think of other built-in functions you've already used? (Hint: One of them is used in the example above)","title":"Built-in functions"},{"location":"unit-3/functions/#writing-our-own-function","text":"Let's write our own function for squaring a number like in the image at the top. function square(x){ let output = x * x; return output; } Here's a detailed breakdown of the function declaration syntax : // [1] [2] [3] function example (parameter1, parameter2, parameter3, ...) { // [4] // JavaScript code statements // [5] // return; } // [6] There are a few very important terms to classify: The function keyword begins the function declaration syntax. The function name . In the square example, \"square\" is our function's name. A comma-separated list of zero or more parameters , surrounded by () parentheses. The square function has one parameter x . The start of the function body indicated by an { opening curly brace. An optional return statement . If your function doesn't need to output any values, you may not need a return statement. Our square function needs one since it is calculating and outputing the square of a number. Note: A return; on its own will simply end the function and return nothing. When we say return ___; Whatever the ___ is will be the output of our function. In the square function, we are returning/outputting the square of x . The end of the function body indicated by a } closing curly brace.","title":"Writing our own function"},{"location":"unit-3/functions/#invoking-a-function","text":"If you just paste in the above function to a program and run it, you won't see any result. This is because all we have done so far is written the function definition . Defining a function is like writing a recipe: it doesn't give you anything to chew on until you actually \"use\" it! We use our functions by invoking them. Here is a program that invokes our square function 3 times and logs each result. function square(x){ let output = x * x; return output; } let result = square(5); console.log(result); // 25 console.log(square(6)); // 36 console.log(square(7)); // 49 Try running the above code, and notice that the three separate results logged to the screen.","title":"Invoking a function"},{"location":"unit-3/functions/#parameters-and-arguments","text":"Let's review the function call that we made above. I've simplified it down to just the first call of square(5) . If you run this code, nothing will happen, so no need to run this code to test it out: function square(x){ let output = x * x; return output; } square(5); // returns 25 We defined the function square with the parameter x . You can think of a parameter as a placeholder. It's a variable whose value is not known until we call or invoke the function and pass an argument . When the function is run, the parameter will be holding the value of the argument . So, when we call square(5) , the argument 5 is stored in the parameter x .","title":"Parameters and Arguments"},{"location":"unit-3/functions/#returning-from-a-function","text":"Whenever we reach a return statement inside of a function, a function will stop executing immediately. return statements are instructions to \"immediately stop the function and return this value\". It's important to remember this because you don't want to be adding any code statements after writing a return statement. function square(x){ let output = x * x; return output; console.log(\"The output is \" + output); // This line of code will never run }","title":"Returning from a Function"},{"location":"unit-3/functions/#why-functions","text":"Our example above is a short two-line function, but often in the real world, functions will invoke other functions that will perform complex calculations and potentially execute thousands of lines of code. For example, if we were writing the code for Amazon, we might have a function called processPayment() . Amazon needs to process payments in many different contexts, but by having a function that wraps this functionality, it's like a magic \"black box\" that can be do it all for us by simply invoking it. Being able to perform complex sequences of activities by simple invoking a function allows us to avoid repeating ourselves. Not repeating yourself is such an important part of writing good code that there's a popular acronym called DRY that programmers are taught to follow. DRY stands for Don't Repeat Yourself .","title":"Why functions?"},{"location":"unit-3/functions/#processing-arrays-with-functions","text":"Functions can accept any type of value as a parameter. Depending on what we need, we might write a function that accepts a number, a string, an object, or even an array as an argument. Once you're \"inside\" the function, remember that you can treat your parameters exactly like you would any other variable. Suppose we are tasked with writing a function that accepts an array of numbers as input and returns the sum of all those numbers. Our solution might look like the following: function addAll(numbersArray){ // We'll use this variable to keep track of the total as we add everything. let total = 0; // Add each number in the array to the total for (let i = 0; i < numbersArray.length; i++){ total = total + numbersArray[i]; } // Return the total we've built up at the end. return total; }","title":"Processing Arrays with Functions"},{"location":"unit-3/functions/#split-function-for-strings","text":"split() is a handy built-in function you can use to divide a single string up into an array of strings. We can learn the details by reading the MDN documentation. The easiest way to get there is to Google \"MDN string split\". The first result should lead you here . The split() method splits a string into an array of strings by separating the string into substrings. MDN also tells us we can pass in a separator parameter that specifies what String we want to divide the string based on. Try out each these examples to get a feel for how split() works. let list = \"bread, peanut butter, jelly\".split(\",\"); console.log(list); let newList = \"eggs, avocados, salsa, chorizo\".split(\", \"); console.log(newList); let numberOfWords = \"eggs, avocados, salsa, chorizo\".split(\", \").length; console.log(numberOfWords); let secondWord = \"eggs, avocados, salsa, chorizo\".split(\", \")[1]; console.log(secondWord); let words = \"once upon a time\".split(\" \"); console.log(words); Complete the Functions Exercise before moving forward.","title":"split() function for Strings"},{"location":"unit-3/functions/#functions-exercise","text":"Open index.html in Live Server and read the HTML code. Open up the Developer Console. Open script.js in VS Code. There is already an example exercise completed in script.js for you to use as an example of what to do. Below, there are prompts for functions that you should write. For each of these functions, you must define and test them. You will be in charge of calling each function 2 times with different arguments to ensure that it's working properly. For example, this is how it was done for the example exercise: Prompt: - Define a function named `addTwoNumbers` - This function has 2 parameters: - num1 - the first number to add - num2 - the second number to add - The is function will add the numbers contained in the parameters and return the result Example call: addTwoNumbers(2, 2); Expected return value: 4","title":"Functions Exercise"},{"location":"unit-3/functions/#addandmultiplyby5","text":"Define a function named addAndMultiplyBy5 This function has two parameter num1 - receives a number as an argument num2 - receives a number as an argument The purpose of this function is to add the two input numbers and multiply that result by 5 and return the result. Example Input: addAndMultiplyBy5(10, 5) Expected Output: 75","title":"addAndMultiplyBy5"},{"location":"unit-3/functions/#hourstominutes","text":"Define a function named hoursToMinutes This function has one parameter hours - receives a number as an argument The purpose of this function is to convert the number of hours received as an argument into minutes and return the result. Example Input: hoursToMinutes(2) Expected Output: 120","title":"hoursToMinutes"},{"location":"unit-3/functions/#getgreeting","text":"Define a function named getGreeting This function has one parameter name - receives a string as an argument The purpose of this function is to use the argument contained in the name parameter to greet the person. Example Input: getGreeting(\"Joe\"); Expected Output: \"Hello Joe!\"","title":"getGreeting"},{"location":"unit-3/functions/#givemebiggest","text":"Define a function named giveMeBiggest This function has two parameters num1 - receives a number as an argument num2 - receives a number as an argument The purpose of this function is to find the largest number contained in num1 and num2 and return it. Example Input: giveMeBiggest(100, 999) Expected Output: 999","title":"giveMeBiggest"},{"location":"unit-3/functions/#getlast","text":"Define a function named getLast This function has one parameter arr - an array that contains at least 3 elements The purpose of this function is to find and return the last element of the input array referenced by the parameter arr . Example Input: getLast([67, 7, 1, 5]) Expected Output: 5","title":"getLast"},{"location":"unit-3/functions/#multiplyall","text":"Define a function named multiplyAll This function has one parameter arr - an array of numbers that contains at least 4 elements The purpose of this function is to find the product of all the numbers in the arr array and return the product. Example Input: multiplyAll([1, 2, 3, 4]); Expected Output: 24 Hint: Similar to the addAll function we implemented in the examples.","title":"multiplyAll"},{"location":"unit-3/functions/#getlargest","text":"Define a function named getLargest This function has one parameter arr - an array of numbers that contains at least 5 elements The purpose of this function is to find and return the largest number in the array. Example Input: getLargest([7, 2, 7, 9, 3, 8, 12]) Expected Output: 12 Hint: Take a look at the longestWord example in the PREP lesson under the Bonus section. At the end, take a screenshot of your function outputs. It should look something like this (of course, the actual values will be different basd on your unique examples):","title":"getLargest"},{"location":"unit-3/functions/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-3/objects/","text":"Objects Objectives Utilize objects to store lists of properties connected to values Initialize an object Set properties on an object with both dot and bracket notation List instances in which bracket syntax should be used instead of dot syntax Iterate through an array of objects Compare and contrast objects and arrays Code an algorithm to search through an array of objects to locate a particular value Key Terms object a collection of associated properties and values; similar to array, except the indexes are string-based instead of integer-based let animal = { name: \"dog\", legs: 4 }; (object) property key-value pairs where the key is a string and the value is a data value associated with the key. Similar to index numbers for arrays. name and legs are both properties of the object in the above example (object) value value of some data that is linked to a property in the above animal example, \"dog\" is a value associated with the legs property (object) dot notation syntax for looking up a value in an object that places the property after a dot; can only be used when the exact name of the key is used (i.e. not a variable); preferred way to access a value, as long as the literal value of the key is known let animal = { name: \"dog\", legs: 4 }; console.log(animal.legs); // => 4 (object) bracket notation syntax for looking up a value in an object that places the property after brackets; strings or variables can be placed between the brackets let animal = { name: \"dog\", legs: 4 }; console.log(animal['legs`]); // => 4 Objects Assignment In this assignment, you will learn about how to create, change, and use JavaScript objects. Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. Objects Background Objects in JS are similar to Arrays, except the indexes are strings instead of integers. We primarily use JavaScript objects to store collections of related data . One of the primary reasons objects are so useful is that it allows for modeling of real world objects. For example, if you wanted to model a person in an object, it could be something like this: { firstName: \"Paul\", lastName: \"Atreides\", favoriteFood: \"pizza\", age: 35 } From this structure, you can tell that all of this data is related to one another. Specifically, this object represents a 35 year old person named Paul Atreides, who likes to eat pizza. This is called an object literal . Initialization The following code will initialize a new object representing a cat. let myAnimal = { name: \"cat\", legs: 4, genus: \"felis\", species: \"catus\", sound: \"meow\" }; The myAnimal object has these five properties (sometimes called keys): name , legs , genus , species , sound . Each property name also has an associated value. For example: The name property is associated with the \"cat\" value. The legs property is associated with the 4 value. Accessing Properties We can look up the value of a particular property in two different ways: dot notation or bracket notation . let myAnimal = { name: \"cat\", legs: 4, genus: \"felis\", species: \"catus\", sound: \"meow\" }; // Dot notation console.log( myAnimal.name ); // \"cat\" // Bracket notation console.log( myAnimal[\"name\"]); // \"cat\" // Also bracket notation var propName = \"genus\"; console.log( myAnimal[propName] ); // \"felis\" Note: when we use bracket notation, we need to use either a string (enclosed in quotes), or a variable that points to a string (not enclosed in quotes). JavaScript syntax does not allow the following. console.log( myAnimal.\"species\" ) // ILLEGAL / ERROR! Updating Properties You can also use dot or bracket notation to add new property-value pairs after the initialization, or to update existing ones. let myAnimal = { name: \"cat\", legs: 4, genus: \"felis\", species: \"catus\", sound: \"meow\" }; // Dot notation myAnimal.personality = \"Strange\"; // Adds a new property myAnimal.sound = \"purr\"; // Updates an existing property // Bracket notation myAnimal[\"tail\"] = true; // Adds a new property console.log( myAnimal ); Complete Objects Exercise: Basics Before continuing Objects Exercise: Basics Open index.html in Live Server and read the HTML code. Open up the Developer Console. Open script.js in VS Code. Declare an object person and assign to it an object literal with the following 3 properties: firstName lastName hobby Assign each of these properties with appropriate string values. Now, log person to the console with the label: \"Initial person:\" and check your Developer Console to see the output. It should look something like this: Using Dot Notation , log the person object's firstName and lastName property to the console with the label: \"This person's name is\" . Using Bracket Notation , log the person object's hobby property to the console with the label: \"This person's hobby is\" . Using Dot Notation , add a new property called job and assign to it the string \"Software Engineer\" . Remember, this process has the same syntax as updating a property . Recall that bracket notation uses a string value to access or update properties. This means that we can utilize a variable that contains a string value with bracket notation, as well. Delcare a variable propName , and assign to it the string \"previousJob\" . Using Bracket Notation and the variable we just declared, update person 's previousJob property so that it contains an appropriate string value. Using either dot notation or bracket notation , log the person's previousJob property to the console with the label: \"This person's previous job was\" . Log the person object to the console with the label: \"Final person:\" . In your Developer Console, you should see something like this currently: Arrays of Objects Background Often times, we want to process a list of similar objects in our program. We can group our objects together by including them all in an array. For example, let's pretend that we're doing some programming for a phone, and we need to keep track of a list of contacts. Here are four properties we might want to track about each contact: First and last name Phone number Mom's name (so we can ask about her) Initialization let contacts = [ { firstName: \"John\", lastName: \"Lennon\", phoneNumber: \"555-777-2222\", momsName: \"Julia\" }, { firstName: \"George\", lastName: \"Harrison\", phoneNumber: \"555-777-3333\", momsName: \"Louise\" }, { firstName: \"Paul\", lastName: \"McCartney\", phoneNumber: \"555-777-4444\", momsName: \"Mary\" }, { firstName: \"Ringo\", lastName: \"Starr\", phoneNumber: \"555-777-5555\", momsName: \"Elsie\" } ]; Adding to arrays of objects Our list of contacts is just like any other array, except it happens to contain objects. To add a new item, we can simply use the push function like we always would. let otherContact = { firstName: \"Pete\", lastName: \"Best\", phoneNumber: \"555-777-2233\", momsName: \"Mona\" }; contacts.push( otherContact ); Iteration and property acccess Suppose now we want to \"text\" each of our contacts and ask about their mothers (since we're a considerate friend). Since our contacts array is just like any other array, we can iterate through our items just like we would with any other array: let contacts = [ { firstName: \"John\", lastName: \"Lennon\", phoneNumber: \"555-777-2222\", momsName: \"Julia\" }, { firstName: \"George\", lastName: \"Harrison\", phoneNumber: \"555-777-3333\", momsName: \"Louise\" }, { firstName: \"Paul\", lastName: \"McCartney\", phoneNumber: \"555-777-4444\", momsName: \"Mary\" }, { firstName: \"Ringo\", lastName: \"Starr\", phoneNumber: \"555-777-5555\", momsName: \"Elsie\" } ]; let otherContact = { firstName: \"Pete\", lastName: \"Best\", phoneNumber: \"555-777-2233\", momsName: \"Mona\" }; contacts.push( otherContact ); for (let i=0; i<contacts.length; i++){ let currentContact = contacts[i]; console.log(\"Hi \" + currentContact.firstName + \". How is \" + currentContact.momsName + \"?\"); } Please complete the Objects Exercise: Arrays of Objects before moving forward. Objects Exercise: Arrays of Objects Head back to Google Chome and make sure that index.html is still opened with Live Server. Make sure that script.js is still opened in the code editor. Declare an array shapes that contains 3 object literals that each represent a shape. Each object should have the properties: name sides For example: { name: \"square\", sides: 4} Note: Make sure that each shape has a different sides property greater than 0. Declare a variable circle and assign to it an object literal like the ones you just declared that represents a circle. (A circle has zero sides) Using push , add the circle object to the end of your shapes array. Using a for loop, iterate over the shapes array and log a statement to the console for each shape object in this format: A (name of shape) has (number of sides) sides. Note: Replace (name of shape) and (number of sides) with each object's property values. Note: You can accomplish this through string concatenation using the + operator. Log the shapes array to the console with the label: \"Final shapes array:\" . Verify that your console output looks similar to this: Searching Arrays of Objects Background Let's return to our list of contacts from the previous section. let contacts = [ { firstName: \"John\", lastName: \"Lennon\", phoneNumber: \"555-777-2222\", momsName: \"Julia\" }, { firstName: \"George\", lastName: \"Harrison\", phoneNumber: \"555-777-3333\", momsName: \"Louise\" }, { firstName: \"Paul\", lastName: \"McCartney\", phoneNumber: \"555-777-4444\", momsName: \"Mary\" }, { firstName: \"Ringo\", lastName: \"Starr\", phoneNumber: \"555-777-5555\", momsName: \"Elsie\" } ]; We have a relatively small list in this example, but in the real world, we might have thousands of contacts. Rather than scrolling through thousands of people, it would more efficient to be able to search for a particular person. Searching is a common coding problem, and we can do it with simple for loop and some conditional logic. let contacts = [ { firstName: \"John\", lastName: \"Lennon\", phoneNumber: \"555-777-2222\", momsName: \"Julia\" }, { firstName: \"George\", lastName: \"Harrison\", phoneNumber: \"555-777-3333\", momsName: \"Louise\" }, { firstName: \"Paul\", lastName: \"McCartney\", phoneNumber: \"555-777-4444\", momsName: \"Mary\" }, { firstName: \"Ringo\", lastName: \"Starr\", phoneNumber: \"555-777-5555\", momsName: \"Elsie\" } ]; // Collect a search string from a user let searchString = prompt(\"Who do you want to find?\"); // Create a variable to eventually point to the person we want to find. let foundContact = null; // Iterate over contacts for (let i = 0; i < contacts.length; i++){ let currentContact = contacts[i]j; // Check if this contact's firstName matches our search if( currentContact.firstName === searchString ){ foundContact = currentContact; break; } } // We are now outside of our for loop. // if the foundContact variable is still null, we know we have NOT found this person. if (foundContact === null){ console.log(\"No matching record was found for \" + searchString) } else { console.log(\"We found a matching contact:\") console.log(foundContact.firstName + \"'s number is \" + foundContact.phoneNumber) } Note: you may notice a break; statement in the for loop above. A break; statement ends a loop early. You can read about 2 special reserved keywords break and continue here . Questions for consideration Does capitalization matter in the example above? If so, how can we make it not matter? Complete Objects Exercise: Searching arrays of objects before continuing. Objects Exercise: Searching Arrays of Objects Return to where we left off with our shapes array. In this exercise, we will search our shapes array for a shape with the number of sides that the user chooses. At the bottom of our script.js file, add a prompt which asks the user to \"Please enter a number of sides you want to search for: \" and assign the result to a variable numSides . Note: Don't forget! Any response you get from the user will be a string value, but the number of sides you want to search for is a number value. Declare a variable foundShape and assign the value null to it. Iterate over the shapes array, and for each shape, check if that shape's sides property matches the numSides response we got from the user. If there's a match, we should assign the current shape to the foundShape variable. After the for loop ends, check if foundShape is still null . If it is, log to the console the message \"No matching shape was found.\" . If it is NOT null , log to the console the message \"We found a shape! It's the (name of shape).\" , replacing (name of shape) with the name property of the shape you found. Finally, save your code and refresh the browser. Search for a shape, and screenshot the final output of your program. It should look something like this: Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Objects"},{"location":"unit-3/objects/#objects","text":"","title":"Objects"},{"location":"unit-3/objects/#objectives","text":"Utilize objects to store lists of properties connected to values Initialize an object Set properties on an object with both dot and bracket notation List instances in which bracket syntax should be used instead of dot syntax Iterate through an array of objects Compare and contrast objects and arrays Code an algorithm to search through an array of objects to locate a particular value","title":"Objectives"},{"location":"unit-3/objects/#key-terms","text":"","title":"Key Terms"},{"location":"unit-3/objects/#object","text":"a collection of associated properties and values; similar to array, except the indexes are string-based instead of integer-based let animal = { name: \"dog\", legs: 4 };","title":"object"},{"location":"unit-3/objects/#object-property","text":"key-value pairs where the key is a string and the value is a data value associated with the key. Similar to index numbers for arrays. name and legs are both properties of the object in the above example","title":"(object) property"},{"location":"unit-3/objects/#object-value","text":"value of some data that is linked to a property in the above animal example, \"dog\" is a value associated with the legs property","title":"(object) value"},{"location":"unit-3/objects/#object-dot-notation","text":"syntax for looking up a value in an object that places the property after a dot; can only be used when the exact name of the key is used (i.e. not a variable); preferred way to access a value, as long as the literal value of the key is known let animal = { name: \"dog\", legs: 4 }; console.log(animal.legs); // => 4","title":"(object) dot notation"},{"location":"unit-3/objects/#object-bracket-notation","text":"syntax for looking up a value in an object that places the property after brackets; strings or variables can be placed between the brackets let animal = { name: \"dog\", legs: 4 }; console.log(animal['legs`]); // => 4","title":"(object) bracket notation"},{"location":"unit-3/objects/#objects-assignment","text":"In this assignment, you will learn about how to create, change, and use JavaScript objects. Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"Objects Assignment"},{"location":"unit-3/objects/#objects-background","text":"Objects in JS are similar to Arrays, except the indexes are strings instead of integers. We primarily use JavaScript objects to store collections of related data . One of the primary reasons objects are so useful is that it allows for modeling of real world objects. For example, if you wanted to model a person in an object, it could be something like this: { firstName: \"Paul\", lastName: \"Atreides\", favoriteFood: \"pizza\", age: 35 } From this structure, you can tell that all of this data is related to one another. Specifically, this object represents a 35 year old person named Paul Atreides, who likes to eat pizza. This is called an object literal .","title":"Objects Background"},{"location":"unit-3/objects/#initialization","text":"The following code will initialize a new object representing a cat. let myAnimal = { name: \"cat\", legs: 4, genus: \"felis\", species: \"catus\", sound: \"meow\" }; The myAnimal object has these five properties (sometimes called keys): name , legs , genus , species , sound . Each property name also has an associated value. For example: The name property is associated with the \"cat\" value. The legs property is associated with the 4 value.","title":"Initialization"},{"location":"unit-3/objects/#accessing-properties","text":"We can look up the value of a particular property in two different ways: dot notation or bracket notation . let myAnimal = { name: \"cat\", legs: 4, genus: \"felis\", species: \"catus\", sound: \"meow\" }; // Dot notation console.log( myAnimal.name ); // \"cat\" // Bracket notation console.log( myAnimal[\"name\"]); // \"cat\" // Also bracket notation var propName = \"genus\"; console.log( myAnimal[propName] ); // \"felis\" Note: when we use bracket notation, we need to use either a string (enclosed in quotes), or a variable that points to a string (not enclosed in quotes). JavaScript syntax does not allow the following. console.log( myAnimal.\"species\" ) // ILLEGAL / ERROR!","title":"Accessing Properties"},{"location":"unit-3/objects/#updating-properties","text":"You can also use dot or bracket notation to add new property-value pairs after the initialization, or to update existing ones. let myAnimal = { name: \"cat\", legs: 4, genus: \"felis\", species: \"catus\", sound: \"meow\" }; // Dot notation myAnimal.personality = \"Strange\"; // Adds a new property myAnimal.sound = \"purr\"; // Updates an existing property // Bracket notation myAnimal[\"tail\"] = true; // Adds a new property console.log( myAnimal ); Complete Objects Exercise: Basics Before continuing","title":"Updating Properties"},{"location":"unit-3/objects/#objects-exercise-basics","text":"Open index.html in Live Server and read the HTML code. Open up the Developer Console. Open script.js in VS Code. Declare an object person and assign to it an object literal with the following 3 properties: firstName lastName hobby Assign each of these properties with appropriate string values. Now, log person to the console with the label: \"Initial person:\" and check your Developer Console to see the output. It should look something like this: Using Dot Notation , log the person object's firstName and lastName property to the console with the label: \"This person's name is\" . Using Bracket Notation , log the person object's hobby property to the console with the label: \"This person's hobby is\" . Using Dot Notation , add a new property called job and assign to it the string \"Software Engineer\" . Remember, this process has the same syntax as updating a property . Recall that bracket notation uses a string value to access or update properties. This means that we can utilize a variable that contains a string value with bracket notation, as well. Delcare a variable propName , and assign to it the string \"previousJob\" . Using Bracket Notation and the variable we just declared, update person 's previousJob property so that it contains an appropriate string value. Using either dot notation or bracket notation , log the person's previousJob property to the console with the label: \"This person's previous job was\" . Log the person object to the console with the label: \"Final person:\" . In your Developer Console, you should see something like this currently:","title":"Objects Exercise: Basics"},{"location":"unit-3/objects/#arrays-of-objects-background","text":"Often times, we want to process a list of similar objects in our program. We can group our objects together by including them all in an array. For example, let's pretend that we're doing some programming for a phone, and we need to keep track of a list of contacts. Here are four properties we might want to track about each contact: First and last name Phone number Mom's name (so we can ask about her)","title":"Arrays of Objects Background"},{"location":"unit-3/objects/#initialization_1","text":"let contacts = [ { firstName: \"John\", lastName: \"Lennon\", phoneNumber: \"555-777-2222\", momsName: \"Julia\" }, { firstName: \"George\", lastName: \"Harrison\", phoneNumber: \"555-777-3333\", momsName: \"Louise\" }, { firstName: \"Paul\", lastName: \"McCartney\", phoneNumber: \"555-777-4444\", momsName: \"Mary\" }, { firstName: \"Ringo\", lastName: \"Starr\", phoneNumber: \"555-777-5555\", momsName: \"Elsie\" } ];","title":"Initialization"},{"location":"unit-3/objects/#adding-to-arrays-of-objects","text":"Our list of contacts is just like any other array, except it happens to contain objects. To add a new item, we can simply use the push function like we always would. let otherContact = { firstName: \"Pete\", lastName: \"Best\", phoneNumber: \"555-777-2233\", momsName: \"Mona\" }; contacts.push( otherContact );","title":"Adding to arrays of objects"},{"location":"unit-3/objects/#iteration-and-property-acccess","text":"Suppose now we want to \"text\" each of our contacts and ask about their mothers (since we're a considerate friend). Since our contacts array is just like any other array, we can iterate through our items just like we would with any other array: let contacts = [ { firstName: \"John\", lastName: \"Lennon\", phoneNumber: \"555-777-2222\", momsName: \"Julia\" }, { firstName: \"George\", lastName: \"Harrison\", phoneNumber: \"555-777-3333\", momsName: \"Louise\" }, { firstName: \"Paul\", lastName: \"McCartney\", phoneNumber: \"555-777-4444\", momsName: \"Mary\" }, { firstName: \"Ringo\", lastName: \"Starr\", phoneNumber: \"555-777-5555\", momsName: \"Elsie\" } ]; let otherContact = { firstName: \"Pete\", lastName: \"Best\", phoneNumber: \"555-777-2233\", momsName: \"Mona\" }; contacts.push( otherContact ); for (let i=0; i<contacts.length; i++){ let currentContact = contacts[i]; console.log(\"Hi \" + currentContact.firstName + \". How is \" + currentContact.momsName + \"?\"); } Please complete the Objects Exercise: Arrays of Objects before moving forward.","title":"Iteration and property acccess"},{"location":"unit-3/objects/#objects-exercise-arrays-of-objects","text":"Head back to Google Chome and make sure that index.html is still opened with Live Server. Make sure that script.js is still opened in the code editor. Declare an array shapes that contains 3 object literals that each represent a shape. Each object should have the properties: name sides For example: { name: \"square\", sides: 4} Note: Make sure that each shape has a different sides property greater than 0. Declare a variable circle and assign to it an object literal like the ones you just declared that represents a circle. (A circle has zero sides) Using push , add the circle object to the end of your shapes array. Using a for loop, iterate over the shapes array and log a statement to the console for each shape object in this format: A (name of shape) has (number of sides) sides. Note: Replace (name of shape) and (number of sides) with each object's property values. Note: You can accomplish this through string concatenation using the + operator. Log the shapes array to the console with the label: \"Final shapes array:\" . Verify that your console output looks similar to this:","title":"Objects Exercise: Arrays of Objects"},{"location":"unit-3/objects/#searching-arrays-of-objects-background","text":"Let's return to our list of contacts from the previous section. let contacts = [ { firstName: \"John\", lastName: \"Lennon\", phoneNumber: \"555-777-2222\", momsName: \"Julia\" }, { firstName: \"George\", lastName: \"Harrison\", phoneNumber: \"555-777-3333\", momsName: \"Louise\" }, { firstName: \"Paul\", lastName: \"McCartney\", phoneNumber: \"555-777-4444\", momsName: \"Mary\" }, { firstName: \"Ringo\", lastName: \"Starr\", phoneNumber: \"555-777-5555\", momsName: \"Elsie\" } ]; We have a relatively small list in this example, but in the real world, we might have thousands of contacts. Rather than scrolling through thousands of people, it would more efficient to be able to search for a particular person. Searching is a common coding problem, and we can do it with simple for loop and some conditional logic. let contacts = [ { firstName: \"John\", lastName: \"Lennon\", phoneNumber: \"555-777-2222\", momsName: \"Julia\" }, { firstName: \"George\", lastName: \"Harrison\", phoneNumber: \"555-777-3333\", momsName: \"Louise\" }, { firstName: \"Paul\", lastName: \"McCartney\", phoneNumber: \"555-777-4444\", momsName: \"Mary\" }, { firstName: \"Ringo\", lastName: \"Starr\", phoneNumber: \"555-777-5555\", momsName: \"Elsie\" } ]; // Collect a search string from a user let searchString = prompt(\"Who do you want to find?\"); // Create a variable to eventually point to the person we want to find. let foundContact = null; // Iterate over contacts for (let i = 0; i < contacts.length; i++){ let currentContact = contacts[i]j; // Check if this contact's firstName matches our search if( currentContact.firstName === searchString ){ foundContact = currentContact; break; } } // We are now outside of our for loop. // if the foundContact variable is still null, we know we have NOT found this person. if (foundContact === null){ console.log(\"No matching record was found for \" + searchString) } else { console.log(\"We found a matching contact:\") console.log(foundContact.firstName + \"'s number is \" + foundContact.phoneNumber) } Note: you may notice a break; statement in the for loop above. A break; statement ends a loop early. You can read about 2 special reserved keywords break and continue here . Questions for consideration Does capitalization matter in the example above? If so, how can we make it not matter? Complete Objects Exercise: Searching arrays of objects before continuing.","title":"Searching Arrays of Objects Background"},{"location":"unit-3/objects/#objects-exercise-searching-arrays-of-objects","text":"Return to where we left off with our shapes array. In this exercise, we will search our shapes array for a shape with the number of sides that the user chooses. At the bottom of our script.js file, add a prompt which asks the user to \"Please enter a number of sides you want to search for: \" and assign the result to a variable numSides . Note: Don't forget! Any response you get from the user will be a string value, but the number of sides you want to search for is a number value. Declare a variable foundShape and assign the value null to it. Iterate over the shapes array, and for each shape, check if that shape's sides property matches the numSides response we got from the user. If there's a match, we should assign the current shape to the foundShape variable. After the for loop ends, check if foundShape is still null . If it is, log to the console the message \"No matching shape was found.\" . If it is NOT null , log to the console the message \"We found a shape! It's the (name of shape).\" , replacing (name of shape) with the name property of the shape you found. Finally, save your code and refresh the browser. Search for a shape, and screenshot the final output of your program. It should look something like this:","title":"Objects Exercise: Searching Arrays of Objects"},{"location":"unit-3/objects/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-4/higher-order-programming/","text":"Higher Order Programming Objectives Describe what qualifies a function as \"higher order\" Assign functions to variables Utilize callback functions as arguments to other functions Use forEach() as an alternative to a standard for loop Apply the map() function to solve algorithmic problems Key Terms higher order programming treating functions like data; use of functions that include functions as parameters function expression a way to define a function and assign it to a variable let greet = function(name) { console.log(\"Hello, \" + name + \"!\"); }; callback a function provided as an argument to another function; will be invoked at a future point in time, often after a specific action has been performed forEach() higher order array method for iterating over items and invoking a common function for each item in the array let people = [ 'Alice', 'Bob', 'Candice']; let greetFunction = function(person) { console.log('Hi ' + person); } people.forEach(greetFunction); Higher Order Programming Assignment Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. Higher Order Programming Background Recall that a function is simply a block of code. // Definition function doubleIt(num){ return num * 2; } It can optionally accept some parameters, and it returns a value when we invoke it. // Invocation doubleIt(2); // returns 4 Up to this point, there has been a clear distinction between our functions and our data. Our data has always been numbers, strings, and objects that we have sometimes assigned to variables. let dataNum = 6; console.log(typeof dataNum); // number let dataStr = 'Everest'; console.log(typeof dataStr); // string Higher order programming, also called functional programming, involves treating our functions themselves like data. let tripleIt = function(num){ return num * 3; } console.log(typeof tripleIt); // function tripleIt(33); Notice how we can assign our function to a variable, and we use the variable name as the function's name. This syntax is called a Function Expression . Callback Functions In the above section, we found out that we can treat our functions themselves as data. This also means that we can pass functions to other functions as an argument. Functions that we pass to other functions are called callback functions . Let's do an example by reusing the functions we declared above: let doubleIt = function(num){ return num * 2; } let tripleIt = function(num){ return num * 3; } function doSomethingTo5(callback) { return callback(5); } The function doSomethingTo5 takes a callback function as an argument and stores a reference to it in the parameter callback . Inside the function block, we return the result of calling callback with 5 as an argument. Let's run this code using our 2 functions as callbacks: let doubleIt = function(num){ return num * 2; } let tripleIt = function(num){ return num * 3; } function doSomethingTo5(callback) { return callback(5); } console.log(doSomethingTo5(doubleIt)); // 10 console.log(doSomethingTo5(tripleIt)); // 15 Run this code in your example directory, and take a look at the output. Does it match the expected? Array.forEach() We won't go into all of the possible ways we can use Higher Order Programming in our code, but one of the most common places to use higher order programming is with arrays. Let's pretend we're a bit of a cat hoarder, so decide it's best to store our entire collection of cats in an array. let cats = [\"Sylvester\", \"Tigger\", \"Mr. Bigglesworth\", \"Felix\", \"Simba\"]; When it's dinner time, we need to yell for each of our kitties by name. Up to now, the way we might handle this is with a standard for loop: let cats = [\"Sylvester\", \"Tigger\", \"Mr. Bigglesworth\", \"Felix\", \"Simba\"]; for (let i =0; i < cats.length; i++){ console.log(cats[i].toUpperCase() + \", IT'S DINNER TIME!\"); } This solution will certainly get the job done. For loops like this are hopefully becoming second nature to us by now, but there are a few details that make our code a bit \"wordy\". When we're reading this code, we have to manage the i counter ourselves. It's a bit distracting to look at. Whenever we are referencing the current cat with an iteration, we have to constantly remind ourselves that we're inside of a loop, and we need to use our counter to say cats[i] . Needing to \"process\" every item in an array is so common that JavaScript includes a built-in function called forEach to make this easier for you. forEach is a higher order function that takes a callback function as an argument. The callback function works like a \"hint\" to forEach to tell it how to process a SINGLE item. In our case, we might use a function like this one to describe how to process a single cat. let forOne = function(cat){ console.log(cat.toUpperCase() + \", IT'S DINNER TIME!\"); } Notice that we're not saying cats[i] here. We're simply writing our function to accept a single parameter called cat , and we're processing that single cat in the function. Now that we've set the rule for how to handle a single cat, the forEach function can do the rest of the work for us! let cats = [\"Sylvester\", \"Tigger\", \"Mr. Bigglesworth\", \"Felix\", \"Simba\"]; let forOne = function(cat){ console.log(cat.toUpperCase() + \", IT'S DINNER TIME!\"); } cats.forEach(forOne); Try running the above code, and you'll notice that it does exactly what our earlier for loop did for us. It just happens to be more concise and readable. Complete the Higher Order Programming Exercise before continuing. Higher Order Programming Exercise Complete the following prompts below: Calculator Function Define a function named calculator This function has three parameters num1 - the first number to perform math on num2 - the second number to perform math on operation - a callback function that performs a mathematical operation on the two input. There are 4 pre-defined functions called addition , subtraction , multiplication , and division . The purpose of this function is to call the operation function on num1 and num2 and return the result. Example Input: calculator(3, 5, multiplication) Expected Output: 15 Implement the calculator function and call it with 3 examples (Just like we did in the Functions Exercise): add 7 and 15 subtract 8 from 35 divide 681 by 3 Poor man's forEach Define a function called forEach This function has 2 parameters array - an input array func - a callback function to perform on each element of array The purpose of this function is to mimic Array's built-in forEach higher order function Example Input: let logIt = function(element) { console.log(element); } forEach([1, 3, 5, 7], logIt) Expected Output: 1 3 5 7 Use a normal for loop to accomplish this. Declare a variable yellIt and assign to it a function that takes one string parameter str . yellIt will log str in all caps. Declare an array words that contains at least 4 strings, and call your poor man's forEach method with the words array and yellIt function as your arguments. Print Each Song Title Examine the exampleSongs array. It is an array of objects that each represent a song. Using the built-in forEach method of arrays, print ONLY the title of each song to the console. You will need to define a callback function printSongTitle that prints out ONE song's title, and pass it to your forEach call. Once you've completed each of the above exercises, take a screenshot of your Developer Console. It should look similar to the one below, but may contain different values for the \"Poor man's forEach\" exercise. Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Higher Order Programming"},{"location":"unit-4/higher-order-programming/#higher-order-programming","text":"","title":"Higher Order Programming"},{"location":"unit-4/higher-order-programming/#objectives","text":"Describe what qualifies a function as \"higher order\" Assign functions to variables Utilize callback functions as arguments to other functions Use forEach() as an alternative to a standard for loop Apply the map() function to solve algorithmic problems","title":"Objectives"},{"location":"unit-4/higher-order-programming/#key-terms","text":"","title":"Key Terms"},{"location":"unit-4/higher-order-programming/#higher-order-programming_1","text":"treating functions like data; use of functions that include functions as parameters","title":"higher order programming"},{"location":"unit-4/higher-order-programming/#function-expression","text":"a way to define a function and assign it to a variable let greet = function(name) { console.log(\"Hello, \" + name + \"!\"); };","title":"function expression"},{"location":"unit-4/higher-order-programming/#callback","text":"a function provided as an argument to another function; will be invoked at a future point in time, often after a specific action has been performed","title":"callback"},{"location":"unit-4/higher-order-programming/#foreach","text":"higher order array method for iterating over items and invoking a common function for each item in the array let people = [ 'Alice', 'Bob', 'Candice']; let greetFunction = function(person) { console.log('Hi ' + person); } people.forEach(greetFunction);","title":"forEach()"},{"location":"unit-4/higher-order-programming/#higher-order-programming-assignment","text":"Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"Higher Order Programming Assignment"},{"location":"unit-4/higher-order-programming/#higher-order-programming-background","text":"Recall that a function is simply a block of code. // Definition function doubleIt(num){ return num * 2; } It can optionally accept some parameters, and it returns a value when we invoke it. // Invocation doubleIt(2); // returns 4 Up to this point, there has been a clear distinction between our functions and our data. Our data has always been numbers, strings, and objects that we have sometimes assigned to variables. let dataNum = 6; console.log(typeof dataNum); // number let dataStr = 'Everest'; console.log(typeof dataStr); // string Higher order programming, also called functional programming, involves treating our functions themselves like data. let tripleIt = function(num){ return num * 3; } console.log(typeof tripleIt); // function tripleIt(33); Notice how we can assign our function to a variable, and we use the variable name as the function's name. This syntax is called a Function Expression .","title":"Higher Order Programming Background"},{"location":"unit-4/higher-order-programming/#callback-functions","text":"In the above section, we found out that we can treat our functions themselves as data. This also means that we can pass functions to other functions as an argument. Functions that we pass to other functions are called callback functions . Let's do an example by reusing the functions we declared above: let doubleIt = function(num){ return num * 2; } let tripleIt = function(num){ return num * 3; } function doSomethingTo5(callback) { return callback(5); } The function doSomethingTo5 takes a callback function as an argument and stores a reference to it in the parameter callback . Inside the function block, we return the result of calling callback with 5 as an argument. Let's run this code using our 2 functions as callbacks: let doubleIt = function(num){ return num * 2; } let tripleIt = function(num){ return num * 3; } function doSomethingTo5(callback) { return callback(5); } console.log(doSomethingTo5(doubleIt)); // 10 console.log(doSomethingTo5(tripleIt)); // 15 Run this code in your example directory, and take a look at the output. Does it match the expected?","title":"Callback Functions"},{"location":"unit-4/higher-order-programming/#arrayforeach","text":"We won't go into all of the possible ways we can use Higher Order Programming in our code, but one of the most common places to use higher order programming is with arrays. Let's pretend we're a bit of a cat hoarder, so decide it's best to store our entire collection of cats in an array. let cats = [\"Sylvester\", \"Tigger\", \"Mr. Bigglesworth\", \"Felix\", \"Simba\"]; When it's dinner time, we need to yell for each of our kitties by name. Up to now, the way we might handle this is with a standard for loop: let cats = [\"Sylvester\", \"Tigger\", \"Mr. Bigglesworth\", \"Felix\", \"Simba\"]; for (let i =0; i < cats.length; i++){ console.log(cats[i].toUpperCase() + \", IT'S DINNER TIME!\"); } This solution will certainly get the job done. For loops like this are hopefully becoming second nature to us by now, but there are a few details that make our code a bit \"wordy\". When we're reading this code, we have to manage the i counter ourselves. It's a bit distracting to look at. Whenever we are referencing the current cat with an iteration, we have to constantly remind ourselves that we're inside of a loop, and we need to use our counter to say cats[i] . Needing to \"process\" every item in an array is so common that JavaScript includes a built-in function called forEach to make this easier for you. forEach is a higher order function that takes a callback function as an argument. The callback function works like a \"hint\" to forEach to tell it how to process a SINGLE item. In our case, we might use a function like this one to describe how to process a single cat. let forOne = function(cat){ console.log(cat.toUpperCase() + \", IT'S DINNER TIME!\"); } Notice that we're not saying cats[i] here. We're simply writing our function to accept a single parameter called cat , and we're processing that single cat in the function. Now that we've set the rule for how to handle a single cat, the forEach function can do the rest of the work for us! let cats = [\"Sylvester\", \"Tigger\", \"Mr. Bigglesworth\", \"Felix\", \"Simba\"]; let forOne = function(cat){ console.log(cat.toUpperCase() + \", IT'S DINNER TIME!\"); } cats.forEach(forOne); Try running the above code, and you'll notice that it does exactly what our earlier for loop did for us. It just happens to be more concise and readable. Complete the Higher Order Programming Exercise before continuing.","title":"Array.forEach()"},{"location":"unit-4/higher-order-programming/#higher-order-programming-exercise","text":"Complete the following prompts below:","title":"Higher Order Programming Exercise"},{"location":"unit-4/higher-order-programming/#calculator-function","text":"Define a function named calculator This function has three parameters num1 - the first number to perform math on num2 - the second number to perform math on operation - a callback function that performs a mathematical operation on the two input. There are 4 pre-defined functions called addition , subtraction , multiplication , and division . The purpose of this function is to call the operation function on num1 and num2 and return the result. Example Input: calculator(3, 5, multiplication) Expected Output: 15 Implement the calculator function and call it with 3 examples (Just like we did in the Functions Exercise): add 7 and 15 subtract 8 from 35 divide 681 by 3","title":"Calculator Function"},{"location":"unit-4/higher-order-programming/#poor-mans-foreach","text":"Define a function called forEach This function has 2 parameters array - an input array func - a callback function to perform on each element of array The purpose of this function is to mimic Array's built-in forEach higher order function Example Input: let logIt = function(element) { console.log(element); } forEach([1, 3, 5, 7], logIt) Expected Output: 1 3 5 7 Use a normal for loop to accomplish this. Declare a variable yellIt and assign to it a function that takes one string parameter str . yellIt will log str in all caps. Declare an array words that contains at least 4 strings, and call your poor man's forEach method with the words array and yellIt function as your arguments.","title":"Poor man's forEach"},{"location":"unit-4/higher-order-programming/#print-each-song-title","text":"Examine the exampleSongs array. It is an array of objects that each represent a song. Using the built-in forEach method of arrays, print ONLY the title of each song to the console. You will need to define a callback function printSongTitle that prints out ONE song's title, and pass it to your forEach call. Once you've completed each of the above exercises, take a screenshot of your Developer Console. It should look similar to the one below, but may contain different values for the \"Poor man's forEach\" exercise.","title":"Print Each Song Title"},{"location":"unit-4/higher-order-programming/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-4/variable-scope/","text":"Scope Objectives Identify when a variable is in the global scope or block scope Identify the scope of any variable you are using in your code Understand when and why a ReferenceError is thrown Key Terms variable scope refers to where a variable can be accessed or used within the code. A variable's scope is determined by where it is declared , not assigned . global scope a variable in the global scope means that it is accessible from anywhere in the code. Variables declared outside of any function or code block are in the global scope. block scope a variable in block scope means that it is declared inside of a code block (between a set of {} ) and is only accessible within the code block that it was declared in code block a section of code enclosed in curly braces {} . It is used to group statements together, such as in functions, loops, and conditionals ReferenceError an error that occurs in JavaScript when you try to use a variable that hasn't been declared or is outside of its scope. Variable Scope Assignment Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. Variable Scope Background We learned earlier that every data value in JavaScript has an associated type. We also learned that variables are like labels for associated values. We can think of a variable kind of like a named sticky note with its associated value written on the note. Whenever our code mentions the name of that particular sticky note, the JavaScript interpreter basically inserts the associated value into the code in place of the variable when that line executes. Up to this point in time, we've assumed that after we've declared a variable we can simply use it wherever we want. The reality is that this is not the case. Every variable has an associated scope. That scope is determined by where the variable is declared (not assigned). Scope is a topic that runs deep, but we're just going to focus on the two most common types of scope in this course: global scope and block scope. Global Scope Consider the following code snippet. let globalMessage = \"Hello from global scope\"; console.log(globalMessage); function doStuff(){ console.log(\"entering doStuff function.\"); console.log(globalMessage); console.log(\"exiting doStuff function.\"); } doStuff(); globalMessage is a global variable because it was declared outside of any code block. The fact that globalMessage is \"global\" means that the variable can be referenced \"globally\" - either outside of a function OR within a function like it is here. Global Scope Quick Exercise Try to guess what will be logged to the console from the above snippet and write it down. Then, run this code and see if you guessed correctly. Block Scope Block Scope is different from Global Scope because it limits from where a variable can be accessed from. Specifically, a variable with block scope is only accessible from within the block of code it was declared in. Usually, this is either a function, loop, or conditional statement. Consider the following code snippet. let globalMessage = \"Hello from global scope\"; console.log(globalMessage); function doStuff(){ console.log(\"entering doStuff function.\"); let localMessage = \"Hello from doStuff local scope\"; console.log(globalMessage); console.log(localMessage); console.log(\"exiting doStuff function.\"); } doStuff(); console.log(localMessage); localMessage is a local variable , meaning it was declared inside of a function. The fact that localMessage is \"local\" means that the variable can be referenced \"locally\" within this particular function it was declared in. Block Scope Exercise Try to guess what will be logged to the console from the above snippet and write it down. Then, run the above in your example directory and see if you guessed correctly. Did you notice that the last line caused an error? That is what happens when you try to access a variable outside of its associated scope. Whenever a line of code references a variable that does not exist or outside of its scope, a ReferenceError is thrown. Variable Scope Exercise Generally, the goal is to avoid using global scope . There are several reasons for this, but the most important one is that as your programs get larger, global variables can be modified from anywhere in the code, making it difficult to prevent mistakes and errors. Because of this, we won't be doing an exercise with code for Varible Scope. However, there are several questions in quiz.md having to do with identifying the scope of a variable or fixing some scoping errors. These will serve as your exericses. Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Variable Scope"},{"location":"unit-4/variable-scope/#scope","text":"","title":"Scope"},{"location":"unit-4/variable-scope/#objectives","text":"Identify when a variable is in the global scope or block scope Identify the scope of any variable you are using in your code Understand when and why a ReferenceError is thrown","title":"Objectives"},{"location":"unit-4/variable-scope/#key-terms","text":"","title":"Key Terms"},{"location":"unit-4/variable-scope/#variable-scope","text":"refers to where a variable can be accessed or used within the code. A variable's scope is determined by where it is declared , not assigned .","title":"variable scope"},{"location":"unit-4/variable-scope/#global-scope","text":"a variable in the global scope means that it is accessible from anywhere in the code. Variables declared outside of any function or code block are in the global scope.","title":"global scope"},{"location":"unit-4/variable-scope/#block-scope","text":"a variable in block scope means that it is declared inside of a code block (between a set of {} ) and is only accessible within the code block that it was declared in","title":"block scope"},{"location":"unit-4/variable-scope/#code-block","text":"a section of code enclosed in curly braces {} . It is used to group statements together, such as in functions, loops, and conditionals","title":"code block"},{"location":"unit-4/variable-scope/#referenceerror","text":"an error that occurs in JavaScript when you try to use a variable that hasn't been declared or is outside of its scope.","title":"ReferenceError"},{"location":"unit-4/variable-scope/#variable-scope-assignment","text":"Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"Variable Scope Assignment"},{"location":"unit-4/variable-scope/#variable-scope-background","text":"We learned earlier that every data value in JavaScript has an associated type. We also learned that variables are like labels for associated values. We can think of a variable kind of like a named sticky note with its associated value written on the note. Whenever our code mentions the name of that particular sticky note, the JavaScript interpreter basically inserts the associated value into the code in place of the variable when that line executes. Up to this point in time, we've assumed that after we've declared a variable we can simply use it wherever we want. The reality is that this is not the case. Every variable has an associated scope. That scope is determined by where the variable is declared (not assigned). Scope is a topic that runs deep, but we're just going to focus on the two most common types of scope in this course: global scope and block scope.","title":"Variable Scope Background"},{"location":"unit-4/variable-scope/#global-scope_1","text":"Consider the following code snippet. let globalMessage = \"Hello from global scope\"; console.log(globalMessage); function doStuff(){ console.log(\"entering doStuff function.\"); console.log(globalMessage); console.log(\"exiting doStuff function.\"); } doStuff(); globalMessage is a global variable because it was declared outside of any code block. The fact that globalMessage is \"global\" means that the variable can be referenced \"globally\" - either outside of a function OR within a function like it is here.","title":"Global Scope"},{"location":"unit-4/variable-scope/#global-scope-quick-exercise","text":"Try to guess what will be logged to the console from the above snippet and write it down. Then, run this code and see if you guessed correctly.","title":"Global Scope Quick Exercise"},{"location":"unit-4/variable-scope/#block-scope_1","text":"Block Scope is different from Global Scope because it limits from where a variable can be accessed from. Specifically, a variable with block scope is only accessible from within the block of code it was declared in. Usually, this is either a function, loop, or conditional statement. Consider the following code snippet. let globalMessage = \"Hello from global scope\"; console.log(globalMessage); function doStuff(){ console.log(\"entering doStuff function.\"); let localMessage = \"Hello from doStuff local scope\"; console.log(globalMessage); console.log(localMessage); console.log(\"exiting doStuff function.\"); } doStuff(); console.log(localMessage); localMessage is a local variable , meaning it was declared inside of a function. The fact that localMessage is \"local\" means that the variable can be referenced \"locally\" within this particular function it was declared in.","title":"Block Scope"},{"location":"unit-4/variable-scope/#block-scope-exercise","text":"Try to guess what will be logged to the console from the above snippet and write it down. Then, run the above in your example directory and see if you guessed correctly. Did you notice that the last line caused an error? That is what happens when you try to access a variable outside of its associated scope. Whenever a line of code references a variable that does not exist or outside of its scope, a ReferenceError is thrown.","title":"Block Scope Exercise"},{"location":"unit-4/variable-scope/#variable-scope-exercise","text":"Generally, the goal is to avoid using global scope . There are several reasons for this, but the most important one is that as your programs get larger, global variables can be modified from anywhere in the code, making it difficult to prevent mistakes and errors. Because of this, we won't be doing an exercise with code for Varible Scope. However, there are several questions in quiz.md having to do with identifying the scope of a variable or fixing some scoping errors. These will serve as your exericses.","title":"Variable Scope Exercise"},{"location":"unit-4/variable-scope/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-5/dom-querying/","text":"DOM Querying Objectives Describe the what the DOM is and its relationship to HTML and CSS Utilize CSS selectors to access the content of HTML elements using JavaScript Use JQuery to look up an element by class or id and read its attributes Key Terms The DOM DOM query JQuery DOM Querying Assignment Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. DOM Background Websites are displayed using a JavaScript Object. But, wait! Didn't we just learn about how HTML and CSS create the structure and looks of a website? Well, you're right. But your browser isn't actually able to understand HTML and CSS directly. After HTML and CSS files are loaded into a browser, the browser then uses those HTML and CSS files to generate a JavaScript Object to reprsent them. This all happens behind the scenes, so it gives the illusion that your browser actually understands HTML and CSS. The Document Object Model , or DOM for short, is how JavaScript sees your webpage. When you write HTML and CSS, your browser turns them into a JavaScript object, which is the DOM. The DOM Tree Recall that HTML documents are composed of elements , which are composed of tags . Tags usually come in pairs, with an opening tag and closing tag. <html> <head></head> <body> <h1>This is the Main Header</h1> <p>This is a paragraph of text.</p> </body> </html> In the code above, you can identify the closing tags because they start with </ instead of just < . The <h1> tag starts the header, and then the </h1> indicates the end of the header section. Notice that the h1 tag both opens and closes \"inside of\" the body tag. When one tag is placed directly inside of another tag in this way, we say that the outer tag is the parent of the inner tag. So in this case, we'd say: the body tag is the parent of the h1 tag. Inversely, we'd also say that the h1 tag is a child of the body tag. Note: the <h1> tag above is also fully enclosed within the <html> tag. However, it's not accurate to say that the <html> tag is the parent of the <h1> tag. The <html> is the parent of the <body> tag, and it's more like a \"grandparent\" to the <h1> tag. More generally, we would describe the <h1> tag as a \"descendant\" of the <html> tag. If you were to draw the relationship between each of the elements in this HTML sample, you'd get a tree like this: o html / \\ / \\ / \\ / \\ o body o head / \\ / \\ / \\ o h1 o p This is how the DOM organizes your HTML elements, called the DOM Tree . Not completely unlike a family tree! Accessing Elements in the DOM Recall that the DOM is a JavaScript object that represents all of the HTML elements in your HTML document. The DOM provides us with many different ways to interact with it using JavaScript. You can do stuff like: Look up an element in the tree and change its style properties, thus changing its appearance. Add a new element to the tree using only JavaScript code (instead of HTML) To simplify our interactions with the DOM, we're going to use a library called JQuery . You can recognize JQuery use in the code anywhere you see a $ symbol. Let's look at a few examples of how we can interact with the DOM. Suppose our document consists of the following HTML: <html> <body> <div class=\"first-section\" id=\"section1\"> <p>First paragraph</p> <p>Second paragraph</p> </div> <div class=\"second-section\"> <p>Third Paragraph</p> <p>Fourth paragraph</p> </div> </body> </html> We can use JQuery's $ function to query (search) for elements that match a CSS selector . CSS selectors are very versatile, but for now we're concerned with just three types: element selector . Look up an element based on its tag name. For example: using the selector \"p\" would select the first <p> element in the document. .class selector . This selector is used for looking up elements based on CSS classes they are assigned to using their class attribute. To indicate we are using a .class selector, we need to prefix the selector with a period. For example: the selector \".first-section\" would select the first <div> . #id selector . This selector is used for looking up elements based on its id attribute. To indicate we are using an #id selector, we need to prefix the selector with a hashtag ( # ). For example, the selector \"#section1\" would also select the first <div> . $(\"selector\") returns an element that comes with its own set of properties and functions you can interact with. Here's an example that looks up the first section above using a .class selector (notice the DOT before the name of the CSS class) and then uses JQuery's attr function to read the id of that element. let element = $(\".first-section\"); console.log(element.attr(\"id\")); // Logs \"section1\" You can learn about more CSS selectors on the W3Schools Reference Note: sometimes the selector you use will apply to multiple elements. When this happens, you're going get back an object from JQuery that wraps all of these and can be treated in some ways like an array. Here's an example use: let elements = $(\"p\"); // element selector that selects all <p> elements console.log(elements.length); // prints \"4\", since there are 4 paragraph elements in the above HTML for (let i=0; i < elements.length; i++){ console.log(elements[i].textContent); // prints the text in each paragraph } Once you have an element that you've looked up, you can also access its children via JQuery's children() function let element = $(\".second-section\"); // select the element. let children = element.children(); // Access its children elements. console.log(children.length); // prints 2 for (let i=0; i < children.length; i++){ console.log(children[i].textContent); // prints the text for each child paragraph } Complete the DOM Querying Exercise before moving forward. DOM Querying Exercise CSS Diner Before beginning this exercise, we need to familiarize ourselves a bit more with CSS Selectors. For this, there are 2 things I want you to do before moving on to the next section: Take a look at the W3 Schools CSS Selector Reference if you haven't already. You don't need to memorize everything, just take a look to get a better idea of how many CSS Selectors there are. Play the CSS Diner game. Complete at least up to Level 17 (although I would recommend just completing all 32 levels. It shouldn't take too long). Then, when you're finished, take a screenshot of your completed levels for submission, like this: Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Dom Querying"},{"location":"unit-5/dom-querying/#dom-querying","text":"","title":"DOM Querying"},{"location":"unit-5/dom-querying/#objectives","text":"Describe the what the DOM is and its relationship to HTML and CSS Utilize CSS selectors to access the content of HTML elements using JavaScript Use JQuery to look up an element by class or id and read its attributes","title":"Objectives"},{"location":"unit-5/dom-querying/#key-terms","text":"","title":"Key Terms"},{"location":"unit-5/dom-querying/#the-dom","text":"","title":"The DOM"},{"location":"unit-5/dom-querying/#dom-query","text":"","title":"DOM query"},{"location":"unit-5/dom-querying/#jquery","text":"","title":"JQuery"},{"location":"unit-5/dom-querying/#dom-querying-assignment","text":"Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"DOM Querying Assignment"},{"location":"unit-5/dom-querying/#dom-background","text":"","title":"DOM Background"},{"location":"unit-5/dom-querying/#websites-are-displayed-using-a-javascript-object","text":"But, wait! Didn't we just learn about how HTML and CSS create the structure and looks of a website? Well, you're right. But your browser isn't actually able to understand HTML and CSS directly. After HTML and CSS files are loaded into a browser, the browser then uses those HTML and CSS files to generate a JavaScript Object to reprsent them. This all happens behind the scenes, so it gives the illusion that your browser actually understands HTML and CSS. The Document Object Model , or DOM for short, is how JavaScript sees your webpage. When you write HTML and CSS, your browser turns them into a JavaScript object, which is the DOM.","title":"Websites are displayed using a JavaScript Object."},{"location":"unit-5/dom-querying/#the-dom-tree","text":"Recall that HTML documents are composed of elements , which are composed of tags . Tags usually come in pairs, with an opening tag and closing tag. <html> <head></head> <body> <h1>This is the Main Header</h1> <p>This is a paragraph of text.</p> </body> </html> In the code above, you can identify the closing tags because they start with </ instead of just < . The <h1> tag starts the header, and then the </h1> indicates the end of the header section. Notice that the h1 tag both opens and closes \"inside of\" the body tag. When one tag is placed directly inside of another tag in this way, we say that the outer tag is the parent of the inner tag. So in this case, we'd say: the body tag is the parent of the h1 tag. Inversely, we'd also say that the h1 tag is a child of the body tag. Note: the <h1> tag above is also fully enclosed within the <html> tag. However, it's not accurate to say that the <html> tag is the parent of the <h1> tag. The <html> is the parent of the <body> tag, and it's more like a \"grandparent\" to the <h1> tag. More generally, we would describe the <h1> tag as a \"descendant\" of the <html> tag. If you were to draw the relationship between each of the elements in this HTML sample, you'd get a tree like this: o html / \\ / \\ / \\ / \\ o body o head / \\ / \\ / \\ o h1 o p This is how the DOM organizes your HTML elements, called the DOM Tree . Not completely unlike a family tree!","title":"The DOM Tree"},{"location":"unit-5/dom-querying/#accessing-elements-in-the-dom","text":"Recall that the DOM is a JavaScript object that represents all of the HTML elements in your HTML document. The DOM provides us with many different ways to interact with it using JavaScript. You can do stuff like: Look up an element in the tree and change its style properties, thus changing its appearance. Add a new element to the tree using only JavaScript code (instead of HTML) To simplify our interactions with the DOM, we're going to use a library called JQuery . You can recognize JQuery use in the code anywhere you see a $ symbol. Let's look at a few examples of how we can interact with the DOM. Suppose our document consists of the following HTML: <html> <body> <div class=\"first-section\" id=\"section1\"> <p>First paragraph</p> <p>Second paragraph</p> </div> <div class=\"second-section\"> <p>Third Paragraph</p> <p>Fourth paragraph</p> </div> </body> </html> We can use JQuery's $ function to query (search) for elements that match a CSS selector . CSS selectors are very versatile, but for now we're concerned with just three types: element selector . Look up an element based on its tag name. For example: using the selector \"p\" would select the first <p> element in the document. .class selector . This selector is used for looking up elements based on CSS classes they are assigned to using their class attribute. To indicate we are using a .class selector, we need to prefix the selector with a period. For example: the selector \".first-section\" would select the first <div> . #id selector . This selector is used for looking up elements based on its id attribute. To indicate we are using an #id selector, we need to prefix the selector with a hashtag ( # ). For example, the selector \"#section1\" would also select the first <div> . $(\"selector\") returns an element that comes with its own set of properties and functions you can interact with. Here's an example that looks up the first section above using a .class selector (notice the DOT before the name of the CSS class) and then uses JQuery's attr function to read the id of that element. let element = $(\".first-section\"); console.log(element.attr(\"id\")); // Logs \"section1\" You can learn about more CSS selectors on the W3Schools Reference Note: sometimes the selector you use will apply to multiple elements. When this happens, you're going get back an object from JQuery that wraps all of these and can be treated in some ways like an array. Here's an example use: let elements = $(\"p\"); // element selector that selects all <p> elements console.log(elements.length); // prints \"4\", since there are 4 paragraph elements in the above HTML for (let i=0; i < elements.length; i++){ console.log(elements[i].textContent); // prints the text in each paragraph } Once you have an element that you've looked up, you can also access its children via JQuery's children() function let element = $(\".second-section\"); // select the element. let children = element.children(); // Access its children elements. console.log(children.length); // prints 2 for (let i=0; i < children.length; i++){ console.log(children[i].textContent); // prints the text for each child paragraph } Complete the DOM Querying Exercise before moving forward.","title":"Accessing Elements in the DOM"},{"location":"unit-5/dom-querying/#dom-querying-exercise","text":"","title":"DOM Querying Exercise"},{"location":"unit-5/dom-querying/#css-diner","text":"Before beginning this exercise, we need to familiarize ourselves a bit more with CSS Selectors. For this, there are 2 things I want you to do before moving on to the next section: Take a look at the W3 Schools CSS Selector Reference if you haven't already. You don't need to memorize everything, just take a look to get a better idea of how many CSS Selectors there are. Play the CSS Diner game. Complete at least up to Level 17 (although I would recommend just completing all 32 levels. It shouldn't take too long). Then, when you're finished, take a screenshot of your completed levels for submission, like this:","title":"CSS Diner"},{"location":"unit-5/dom-querying/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-5/html-and-css/","text":"HTML and CSS Objectives Describe the different types of web development Describe client-server relationships Use HTML and SCS to build a web page and customize the styling Understand how CSS Selectors work Identify parent-child relationships in an HTML document Key Terms client server front end development back end development full stack development HTML attribute element id parent child CSS selector element selector .class selector #id selector HTML and CSS Assignment Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. Web Development Background Now that we've built a foundation in JavaScript, we can take a step back and look at web development. Before we jump straight into building websites, let's go over some background knowledge of how websites work. To get a good idea of what websites are made of, take a look at this video here . Client Server Relationship In the video, you may have heard the word \"server\" a few times. In the context of websites, a server is a computer that stores a webstite's files. A web browser reads and displays these web files, making it a client . For a website to display on your browser, the browser first connects to a server via the internet. Then the server \"serves\" the website files (HTML, CSS, and JavaScript) to the browser, which displays them as a website to you, the end user . This client-server relationship makes up the basis of the internet. Types of Web Developers Being a web developer typically falls within 3 categories: front-end , back-end , and full stack . These terms represent which part of the client-server relationship you're currently working with. Front End development means that you're primarily dealing with the client side. It's referred to as the front end because it's what the user can see. In the context of web applications, this typically refers to a website, but it can also refer to the front-end of mobile applications, as well, such as IOS or Andoid development. Back End development deals primarily with the server side. Even though users can't see it, it deals with a lot of logic and computations that are required for many websites to work properly. Many times, the front end will need to communicate with the backend by using APIs, or Application Programming Interfaces . We will work with these in the last half of our program. Full Stack development simply means that you work with both the front-end and the back-end sides of web development. A \" stack \" is a set of technologies used to develop an application, so full stack developers typically work with almost all of the technologies used to make a website work. This course is mainly focused on front-end web development, which is going to focus on the 3 types of files mentioned in the video: HTML, CSS, and JavaScript. You've already learned the fundamentals of JavaScript, so in our next section we will go into HTML and CSS. HTML Background In our first assignment, you created a basic HTML Skeleton, demonstrating that you know the basics of HTML. In this lesson, we'll focus on getting you familiar with the fundamentals of HTML, as well as some common elements. We won't go in-depth on HTML itself here. There are many excellent tutorials online that do a great job of teaching the fundamentals, and HTML is not the focus of this class. Before moving on, make sure you are comfortable with the fundamentals of HTML by going through the list of documentation below. Each link is to W3Schools , which has interactive examples for you to try out as you go. Make sure to try these examples out, as they will allow you to practice as you go. HTML Attributes Attributes are pieces of information in the start tag of an HTML element. They provide additional information about that element. HTML Attributes Headings and Paragraphs Every website needs text, such as headings, subheadings, and text content. HTML Heading elements take care of headings and subheadings. HTML Headings The HTML paragraph element <p> takes care of most text content in your HTML document. HTML Paragraphs NOTE : Some of these pages have a \"Tag Reference\" section at the bottom, which will give you a small description of all the HTML tags that are used in the page. You can reference that section instead of googling the tags you don't recognize. Links Links in HTML are represented by <a> tags, otherwise known as anchor tags . This is the first element we're seeing that requires attributes to work properly. HTML Links do not need to be text. They can be placed on things like images and buttons, as well. HTML Links Hyperlinks Note : You might notice a few subsections for \" Link Colors \" and \" Link Bookmarks \". You can skip these subsections, since we'll touch more on that when we get to CSS. Lists Typically, you\u2019ll use two types of lists: ordered lists ( <ol> ) and unordered lists ( <ul> ), which are basically numbered and bulleted lists, respectively. Other than that, there aren\u2019t many inherent differences between the two types of lists until we incorporate CSS into our website. We use unordered lists to list out things where order doesn\u2019t matter, like shopping lists. Ordered lists are for when order does matter, like a set of instructions. HTML Lists Images Images in HTML are represented by <img> tags. <img> elements are empty elements, so they take no text. HTML Images Note : You only need to read the \" Images \" section. The \" Image Map \", \" Background Images \", and \" The Picture Element \" sections aren't required. Block vs Inline Elements By default, HTML elements are displayed as either block-level elements, or inline-level elements. Block-level elements always start on a new line and take up an entire line in your HTML document, so it will always take up the entire width of the website. Inline-level elements , on the other hand, will only take up as much width as it requires. HTML Block and Inline Elements <div> and <span> are container elements. <div> is a block-level container, while <span> is a inline-level container. These container elements are mainly used as parent elements to group together related elements and apply CSS styles to them. The <div> element is a very flexible element that is used very often in many websites. If you inspect the HTML of most web pages, they\u2019ll be filled with tons of <div> elements with different class attributes. For example, check out the screenshot below: Contratulations! You now know HTML! Let's move on to CSS. CSS Background By the end of the previous section, you were able to use HTML to create the basic structure and content of your \"About Me\" page: Headings, text, lists, and images. But there's still one big issue: It looks ugly. This is because HTML has very little control over what elements look like. The main purpose of HTML is to control what appears on a web page, but not how they appear. For that, we use CSS, or Cascading Style Sheets , to style our HTML elements. Similar to HTML, I\u2019ll give you a list of links to read through for CSS \u2014 mainly to go over the basics. Once you get through the links below, we'll do a mini-project: An About Me page using HTML and styled with CSS. Note : You should not try to memorize or master every CSS propery out there. You only need to grasp basic concepts since you'll always have the option to read up on specific properties needed when you want to use them in your projects. CSS Basics To get started, go over this link to get a basic idea of how CSS works: CSS Introduction There are 3 ways to include CSS in your HTML files: External: By using a separate .css file. Internal: By using a <style> tag in your HTML document. Inline: By including a style attribute inside of your HTML element You can read more about them here: How to add CSS The majority of the time, you will be using external CSS . CSS Syntax and Selectors Now, let's get into how we can write CSS. Visit the following 2 links, and read about how CSS Syntax and Selectors work: CSS Syntax CSS Selectors The Box Model In CSS, one of the most important concepts is The Box Model. It's very important to understand because it determines how much space your elements take up, which affects the layout and design of your entire page. Fundamentally, every element on your web page is treated as a box, and the box model allows us to control the sizing, spacing, and bordering of these boxes. You can read about it here: CSS Box Model And that's all you need to know about CSS for now! Complete the About Me Exercise before moving forward. HTML and CSS Exercise: About Me Page Optional Advanced Styling The following tasks were not covered in this Reading, use Google, or a CSS reference such as W3Schools to figure it out! Your hyperlinks should not have an underline by default. When a user hovers over the link, the underline should appear. Hint : The property you are looking for is a type of CSS \"pseudo-class\". Example: Every paragraph should start with a drop-caps that is 1.5 times the size of the normal paragraph font size. Hint : The property you are looking for is a type of CSS \"pseudo-element\". Example: Final Note: Web Design vs Web Development One thing to keep in mind is that Web Design and Web Development are 2 different fields. Web design focuses on designing a websites look and feel, going into colors, fonts, images, and how to make a website visually appealing. Web Development, which is what you're learning with HTML and CSS, focuses on bringing a website's design to life using code, making sure it works properly and effectively. All of this to say: Don't worry if your website doesn't look perfect after learning CSS! That's not your job as a developer. Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"HTML and CSS"},{"location":"unit-5/html-and-css/#html-and-css","text":"","title":"HTML and CSS"},{"location":"unit-5/html-and-css/#objectives","text":"Describe the different types of web development Describe client-server relationships Use HTML and SCS to build a web page and customize the styling Understand how CSS Selectors work Identify parent-child relationships in an HTML document","title":"Objectives"},{"location":"unit-5/html-and-css/#key-terms","text":"","title":"Key Terms"},{"location":"unit-5/html-and-css/#client","text":"","title":"client"},{"location":"unit-5/html-and-css/#server","text":"","title":"server"},{"location":"unit-5/html-and-css/#front-end-development","text":"","title":"front end development"},{"location":"unit-5/html-and-css/#back-end-development","text":"","title":"back end development"},{"location":"unit-5/html-and-css/#full-stack-development","text":"","title":"full stack development"},{"location":"unit-5/html-and-css/#html-attribute","text":"","title":"HTML attribute"},{"location":"unit-5/html-and-css/#element-id","text":"","title":"element id"},{"location":"unit-5/html-and-css/#parent","text":"","title":"parent"},{"location":"unit-5/html-and-css/#child","text":"","title":"child"},{"location":"unit-5/html-and-css/#css-selector","text":"","title":"CSS selector"},{"location":"unit-5/html-and-css/#element-selector","text":"","title":"element selector"},{"location":"unit-5/html-and-css/#class-selector","text":"","title":".class selector"},{"location":"unit-5/html-and-css/#id-selector","text":"","title":"#id selector"},{"location":"unit-5/html-and-css/#html-and-css-assignment","text":"Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"HTML and CSS Assignment"},{"location":"unit-5/html-and-css/#web-development-background","text":"Now that we've built a foundation in JavaScript, we can take a step back and look at web development. Before we jump straight into building websites, let's go over some background knowledge of how websites work. To get a good idea of what websites are made of, take a look at this video here .","title":"Web Development Background"},{"location":"unit-5/html-and-css/#client-server-relationship","text":"In the video, you may have heard the word \"server\" a few times. In the context of websites, a server is a computer that stores a webstite's files. A web browser reads and displays these web files, making it a client . For a website to display on your browser, the browser first connects to a server via the internet. Then the server \"serves\" the website files (HTML, CSS, and JavaScript) to the browser, which displays them as a website to you, the end user . This client-server relationship makes up the basis of the internet.","title":"Client Server Relationship"},{"location":"unit-5/html-and-css/#types-of-web-developers","text":"Being a web developer typically falls within 3 categories: front-end , back-end , and full stack . These terms represent which part of the client-server relationship you're currently working with. Front End development means that you're primarily dealing with the client side. It's referred to as the front end because it's what the user can see. In the context of web applications, this typically refers to a website, but it can also refer to the front-end of mobile applications, as well, such as IOS or Andoid development. Back End development deals primarily with the server side. Even though users can't see it, it deals with a lot of logic and computations that are required for many websites to work properly. Many times, the front end will need to communicate with the backend by using APIs, or Application Programming Interfaces . We will work with these in the last half of our program. Full Stack development simply means that you work with both the front-end and the back-end sides of web development. A \" stack \" is a set of technologies used to develop an application, so full stack developers typically work with almost all of the technologies used to make a website work. This course is mainly focused on front-end web development, which is going to focus on the 3 types of files mentioned in the video: HTML, CSS, and JavaScript. You've already learned the fundamentals of JavaScript, so in our next section we will go into HTML and CSS.","title":"Types of Web Developers"},{"location":"unit-5/html-and-css/#html-background","text":"In our first assignment, you created a basic HTML Skeleton, demonstrating that you know the basics of HTML. In this lesson, we'll focus on getting you familiar with the fundamentals of HTML, as well as some common elements. We won't go in-depth on HTML itself here. There are many excellent tutorials online that do a great job of teaching the fundamentals, and HTML is not the focus of this class. Before moving on, make sure you are comfortable with the fundamentals of HTML by going through the list of documentation below. Each link is to W3Schools , which has interactive examples for you to try out as you go. Make sure to try these examples out, as they will allow you to practice as you go.","title":"HTML Background"},{"location":"unit-5/html-and-css/#html-attributes","text":"Attributes are pieces of information in the start tag of an HTML element. They provide additional information about that element. HTML Attributes","title":"HTML Attributes"},{"location":"unit-5/html-and-css/#headings-and-paragraphs","text":"Every website needs text, such as headings, subheadings, and text content. HTML Heading elements take care of headings and subheadings. HTML Headings The HTML paragraph element <p> takes care of most text content in your HTML document. HTML Paragraphs NOTE : Some of these pages have a \"Tag Reference\" section at the bottom, which will give you a small description of all the HTML tags that are used in the page. You can reference that section instead of googling the tags you don't recognize.","title":"Headings and Paragraphs"},{"location":"unit-5/html-and-css/#links","text":"Links in HTML are represented by <a> tags, otherwise known as anchor tags . This is the first element we're seeing that requires attributes to work properly. HTML Links do not need to be text. They can be placed on things like images and buttons, as well. HTML Links Hyperlinks Note : You might notice a few subsections for \" Link Colors \" and \" Link Bookmarks \". You can skip these subsections, since we'll touch more on that when we get to CSS.","title":"Links"},{"location":"unit-5/html-and-css/#lists","text":"Typically, you\u2019ll use two types of lists: ordered lists ( <ol> ) and unordered lists ( <ul> ), which are basically numbered and bulleted lists, respectively. Other than that, there aren\u2019t many inherent differences between the two types of lists until we incorporate CSS into our website. We use unordered lists to list out things where order doesn\u2019t matter, like shopping lists. Ordered lists are for when order does matter, like a set of instructions. HTML Lists","title":"Lists"},{"location":"unit-5/html-and-css/#images","text":"Images in HTML are represented by <img> tags. <img> elements are empty elements, so they take no text. HTML Images Note : You only need to read the \" Images \" section. The \" Image Map \", \" Background Images \", and \" The Picture Element \" sections aren't required.","title":"Images"},{"location":"unit-5/html-and-css/#block-vs-inline-elements","text":"By default, HTML elements are displayed as either block-level elements, or inline-level elements. Block-level elements always start on a new line and take up an entire line in your HTML document, so it will always take up the entire width of the website. Inline-level elements , on the other hand, will only take up as much width as it requires. HTML Block and Inline Elements <div> and <span> are container elements. <div> is a block-level container, while <span> is a inline-level container. These container elements are mainly used as parent elements to group together related elements and apply CSS styles to them. The <div> element is a very flexible element that is used very often in many websites. If you inspect the HTML of most web pages, they\u2019ll be filled with tons of <div> elements with different class attributes. For example, check out the screenshot below:","title":"Block vs Inline Elements"},{"location":"unit-5/html-and-css/#contratulations-you-now-know-html-lets-move-on-to-css","text":"","title":"Contratulations! You now know HTML! Let's move on to CSS."},{"location":"unit-5/html-and-css/#css-background","text":"By the end of the previous section, you were able to use HTML to create the basic structure and content of your \"About Me\" page: Headings, text, lists, and images. But there's still one big issue: It looks ugly. This is because HTML has very little control over what elements look like. The main purpose of HTML is to control what appears on a web page, but not how they appear. For that, we use CSS, or Cascading Style Sheets , to style our HTML elements. Similar to HTML, I\u2019ll give you a list of links to read through for CSS \u2014 mainly to go over the basics. Once you get through the links below, we'll do a mini-project: An About Me page using HTML and styled with CSS. Note : You should not try to memorize or master every CSS propery out there. You only need to grasp basic concepts since you'll always have the option to read up on specific properties needed when you want to use them in your projects.","title":"CSS Background"},{"location":"unit-5/html-and-css/#css-basics","text":"To get started, go over this link to get a basic idea of how CSS works: CSS Introduction There are 3 ways to include CSS in your HTML files: External: By using a separate .css file. Internal: By using a <style> tag in your HTML document. Inline: By including a style attribute inside of your HTML element You can read more about them here: How to add CSS The majority of the time, you will be using external CSS .","title":"CSS Basics"},{"location":"unit-5/html-and-css/#css-syntax-and-selectors","text":"Now, let's get into how we can write CSS. Visit the following 2 links, and read about how CSS Syntax and Selectors work: CSS Syntax CSS Selectors","title":"CSS Syntax and Selectors"},{"location":"unit-5/html-and-css/#the-box-model","text":"In CSS, one of the most important concepts is The Box Model. It's very important to understand because it determines how much space your elements take up, which affects the layout and design of your entire page. Fundamentally, every element on your web page is treated as a box, and the box model allows us to control the sizing, spacing, and bordering of these boxes. You can read about it here: CSS Box Model And that's all you need to know about CSS for now! Complete the About Me Exercise before moving forward.","title":"The Box Model"},{"location":"unit-5/html-and-css/#html-and-css-exercise-about-me-page","text":"","title":"HTML and CSS Exercise: About Me Page"},{"location":"unit-5/html-and-css/#optional-advanced-styling","text":"The following tasks were not covered in this Reading, use Google, or a CSS reference such as W3Schools to figure it out! Your hyperlinks should not have an underline by default. When a user hovers over the link, the underline should appear. Hint : The property you are looking for is a type of CSS \"pseudo-class\". Example: Every paragraph should start with a drop-caps that is 1.5 times the size of the normal paragraph font size. Hint : The property you are looking for is a type of CSS \"pseudo-element\". Example:","title":"Optional Advanced Styling"},{"location":"unit-5/html-and-css/#final-note-web-design-vs-web-development","text":"One thing to keep in mind is that Web Design and Web Development are 2 different fields. Web design focuses on designing a websites look and feel, going into colors, fonts, images, and how to make a website visually appealing. Web Development, which is what you're learning with HTML and CSS, focuses on bringing a website's design to life using code, making sure it works properly and effectively. All of this to say: Don't worry if your website doesn't look perfect after learning CSS! That's not your job as a developer.","title":"Final Note: Web Design vs Web Development"},{"location":"unit-5/html-and-css/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-6/dynamic-content/","text":"Dynamic Content Objectives Dynamically modify the style of elements using the DOM API Explain the relationship between an event dispatcher to an event listener Connect the click of a button to executing a JavaScript function Key Terms element.css() JQuery function that can be used to set a CSS property dynamically on a wrapped $(\"p\").css(\"color\", \"blue\") // changes font color in all paragraphs to blue DOM elements synchronous a process that completes its work and returns before the next line of code is executed; this is the common scenario we've seen so far event an occurrence that can be programmatically \"listened\" and trigger actions; e.g. when a button is clicked dispatcher the element that broadcasts an event event type a named used to categorize different events \"click\", \"keydown\", \"change\",... event listener a function that will be called after a specific event has occurred; listeners are registered to dispatchers to establish the connection element.on(eventType, listener) a function JQuery provides for attaching event listeners function handleButtonClicked(){ console.log(\"A button was clicked!\"); } $(\"button\").on(\"click\", handleButtonClicked); Dynamic Content Assignment Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. Dynamic Content Background Modifying CSS Properties Dynamically In the previous lesson you learned about querying the DOM for HTML elements. Once you've looked up an element and have it assigned to a variable, it's possible to dynamically edit CSS properties via JavaScript. For example, let's say we have the following html: <html> <head></head> <body> <h1>This is the Main Header</h1> <p>This is a paragraph of text.</p> </body> </html> If we wanted to turn the h1 tag blue, we could do it like this: // Query for the element let h1Element = $(\"h1\"); // Alter the styling h1Element.css(\"color\", \"blue\") // or \"#0000ff\" works too Modifying HTML Dynamically Event Handling Up to this point in our lessons, our programs have been synchronous . This just means that they have executed from one line to the next through to the end of the program when we ran it. In a real-world web application, much of what the application does is actually in response to events . To name a few example events: The user clicked a button. The webpage has finished loading. 5 seconds has passed. Two important things to know about events: They are dispatched by particular objects. E.g. a button element on the page will dispatch a \"click\" event when it's clicked. Events have event types . An event type is just a string label that categorizes what type of event has occurred. \"click\" is the event type we'll be working with in this exercise. A helpful metaphor is that an event is like a sound. We can programmatically \"hook in\" to events by listening for them. Let's say we have a button defined in our HTML like this: <input class=\"main-button\" type=\"button\" value=\"Main Button\"/> We'd like to listen for clicks on this button and then respond by showing an alert. Here's how we could do it: // Create the listener function that we want to be called when the button is clicked. function afterClicked(event){ alert(\"The main button was clicked.\"); } // Look up the target element var mainButton = $(\".main-button\"); // Listen for clicks on mainButton, and call our listener function when they happen. mainButton.on(\"click\", afterClicked ); You won't see an immediate result when you run the above code, but if you click the button, the afterClicked() function will be invoked, and then you'll see an alert . This is called event-driven programming . Does the concept of listeners remind you of anything we encountered before? Remember callbacks from when the section on higher order programming? A listener is really just a callback function that gets invoked after an event. Complete the Dynamic Content Exercise before continuing. Dynamic Content Exercise Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Dynamic Content"},{"location":"unit-6/dynamic-content/#dynamic-content","text":"","title":"Dynamic Content"},{"location":"unit-6/dynamic-content/#objectives","text":"Dynamically modify the style of elements using the DOM API Explain the relationship between an event dispatcher to an event listener Connect the click of a button to executing a JavaScript function","title":"Objectives"},{"location":"unit-6/dynamic-content/#key-terms","text":"","title":"Key Terms"},{"location":"unit-6/dynamic-content/#elementcss","text":"JQuery function that can be used to set a CSS property dynamically on a wrapped $(\"p\").css(\"color\", \"blue\") // changes font color in all paragraphs to blue","title":"element.css()"},{"location":"unit-6/dynamic-content/#dom-elements","text":"","title":"DOM elements"},{"location":"unit-6/dynamic-content/#synchronous","text":"a process that completes its work and returns before the next line of code is executed; this is the common scenario we've seen so far","title":"synchronous"},{"location":"unit-6/dynamic-content/#event","text":"an occurrence that can be programmatically \"listened\" and trigger actions; e.g. when a button is clicked","title":"event"},{"location":"unit-6/dynamic-content/#dispatcher","text":"the element that broadcasts an event","title":"dispatcher"},{"location":"unit-6/dynamic-content/#event-type","text":"a named used to categorize different events \"click\", \"keydown\", \"change\",...","title":"event type"},{"location":"unit-6/dynamic-content/#event-listener","text":"a function that will be called after a specific event has occurred; listeners are registered to dispatchers to establish the connection","title":"event listener"},{"location":"unit-6/dynamic-content/#elementoneventtype-listener","text":"a function JQuery provides for attaching event listeners function handleButtonClicked(){ console.log(\"A button was clicked!\"); } $(\"button\").on(\"click\", handleButtonClicked);","title":"element.on(eventType, listener)"},{"location":"unit-6/dynamic-content/#dynamic-content-assignment","text":"Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"Dynamic Content Assignment"},{"location":"unit-6/dynamic-content/#dynamic-content-background","text":"","title":"Dynamic Content Background"},{"location":"unit-6/dynamic-content/#modifying-css-properties-dynamically","text":"In the previous lesson you learned about querying the DOM for HTML elements. Once you've looked up an element and have it assigned to a variable, it's possible to dynamically edit CSS properties via JavaScript. For example, let's say we have the following html: <html> <head></head> <body> <h1>This is the Main Header</h1> <p>This is a paragraph of text.</p> </body> </html> If we wanted to turn the h1 tag blue, we could do it like this: // Query for the element let h1Element = $(\"h1\"); // Alter the styling h1Element.css(\"color\", \"blue\") // or \"#0000ff\" works too","title":"Modifying CSS Properties Dynamically"},{"location":"unit-6/dynamic-content/#modifying-html-dynamically","text":"","title":"Modifying HTML Dynamically"},{"location":"unit-6/dynamic-content/#event-handling","text":"Up to this point in our lessons, our programs have been synchronous . This just means that they have executed from one line to the next through to the end of the program when we ran it. In a real-world web application, much of what the application does is actually in response to events . To name a few example events: The user clicked a button. The webpage has finished loading. 5 seconds has passed. Two important things to know about events: They are dispatched by particular objects. E.g. a button element on the page will dispatch a \"click\" event when it's clicked. Events have event types . An event type is just a string label that categorizes what type of event has occurred. \"click\" is the event type we'll be working with in this exercise. A helpful metaphor is that an event is like a sound. We can programmatically \"hook in\" to events by listening for them. Let's say we have a button defined in our HTML like this: <input class=\"main-button\" type=\"button\" value=\"Main Button\"/> We'd like to listen for clicks on this button and then respond by showing an alert. Here's how we could do it: // Create the listener function that we want to be called when the button is clicked. function afterClicked(event){ alert(\"The main button was clicked.\"); } // Look up the target element var mainButton = $(\".main-button\"); // Listen for clicks on mainButton, and call our listener function when they happen. mainButton.on(\"click\", afterClicked ); You won't see an immediate result when you run the above code, but if you click the button, the afterClicked() function will be invoked, and then you'll see an alert . This is called event-driven programming . Does the concept of listeners remind you of anything we encountered before? Remember callbacks from when the section on higher order programming? A listener is really just a callback function that gets invoked after an event. Complete the Dynamic Content Exercise before continuing.","title":"Event Handling"},{"location":"unit-6/dynamic-content/#dynamic-content-exercise","text":"","title":"Dynamic Content Exercise"},{"location":"unit-6/dynamic-content/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"},{"location":"unit-6/json-apis/","text":"JSON APIs Objectives Key Terms JSON JavaScript Object Notation; a JavaScript-like standard for representing data; useful for sharing data between programs, including programs that are not using JavaScript { \"name\": \"Mickey\", \"animalType\": \"mouse\" \"earCount\": 2 } $.getJSON(url, callback) JQuery function used to retrieve JSON data asynchronously from a remote server $.getJSON(\"http://example.com/words.json\", function(data){ console.log(data.length); }) API (Application Progamming Interface) a way for different applications to communicate with one another. Usually transfers data using JSON data format. JSON APIs Assignment Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below. JSON Modeling Background JavaScript Object Notation (JSON) is a standardized format for representing data. Prior to JSON, XML was the most popular standard for representing data. JSON has mostly won this formatting war due to how easy it is to read for both humans and computers. The syntax for JSON was inspired by the JavaScript Object literal notation (a long way of saying \"the way you normally instantiate objects in JavaScript\"), but there are a few notable differences: All properties/keys in JSON must be in quotes. All JSON strings must use double quotes. A few more not worth mentioning here. Here's an example of some JSON data representing cocktail descriptions: [ { \"name\": \"mojito\", \"image_url\": \"https://d2sf2a832xqb4v.cloudfront.net/detail_Skinny_Mojito_4.png?mtime=20151201224540\", \"description\": \"A delicious sweet drink with fresh mint. Best enjoyed on a beach!\", \"ingredients\": [ \"rum\", \"mint\", \"cane sugar\" ] }, { \"name\": \"martini\", \"image_url\": \"http://www.uvvodka.com/wp-content/uploads/2013/01/recipelarge_uvmartini.png\", \"description\": \"A classy, classic drink that you'll love if you're into olives.\", \"ingredients\": [ \"olives\", \"vermouth\", \"gin\" ] } ] If this looks familiar to you, that's because all JSON is valid JavaScript code for representing an object literal. However, not all JavaScript is valid JSON. Take a minute and read through a quick description of JSON in W3 Schools APIs Background In order for any application to communicate with another, it must set up an API, or Application Programming Interface . If you imagine an application as a secure building, an API is like a doorway into the building. It acts as a controlled opening into the building and the services and data inside. APIs can regulate who enters (makes a request) and what data they can access. Here\u2019s a video that does a good job of summarizing what an API is: Important Takeaways APIs allow for two applications to communicate (transfer data) with each other. APIs are like a menu of information that an application exposes to the public. This allows an application to pick and choose what information they want to expose to the world, which keeps the rest of it's data secure. REST APIs are web APIs that allow two applications to communicate over the internet. These are the most common APIs, and are what we will be working with in this course. Calling APIs with JQuery When applications use REST APIs, the data that they transfer is often in JSON format. There are a number of ways a JavaScript application can make an API call to a server, but the simplest way is to use a JQuery function called getJSON() . Just like our earlier asynchronous examples with events, the function for loading JSON is also asynchronous. The reason for this is that loading data from an external source takes a (relatively) long time. The application has to wait for another server that may be located far away to respond. This is where the \"asynchronous\" part comes in. If an application simply locked up while waiting for data to come back from another server, then it wouldn't be able to do anything else in the meantime. By using an asynchronous callback, the application is able to perform other operations while it waits. Here's an example of how you could use getJSON() to load data with a bunch of animal names and simply log the length of the list: $.getJSON( 'https://raw.githubusercontent.com/boennemann/animals/master/words.json', function( data ) { console.log(data.length); // This will be logged later, after the data is loaded asynchronously. }) console.log('Hello'); // This will be logged first. You can find more examples of getJSON() usage on the official JQuery API Documentation page Complete JSON APIs Exercise and Get TMDB API Key before continuing. JSON APIs Exercise Introduce Query Parameters in this exercise Get TMDB API Key Not all APIs are \"public\", meaning that anyone can access and call them without identifying themselves first. In fact, most useful APIs out there are \"private\". So, we will need to identify or authenticate ourselves in some way when we call the API, so that the server knows who we are and can make sure we're authorized to use the API. One of the ways to authenticate ourselves is by using an API Key . To prepare for our capstone project, we need an API Key from The Movie Database (TMDB) and call a few APIs to search for some movies. Follow the instructions below to get your API key. Head to TMDB , and create an account by hitting \"Join TMDB\" at the top right corner. Fill in your account details, and after hitting \"Sign Up\", you should see a page like this: Head to your email, and find the email from \"The Movie Database\" with the subject \"Email verification required\" to verify your email. After you click the button to verify your email, sign in to TMDB with your login details, and you should see an account page like this: Navigate to \"Overview\" > \"Edit Profile\", and hit \"API\" on the side-menu. Find the \"Request an API Key\" heading and click to request a new key. Choose \"Developer\", Accept the Terms of Service, and fill out the form like below. The bottom portion will be your own personal information.: After submitting, you should see a page that contains your API Key. Remember where this is. We'll need to use this for our Capstone Project. Submitting Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"JSON APIs"},{"location":"unit-6/json-apis/#json-apis","text":"","title":"JSON APIs"},{"location":"unit-6/json-apis/#objectives","text":"","title":"Objectives"},{"location":"unit-6/json-apis/#key-terms","text":"","title":"Key Terms"},{"location":"unit-6/json-apis/#json","text":"JavaScript Object Notation; a JavaScript-like standard for representing data; useful for sharing data between programs, including programs that are not using JavaScript { \"name\": \"Mickey\", \"animalType\": \"mouse\" \"earCount\": 2 }","title":"JSON"},{"location":"unit-6/json-apis/#getjsonurl-callback","text":"JQuery function used to retrieve JSON data asynchronously from a remote server $.getJSON(\"http://example.com/words.json\", function(data){ console.log(data.length); })","title":"$.getJSON(url, callback)"},{"location":"unit-6/json-apis/#api-application-progamming-interface","text":"a way for different applications to communicate with one another. Usually transfers data using JSON data format.","title":"API (Application Progamming Interface)"},{"location":"unit-6/json-apis/#json-apis-assignment","text":"Make sure to go through the guide to starting an assignment before continuing. There will be a folder called \"examples\" where you can try out the example code below.","title":"JSON APIs Assignment"},{"location":"unit-6/json-apis/#json-modeling-background","text":"JavaScript Object Notation (JSON) is a standardized format for representing data. Prior to JSON, XML was the most popular standard for representing data. JSON has mostly won this formatting war due to how easy it is to read for both humans and computers. The syntax for JSON was inspired by the JavaScript Object literal notation (a long way of saying \"the way you normally instantiate objects in JavaScript\"), but there are a few notable differences: All properties/keys in JSON must be in quotes. All JSON strings must use double quotes. A few more not worth mentioning here. Here's an example of some JSON data representing cocktail descriptions: [ { \"name\": \"mojito\", \"image_url\": \"https://d2sf2a832xqb4v.cloudfront.net/detail_Skinny_Mojito_4.png?mtime=20151201224540\", \"description\": \"A delicious sweet drink with fresh mint. Best enjoyed on a beach!\", \"ingredients\": [ \"rum\", \"mint\", \"cane sugar\" ] }, { \"name\": \"martini\", \"image_url\": \"http://www.uvvodka.com/wp-content/uploads/2013/01/recipelarge_uvmartini.png\", \"description\": \"A classy, classic drink that you'll love if you're into olives.\", \"ingredients\": [ \"olives\", \"vermouth\", \"gin\" ] } ] If this looks familiar to you, that's because all JSON is valid JavaScript code for representing an object literal. However, not all JavaScript is valid JSON. Take a minute and read through a quick description of JSON in W3 Schools","title":"JSON Modeling Background"},{"location":"unit-6/json-apis/#apis-background","text":"In order for any application to communicate with another, it must set up an API, or Application Programming Interface . If you imagine an application as a secure building, an API is like a doorway into the building. It acts as a controlled opening into the building and the services and data inside. APIs can regulate who enters (makes a request) and what data they can access. Here\u2019s a video that does a good job of summarizing what an API is:","title":"APIs Background"},{"location":"unit-6/json-apis/#important-takeaways","text":"APIs allow for two applications to communicate (transfer data) with each other. APIs are like a menu of information that an application exposes to the public. This allows an application to pick and choose what information they want to expose to the world, which keeps the rest of it's data secure. REST APIs are web APIs that allow two applications to communicate over the internet. These are the most common APIs, and are what we will be working with in this course.","title":"Important Takeaways"},{"location":"unit-6/json-apis/#calling-apis-with-jquery","text":"When applications use REST APIs, the data that they transfer is often in JSON format. There are a number of ways a JavaScript application can make an API call to a server, but the simplest way is to use a JQuery function called getJSON() . Just like our earlier asynchronous examples with events, the function for loading JSON is also asynchronous. The reason for this is that loading data from an external source takes a (relatively) long time. The application has to wait for another server that may be located far away to respond. This is where the \"asynchronous\" part comes in. If an application simply locked up while waiting for data to come back from another server, then it wouldn't be able to do anything else in the meantime. By using an asynchronous callback, the application is able to perform other operations while it waits. Here's an example of how you could use getJSON() to load data with a bunch of animal names and simply log the length of the list: $.getJSON( 'https://raw.githubusercontent.com/boennemann/animals/master/words.json', function( data ) { console.log(data.length); // This will be logged later, after the data is loaded asynchronously. }) console.log('Hello'); // This will be logged first. You can find more examples of getJSON() usage on the official JQuery API Documentation page Complete JSON APIs Exercise and Get TMDB API Key before continuing.","title":"Calling APIs with JQuery"},{"location":"unit-6/json-apis/#json-apis-exercise","text":"Introduce Query Parameters in this exercise","title":"JSON APIs Exercise"},{"location":"unit-6/json-apis/#get-tmdb-api-key","text":"Not all APIs are \"public\", meaning that anyone can access and call them without identifying themselves first. In fact, most useful APIs out there are \"private\". So, we will need to identify or authenticate ourselves in some way when we call the API, so that the server knows who we are and can make sure we're authorized to use the API. One of the ways to authenticate ourselves is by using an API Key . To prepare for our capstone project, we need an API Key from The Movie Database (TMDB) and call a few APIs to search for some movies. Follow the instructions below to get your API key. Head to TMDB , and create an account by hitting \"Join TMDB\" at the top right corner. Fill in your account details, and after hitting \"Sign Up\", you should see a page like this: Head to your email, and find the email from \"The Movie Database\" with the subject \"Email verification required\" to verify your email. After you click the button to verify your email, sign in to TMDB with your login details, and you should see an account page like this: Navigate to \"Overview\" > \"Edit Profile\", and hit \"API\" on the side-menu. Find the \"Request an API Key\" heading and click to request a new key. Choose \"Developer\", Accept the Terms of Service, and fill out the form like below. The bottom portion will be your own personal information.: After submitting, you should see a page that contains your API Key. Remember where this is. We'll need to use this for our Capstone Project.","title":"Get TMDB API Key"},{"location":"unit-6/json-apis/#submitting","text":"Please follow the instructions in submitting an exercise to submit your assignment solution.","title":"Submitting"}]}